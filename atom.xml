<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giraffe.ME</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hijacking.cn/"/>
  <updated>2017-03-06T11:20:23.978Z</updated>
  <id>http://hijacking.cn/</id>
  
  <author>
    <name>Jiawei LU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 题解 in Python (5)</title>
    <link href="http://hijacking.cn/2017/03/06/Leetcode-Python-Solution-Part5/"/>
    <id>http://hijacking.cn/2017/03/06/Leetcode-Python-Solution-Part5/</id>
    <published>2017-03-06T11:00:30.000Z</published>
    <updated>2017-03-06T11:20:23.978Z</updated>
    
    <content type="html"><![CDATA[<p>接<a href="http://hijacking.cn/2017/02/15/Leetcode-Python-Solution-Part4/">上篇</a>。</p>
<p>最近在刷 《剑指Offer》 的题，Leetcode 上的题就做的有点慢，等把这个坑填完了再开个 《剑指Offer》 Python 实现的坑，这部分可能会选择放在 Github 上。</p>
<h3 id="Majority-Element-169"><a href="#Majority-Element-169" class="headerlink" title="Majority Element (#169)"></a>Majority Element (#169)</h3><p>Given an array of size n, find the majority element. The majority element is the element that appears more than <code>⌊ n/2 ⌋</code> times.<br>You may assume that the array is non-empty and the majority element always exist in the array.</p>
<ul>
<li>遍历一遍 <code>list</code>，将所有的数字出现的次数进行统计，并存储成 <code>dict</code>，然后返回出现次数最多的数字：84.96%</li>
</ul>
<p><em>MARK：<code>dict</code> 中最大 <code>value</code> 对应的 <code>key</code></em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    d = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums:</div><div class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> d:</div><div class="line">            d[i] += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            d[i] = <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> max(d.items(), key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>])[<span class="number">0</span>]</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>充分利用了最大元素出现的次数为 <code>⌊ n/2 ⌋</code> 次的特性，扫描一遍 <code>list</code> 就可以找出该元素：71.48%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    maxNum, counter = nums[<span class="number">0</span>], <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums[<span class="number">1</span>:]:</div><div class="line">        <span class="keyword">if</span> counter == <span class="number">0</span>:</div><div class="line">            maxNum = i</div><div class="line">            counter += <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> i == maxNum:</div><div class="line">            counter += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            counter -= <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> maxNum</div></pre></td></tr></table></figure>
<h3 id="Excel-Sheet-Column-Number-171"><a href="#Excel-Sheet-Column-Number-171" class="headerlink" title="Excel Sheet Column Number (#171)"></a>Excel Sheet Column Number (#171)</h3><p>Related to question Excel Sheet Column Title<br>Given a column title as appear in an Excel sheet, return its corresponding column number.<br>For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">A -&gt; 1</div><div class="line">B -&gt; 2</div><div class="line">C -&gt; 3</div><div class="line">...</div><div class="line">Z -&gt; 26</div><div class="line">AA -&gt; 27</div><div class="line">AB -&gt; 28</div></pre></td></tr></table></figure></p>
<ul>
<li>和字符串类型的数字转 int 类型一样，用高位加、乘进制的方法，其中 d 可以生成（效率稍低，但方便书写）和默认赋值：54.24% </li>
</ul>
<p><em>MARK：ASCII 码</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    l = [chr(ord(<span class="string">'A'</span>) + i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">26</span>)]</div><div class="line">    <span class="comment"># l = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']</span></div><div class="line">    result = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</div><div class="line">        num = <span class="number">1</span> + l.index(c)</div><div class="line">        result = result * <span class="number">26</span> + num</div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>使用 <code>reduce()</code> 函数：7.32%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x, y : x * <span class="number">26</span> + y, [ord(c) - <span class="number">64</span> <span class="keyword">for</span> c <span class="keyword">in</span> list(s)])</div></pre></td></tr></table></figure>
<h3 id="Factorial-Trailing-Zeroes-172"><a href="#Factorial-Trailing-Zeroes-172" class="headerlink" title="Factorial Trailing Zeroes (#172)"></a>Factorial Trailing Zeroes (#172)</h3><p>Given an integer n, return the number of trailing zeroes in n!.</p>
<blockquote>
<p><strong>NOTE</strong><br>Your solution should be in logarithmic time complexity.</p>
</blockquote>
<ul>
<li>计算整个 <code>n!</code> 这些数，总共可以被 5 整除多少次，就是末尾 0 的个数。特别需要注意的是，像 25、50 这样的数，可以被 5 整除两次，需要再进行处理（不断除以 5）：65.24%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trailingZeroes</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    result = <span class="number">0</span></div><div class="line">    flag = n</div><div class="line">    <span class="keyword">while</span> flag &gt; <span class="number">0</span>:</div><div class="line">        flag = flag // <span class="number">5</span></div><div class="line">        result += flag</div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>可以使用递归，原理和前面相同：84.68%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">trailingZeroes</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span> <span class="keyword">if</span> n==<span class="number">0</span> <span class="keyword">else</span> n//<span class="number">5</span> + self.trailingZeroes(n//<span class="number">5</span>)</div></pre></td></tr></table></figure>
<h3 id="Rotate-Array-189"><a href="#Rotate-Array-189" class="headerlink" title="Rotate Array (#189)"></a>Rotate Array (#189)</h3><p>Rotate an array of n elements to the right by k steps.<br>For example, with n = 7 and k = 3, the array <code>[1,2,3,4,5,6,7]</code> is rotated to <code>[5,6,7,1,2,3,4]</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</p>
</blockquote>
<ul>
<li>先将 <code>nums</code> 中需要往前移的部分保存成一个临时的列表，然后移动，最后往前移的部分添上。特别注意第一步 <code>k = k%len(nums)</code>，将步数控制在列表长度内：56.70%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type k: int</div><div class="line">    :rtype: void Do not return anything, modify nums in-place instead.</div><div class="line">    """</div><div class="line">    k = k%len(nums)</div><div class="line">    temp = nums[-k:]</div><div class="line">    nums[k:] = nums[:-k]</div><div class="line">    nums[:k] = temp</div></pre></td></tr></table></figure>
<ul>
<li>以题中为例，转换可以分为 <code>[1,2,3,4]</code> -&gt; <code>[4,3,2,1]</code>，<code>[5,6,7]</code> -&gt; <code>[7,6,5]</code>，然后 <code>[4,3,2,1,7,6,5]</code> -&gt; <code>[5,6,7,1,2,3,4]</code> 即可，使用到三次取反序的函数：46.82%</li>
<li><strong>特别注意</strong>，<code>reverse</code> 函数需要传递 3 个参数，<code>start</code> 和 <code>end</code> 是用来控制转换的起始和终止，<strong>不能使用切片</strong>，因为每次使用切片，Python 都会重新创建一个 <code>list</code>，指向的就不是原来的 <code>nums</code>。</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type k: int</div><div class="line">    :rtype: void Do not return anything, modify nums in-place instead.</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> k <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> k &lt;= <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span></div><div class="line">    k, end = k % len(nums), len(nums) - <span class="number">1</span></div><div class="line">    self.reverse(nums, <span class="number">0</span>, end - k)</div><div class="line">    self.reverse(nums, end - k + <span class="number">1</span>, end)</div><div class="line">    self.reverse(nums, <span class="number">0</span>, end)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, nums, start, end)</span>:</span></div><div class="line">    <span class="keyword">while</span> start &lt; end:</div><div class="line">        nums[start], nums[end] = nums[end], nums[start]</div><div class="line">        start, end = start + <span class="number">1</span>, end - <span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>先将最后 <code>k</code> 个元素放到合适的位置（头部），然后处理剩下 <code>n-k</code> 个数字：25.42%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rotate</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type k: int</div><div class="line">    :rtype: void Do not return anything, modify nums in-place instead.</div><div class="line">    """</div><div class="line">    n, k, j = len(nums), k % len(nums), <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span> <span class="keyword">and</span> k % n != <span class="number">0</span>:</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, k):</div><div class="line">            nums[j + i], nums[len(nums) - k + i] = nums[len(nums) - k + i], nums[j + i] <span class="comment"># swap</span></div><div class="line">        n, j = n - k, j + k</div><div class="line">        k = k % n</div></pre></td></tr></table></figure>
<h3 id="Reverse-Bits-190"><a href="#Reverse-Bits-190" class="headerlink" title="Reverse Bits (#190)"></a>Reverse Bits (#190)</h3><p>Reverse bits of a given 32 bits unsigned integer.<br>For example, given input 43261596 (represented in binary as <code>00000010100101000001111010011100</code>), return 964176192 (represented in binary as <code>00111001011110000010100101000000</code>).</p>
<blockquote>
<p>Follow up:<br>If this function is called many times, how would you optimize it?</p>
</blockquote>
<ul>
<li>利用 Python 自带的转换二进制的函数，取消开头 <code>0b</code>，然后补全前面的0，反序输出并转换成十进制：86.81%</li>
</ul>
<p><em>MARK：二进制、八进制、十六进制 &lt;-&gt; 十进制</em></p>
<blockquote>
<p><code>bin(dec)</code> <code>oct(dec)</code> <code>hex(dec)</code><br><code>int(str, 2 / 8 / 16)</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># @param n, an integer</span></div><div class="line"><span class="comment"># @return an integer</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="keyword">return</span> int((<span class="string">"0"</span> * (<span class="number">32</span>-len(str(bin(n)))+<span class="number">2</span>) + str(bin(n))[<span class="number">2</span>:])[::<span class="number">-1</span>], <span class="number">2</span>)</div></pre></td></tr></table></figure>
<ul>
<li>使用字符串的 <code>zfill</code> 方法：9.15%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># @param n, an integer</span></div><div class="line"><span class="comment"># @return an integer</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="keyword">return</span> int(bin(n)[<span class="number">2</span>:].zfill(<span class="number">32</span>)[::<span class="number">-1</span>], <span class="number">2</span>)</div></pre></td></tr></table></figure>
<ul>
<li>使用格式化字符串 <code>.format</code> ：36.20%</li>
</ul>
<p><em>MARK：格式化字符串</em></p>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20170306/191807549.png" alt="格式化字符串" title="格式化字符串"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># @param n, an integer</span></div><div class="line"><span class="comment"># @return an integer</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseBits</span><span class="params">(self, n)</span>:</span></div><div class="line">    oribin=<span class="string">'&#123;0:032b&#125;'</span>.format(n)</div><div class="line">    reversebin=oribin[::<span class="number">-1</span>]</div><div class="line">    <span class="keyword">return</span> int(reversebin,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="Number-of-1-Bits-191"><a href="#Number-of-1-Bits-191" class="headerlink" title="Number of 1 Bits (#191)"></a>Number of 1 Bits (#191)</h3><p>Write a function that takes an unsigned integer and returns the number of ’1’ bits it has (also known as the Hamming weight).<br>For example, the 32-bit integer ’11’ has binary representation <code>00000000000000000000000000001011</code>, so the function should return 3.</p>
<ul>
<li><p>先将 int 转换成 二进制数，然后统计有多少个 1：26.69%</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    bins = bin(n)</div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> bins:</div><div class="line">        <span class="keyword">if</span> i == <span class="string">'1'</span>:</div><div class="line">            count += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> count</div></pre></td></tr></table></figure>
</li>
<li><p>将 n 与 n-1 做与操作，会消掉最低位的 1，因此可以不停与，并设置计数器，知道与结果为0，返回计数： 33.10%</p>
</li>
</ul>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20170306/191745644.png" alt="原理图" title="原理图"></p>
<p><em>MARK：AND 与操作</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    count = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> n!=<span class="number">0</span>:</div><div class="line">        count += <span class="number">1</span></div><div class="line">        n &amp;= n<span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> count</div></pre></td></tr></table></figure></p>
<h3 id="House-Robber-198"><a href="#House-Robber-198" class="headerlink" title="House Robber (#198)"></a>House Robber (#198)</h3><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.<br>Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p>
<ul>
<li>动态规划问题，因为不能同时选择<strong>连续</strong>两个数，所以使用两个变量分别记录上一次结果 <code>last</code>，和上上一次结果 <code>llast</code>——如果新的数读取进来后，与 <code>llast</code> 相加大于 <code>last</code>，那么就将该数加到结果里；如果新的数读取进来后，与 <code>llast</code>相加小于上一次结果，那么这个数不读取进来，并且将 <code>llast</code> 设为 <code>last</code>： 9.62%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    lens = len(nums)</div><div class="line">    <span class="keyword">if</span> lens==<span class="number">1</span>: <span class="keyword">return</span> nums[<span class="number">0</span>]</div><div class="line">    last, llast = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(lens):</div><div class="line">        <span class="keyword">if</span> nums[i] + llast &gt; last:</div><div class="line">            llast, last = last, nums[i] + llast</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            llast = last</div><div class="line">    <span class="keyword">return</span> last</div></pre></td></tr></table></figure>
<ul>
<li>上面原理的一种<em>优雅</em>写法：13.26%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    last, now = <span class="number">0</span>, <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> nums: last, now = now, max(last + i, now)</div><div class="line">    <span class="keyword">return</span> now</div></pre></td></tr></table></figure>
<ul>
<li>分别用两个变量记录相邻两个数加入后，对应的最大的数：7.92%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    a,b = <span class="number">0</span>,<span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">        <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>:</div><div class="line">            a = max(nums[i]+a,b)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            b = max(nums[i]+b,a)</div><div class="line">    <span class="keyword">return</span> max(a,b)</div></pre></td></tr></table></figure>
<h3 id="Happy-Number-202"><a href="#Happy-Number-202" class="headerlink" title="Happy Number (#202)"></a>Happy Number (#202)</h3><p>Write an algorithm to determine if a number is “happy”.<br>A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.<br><strong>Example</strong>: 19 is a happy number<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1^2 + 9^2 = 82</div><div class="line">8^2 + 2^2 = 68</div><div class="line">6^2 + 8^2 = 100</div><div class="line">1^2 + 0^2 + 0^2 = 1</div></pre></td></tr></table></figure></p>
<ul>
<li>循环计算是否等于 1，用一个变量将计算得到的数保存，如果再次计算该数已经存在，说明会进入循环，这个数一定不是开心数：59.62%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    exists = []</div><div class="line">    <span class="keyword">while</span> n!= <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> exists:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            exists.append(n)</div><div class="line">        exists.append(n)</div><div class="line">        l = []</div><div class="line">        <span class="keyword">while</span> n!=<span class="number">0</span>:</div><div class="line">            l.append(n % <span class="number">10</span>)</div><div class="line">            n //= <span class="number">10</span></div><div class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> l:</div><div class="line">            n += d**<span class="number">2</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>改写上面的方法：59.62%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    mem = set()</div><div class="line">    <span class="keyword">while</span> n != <span class="number">1</span>:</div><div class="line">        n = sum([int(i)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> str(n)])</div><div class="line">        <span class="keyword">if</span> n <span class="keyword">not</span> <span class="keyword">in</span> mem:</div><div class="line">            mem.add(n)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>利用<strong>快慢双指针</strong>的方法，转化为是否存在闭环。无论是否是开心数，一定存在闭环。是开心数，重复的数是 1；不是开心数，重复的数不是 1： 30.44%</li>
</ul>
<p><em>MARK：快慢双指针</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isHappy</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    slow = n</div><div class="line">    fast = n</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        slow = self.digitSquareSum(slow)</div><div class="line">        fast = self.digitSquareSum(self.digitSquareSum(fast))</div><div class="line">        <span class="keyword">if</span> slow == fast:</div><div class="line">            <span class="keyword">break</span></div><div class="line">    <span class="keyword">if</span> slow == <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">digitSquareSum</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="keyword">return</span> sum([int(i)**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> str(n)])</div></pre></td></tr></table></figure>
<h3 id="Remove-Linked-List-Elements-203"><a href="#Remove-Linked-List-Elements-203" class="headerlink" title="Remove Linked List Elements (#203)"></a>Remove Linked List Elements (#203)</h3><p>Remove all elements from a linked list of integers that have value val.<br><strong>Example</strong><br><strong>Given</strong>: <code>1 --&gt; 2 --&gt; 6 --&gt; 3 --&gt; 4 --&gt; 5 --&gt; 6</code>, <strong>val</strong> = 6<br><strong>Return</strong>: <code>1 --&gt; 2 --&gt; 3 --&gt; 4 --&gt; 5</code></p>
<ul>
<li>在 head 头部增加一个 <strong>dummy node</strong> （虚拟节点、标杆节点），保证 head 指针不会在删除中丢失的问题。然后不断循环比较下一个的值与 val 是否相等，如果相等就将这个结点从链表中删除：60.76%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head, val)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :type val: int</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    dummy = ListNode(<span class="number">0</span>)</div><div class="line">    dummy.next = head</div><div class="line">    temp = dummy</div><div class="line">    <span class="keyword">while</span> temp <span class="keyword">and</span> temp.next:</div><div class="line">        <span class="keyword">if</span> temp.next.val == val:</div><div class="line">            temp.next = temp.next.next</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            temp = temp.next</div><div class="line">    <span class="keyword">return</span> dummy.next</div></pre></td></tr></table></figure>
<ul>
<li>上面的方法去除多余判断条件：39.57%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head, val)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :type val: int</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    head, head.next = ListNode(<span class="number">0</span>), head</div><div class="line">    p = head</div><div class="line">    <span class="keyword">while</span> p.next:</div><div class="line">        <span class="keyword">if</span> p.next.val == val:</div><div class="line">            p.next = p.next.next</div><div class="line">        <span class="keyword">else</span>: p = p.next</div><div class="line">    <span class="keyword">return</span> head.next</div></pre></td></tr></table></figure>
<ul>
<li>利用递归的方法：无法通过测试，效率太低</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head, val)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :type val: int</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> head</div><div class="line">    head.next = self.removeElements(head.next, val)</div><div class="line">    <span class="keyword">return</span> head.next <span class="keyword">if</span> head.val == val <span class="keyword">else</span> head</div></pre></td></tr></table></figure>
<h3 id="Count-Primes-204"><a href="#Count-Primes-204" class="headerlink" title="Count Primes (#204)"></a>Count Primes (#204)</h3><p>Count the number of prime numbers less than a non-negative number, n.</p>
<p><em>MARK：×</em></p>
<ul>
<li>首先构造一个辅助函数，判断一个数是否是素数的函数 <code>isPrime()</code>，然后依次判断小于 n 的数有多少是素数。其中判断素数的时间复杂度为 O(n)，所以整个函数的时间复杂度为 O(n^2)：无法通过测试，效率太低</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    counter = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n):</div><div class="line">        <span class="keyword">if</span> self.isPrime(i) == <span class="keyword">True</span>:</div><div class="line">            counter += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> counter</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n//<span class="number">2</span>+<span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>利用素数整数倍的数一定不是素数 的性质来判断：95.67%</li>
</ul>
<p><em>MARK：Sieve of Eratosthenes</em></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countPrimes</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n &lt; <span class="number">3</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    primes = [<span class="keyword">True</span>] * n</div><div class="line">    primes[<span class="number">0</span>] = primes[<span class="number">1</span>] = <span class="keyword">False</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, int(n**<span class="number">0.5</span>)+<span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> primes[i]:</div><div class="line">            primes[i*i:n:i] = [<span class="keyword">False</span>] * len(primes[i*i:n:i])</div><div class="line">    <span class="keyword">return</span> sum(primes)</div></pre></td></tr></table></figure>
<p>使用 <strong>Sieve of Eratosthenes</strong> 法可以最有效地找出小于 n 的所有素数。</p>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20170306/190911341.png" alt="算法示意" title="算法示意"></p>
<p>因为 2 是素数，所以 2 的所有整数倍都不可能是素数，因此可以将其标记为非素数。同样地，3 的所有整数倍也标记为非素数。因为 4 被标记过为非素数，因此跳过它，因为它的所有整数倍已经被标记了。同样地，将 5 的整数倍标记，由于 5 <em> 2，5 </em> 3，5 <em> 4 已经在前面被标记过，所有从 5 </em> 5 开始标记，即对于素数 p，从 p * p 开始标记为非素数。<br>整个循环的条件可以优化为 p &lt; sqrt(n)，因为剩下的其他非素数都已经被标记了。<br>该算法的时间复杂度为 O(n log log n)。</p>
<p>未完，接<a href="http://hijacking.cn/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2017/03/06/Leetcode-Python-Solution-Part5/">http://hijacking.cn/2017/03/06/Leetcode-Python-Solution-Part5/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接&lt;a href=&quot;http://hijacking.cn/2017/02/15/Leetcode-Python-Solution-Part4/&quot;&gt;上篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最近在刷 《剑指Offer》 的题，Leetcode 上的题就做的有点慢，等把这个坑填完了再开个 《剑指Offer》 Python 实现的坑，这部分可能会选择放在 Github 上。&lt;/p&gt;
&lt;h3 id=&quot;Majority-Element-169&quot;&gt;&lt;a href=&quot;#Majority-Element-169&quot; class=&quot;headerlink&quot; title=&quot;Majority Element (#169)&quot;&gt;&lt;/a&gt;Majority Element (#169)&lt;/h3&gt;&lt;p&gt;Given an array of size n, find the majority element. The majority element is the element that appears more than &lt;code&gt;⌊ n/2 ⌋&lt;/code&gt; times.&lt;br&gt;You may assume that the array is non-empty and the majority element always exist in the array.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;遍历一遍 &lt;code&gt;list&lt;/code&gt;，将所有的数字出现的次数进行统计，并存储成 &lt;code&gt;dict&lt;/code&gt;，然后返回出现次数最多的数字：84.96%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;MARK：&lt;code&gt;dict&lt;/code&gt; 中最大 &lt;code&gt;value&lt;/code&gt; 对应的 &lt;code&gt;key&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;majorityElement&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, nums)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    :type nums: List[int]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    :rtype: int&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    d = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; nums:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; d:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            d[i] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            d[i] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; max(d.items(), key = &lt;span class=&quot;keyword&quot;&gt;lambda&lt;/span&gt; x: x[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://hijacking.cn/tags/Leetcode/"/>
    
      <category term="Python" scheme="http://hijacking.cn/tags/Python/"/>
    
      <category term="算法" scheme="http://hijacking.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 题解 in Python (4)</title>
    <link href="http://hijacking.cn/2017/02/15/Leetcode-Python-Solution-Part4/"/>
    <id>http://hijacking.cn/2017/02/15/Leetcode-Python-Solution-Part4/</id>
    <published>2017-02-15T02:29:12.000Z</published>
    <updated>2017-03-06T11:20:14.378Z</updated>
    
    <content type="html"><![CDATA[<p>接<a href="http://hijacking.cn/2017/01/21/Leetcode-Python-Solution-Part3/">上篇</a>。</p>
<p>过完年，终于可以继续愉快地更新了。越到后面的题，越发感觉到了对于算法效率的要求，好几道题都出现了 <strong>Time Limit Exceeded</strong>，导致没能通过测试。有的用到了之前用过的双指针，有的用到了 ASCII 码，或者 <code>XOR</code> 操作，这些都是没见过的，可以为以后的解题提供一些思路。</p>
<h3 id="Pascal’s-Triangle-118"><a href="#Pascal’s-Triangle-118" class="headerlink" title="Pascal’s Triangle (#118)"></a>Pascal’s Triangle (#118)</h3><p>Given numRows, generate the first numRows of Pascal’s triangle.<br>For example, given numRows = 5,<br>Return<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">     [1],</div><div class="line">    [1,1],</div><div class="line">   [1,2,1],</div><div class="line">  [1,3,3,1],</div><div class="line"> [1,4,6,4,1]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<ul>
<li>首先将第一行特殊处理，只有一个元素1；从第二行开始，先设定默认值 <code>[1,1]</code>，作为首尾的值，然后在中间不停插入上一行对应元素相加的和为新的元素，直到这一行 <code>list</code> 的长度与行号相同：33.26%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self, numRows)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type numRows: int</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    returnList = []</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(numRows):</div><div class="line">        <span class="keyword">if</span> i == <span class="number">0</span>: </div><div class="line">            returnList.append([<span class="number">1</span>])</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        l = [<span class="number">1</span>, <span class="number">1</span>]</div><div class="line">        lastl = returnList[<span class="number">-1</span>]</div><div class="line">        flag = <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> len(l) &lt;= i:</div><div class="line">            l.insert(flag, lastl[flag<span class="number">-1</span>] + lastl[flag])</div><div class="line">            flag += <span class="number">1</span></div><div class="line">        returnList.append(l)</div><div class="line">    <span class="keyword">return</span> returnList</div></pre></td></tr></table></figure>
<ul>
<li>任何一行的数值可以通过前一行和前一行的偏移来构建出来，如下所示：60.57%</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">   1 3 3 1 0 </div><div class="line">+  0 1 3 3 1</div><div class="line">=  1 4 6 4 1</div></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span><span class="params">(self, numRows)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type numRows: int</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    res = [[<span class="number">1</span>]]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, numRows):</div><div class="line">	    <span class="comment"># Python 2</span></div><div class="line">        res += [map(<span class="keyword">lambda</span> x, y: x+y, res[<span class="number">-1</span>] + [<span class="number">0</span>], [<span class="number">0</span>] + res[<span class="number">-1</span>])]</div><div class="line">    <span class="keyword">return</span> res[:numRows]</div><div class="line"></div><div class="line"><span class="comment"># Python 3</span></div><div class="line">    res.append(list(map(<span class="keyword">lambda</span> x, y: x+y, res[<span class="number">-1</span>] + [<span class="number">0</span>], [<span class="number">0</span>] + res[<span class="number">-1</span>])))</div></pre></td></tr></table></figure>
<h3 id="Pascal’s-Triangle-II-119"><a href="#Pascal’s-Triangle-II-119" class="headerlink" title="Pascal’s Triangle II (#119)"></a>Pascal’s Triangle II (#119)</h3><p>Given an index k, return the kth row of the Pascal’s triangle.<br>For example, given <code>k = 3</code>,<br>Return <code>[1,3,3,1]</code>.</p>
<blockquote>
<p><strong>NOTE</strong><br>Could you optimize your algorithm to use only O(k) extra space?</p>
</blockquote>
<ul>
<li>与 #118 题类似：22.83% </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRow</span><span class="params">(self, rowIndex)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type rowIndex: int</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    last= new = [<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(rowIndex):</div><div class="line">        new = list(map(<span class="keyword">lambda</span> x,y:x+y, last + [<span class="number">0</span>], [<span class="number">0</span>] + last))</div><div class="line">        last = new</div><div class="line">    <span class="keyword">return</span> new</div></pre></td></tr></table></figure>
<ul>
<li>相比于上面使用 <code>map</code>，速度快30%：75.30%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRow</span><span class="params">(self, rowIndex)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type rowIndex: int</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    row = [<span class="number">1</span>]</div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(rowIndex):</div><div class="line">        row = [x + y <span class="keyword">for</span> x, y <span class="keyword">in</span> zip([<span class="number">0</span>]+row, row+[<span class="number">0</span>])]</div><div class="line">    <span class="keyword">return</span> row</div></pre></td></tr></table></figure>
<h3 id="Best-Time-to-Buy-and-Sell-Stock-121"><a href="#Best-Time-to-Buy-and-Sell-Stock-121" class="headerlink" title="Best Time to Buy and Sell Stock (#121)"></a>Best Time to Buy and Sell Stock (#121)</h3><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p>
<p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 1, 5, 3, 6, 4]</div><div class="line">Output: 5</div><div class="line"></div><div class="line">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</div></pre></td></tr></table></figure></p>
<p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Input: [7, 6, 4, 3, 1]</div><div class="line">Output: 0</div><div class="line"></div><div class="line">In this case, no transaction is done, i.e. max profit = 0.</div></pre></td></tr></table></figure></p>
<ul>
<li>循环列表中的每一个数，计算它与前面所有数的差值：无法通过测试，在处理大量数据的时候很慢</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    maxp = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(prices)):</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i):</div><div class="line">            profit = prices[i] - prices[j]</div><div class="line">            <span class="keyword">if</span> profit &gt; maxp:</div><div class="line">                maxp = profit</div><div class="line">    <span class="keyword">return</span> maxp</div></pre></td></tr></table></figure>
<ul>
<li>通过两个变量 <code>maxSoFar</code> 来记录当前的最大值，<code>maxCur</code> 来记录当新的一个数读进来之后，当前的最大值：27.37%</li>
</ul>
<p><em>MARK：巧妙解题思路</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    maxCur = maxSoFar = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(prices)):</div><div class="line">        maxCur = max(<span class="number">0</span>, maxCur + prices[i] - prices[i<span class="number">-1</span>])</div><div class="line">        maxSoFar = max(maxCur, maxSoFar)</div><div class="line">    <span class="keyword">return</span> maxSoFar</div></pre></td></tr></table></figure></p>
<ul>
<li>画出变化折线图可以看出，主要是寻找波峰和波谷：55.96%<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20170215/145437927.png" alt="变化折线图" title="变化折线图"></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    maxprofit = <span class="number">0</span></div><div class="line">    minPrice = float(<span class="string">'inf'</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices)):</div><div class="line">        <span class="keyword">if</span> prices[i] &lt; minPrice:</div><div class="line">            minPrice = prices[i]</div><div class="line">        <span class="keyword">elif</span> prices[i] - minPrice &gt; maxprofit:</div><div class="line">            maxprofit = prices[i] - minPrice</div><div class="line">    <span class="keyword">return</span> maxprofit</div></pre></td></tr></table></figure>
<h3 id="Best-Time-to-Buy-and-Sell-Stock-II-122"><a href="#Best-Time-to-Buy-and-Sell-Stock-II-122" class="headerlink" title="Best Time to Buy and Sell Stock II (#122)"></a>Best Time to Buy and Sell Stock II (#122)</h3><p>Say you have an array for which the ith element is the price of a given stock on day i.<br>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p>
<ul>
<li>后一天的值比前一天大，就将差值加入到总的利润中去（相当于卖出）；后一填比前一天小就更新最小值（相当于买入）：74.33%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    total_profit = <span class="number">0</span></div><div class="line">    minPrice = float(<span class="string">'inf'</span>)</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices)):</div><div class="line">        <span class="keyword">if</span> prices[i] &gt; minPrice:</div><div class="line">            total_profit += prices[i] - minPrice</div><div class="line">        minPrice = prices[i]</div><div class="line">    <span class="keyword">return</span> total_profit</div></pre></td></tr></table></figure>
<ul>
<li>上面的算法等于下面的算法：33.30%<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20170215/150138621.png" alt="最大利润" title="最大利润"></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type prices: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> sum(max(prices[i + <span class="number">1</span>] - prices[i], <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(prices) - <span class="number">1</span>))</div></pre></td></tr></table></figure>
<h3 id="Valid-Palindrome-125"><a href="#Valid-Palindrome-125" class="headerlink" title="Valid Palindrome (#125)"></a>Valid Palindrome (#125)</h3><p>Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.<br>For example,<br><code>&quot;A man, a plan, a canal: Panama&quot;</code> is a palindrome.<br><code>&quot;race a car&quot;</code> is not a palindrome.</p>
<blockquote>
<p><strong>NOTE</strong><br>Have you consider that the string might be empty? This is a good question to ask during an interview.<br>For the purpose of this problem, we define empty string as valid palindrome.</p>
</blockquote>
<ul>
<li>先用一个 <code>list</code> 来存储字符串中的所有字母和数字，然后验证该 <code>list</code> 中的所有字符是否是回文字符：19.07%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    l = []</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> s:</div><div class="line">        <span class="keyword">if</span> (c &gt;= <span class="string">'a'</span> <span class="keyword">and</span> c &lt;= <span class="string">'z'</span>) <span class="keyword">or</span> (c &gt;= <span class="string">'0'</span> <span class="keyword">and</span> c &lt;= <span class="string">'9'</span>):</div><div class="line">            l.append(c)</div><div class="line">        <span class="keyword">elif</span> c &gt;= <span class="string">'A'</span> <span class="keyword">and</span> c &lt;= <span class="string">'Z'</span>:</div><div class="line">            l.append(c.lower())</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range((len(l)+<span class="number">1</span>)//<span class="number">2</span>):</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l[i] == l[len(l)<span class="number">-1</span>-i]:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>两个标记 <code>l</code>、<code>r</code>，分别指向需要验证的两个字符，<code>l</code> 从前往后找为下一个是数字或字母的字符， <code>r</code> 从后往前找下一个是数字或字母的字符：16.60% </li>
</ul>
<p><em>MARK：<code>isalnum()</code> 方法检测是否由字母和数字组成</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    l, r = <span class="number">0</span>, len(s)<span class="number">-1</span></div><div class="line">    <span class="keyword">while</span> l &lt; r:</div><div class="line">        <span class="keyword">while</span> l &lt; r <span class="keyword">and</span> <span class="keyword">not</span> s[l].isalnum():</div><div class="line">            l += <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> l &lt;r <span class="keyword">and</span> <span class="keyword">not</span> s[r].isalnum():</div><div class="line">            r -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> s[l].lower() != s[r].lower():</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        l +=<span class="number">1</span>; r -= <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure></p>
<h3 id="Single-Number-136"><a href="#Single-Number-136" class="headerlink" title="Single Number (#136)"></a>Single Number (#136)</h3><p>Given an array of integers, every element appears twice except for one. Find that single one.</p>
<blockquote>
<p><strong>NOTE</strong><br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p>
</blockquote>
<ul>
<li>不停 <code>pop</code> 出 <code>list</code> 中最后一个元素，然后在剩下的 <code>list</code> 中找到与这个元素相等的元素，然后从 <code>list</code> 中移除，如果找不到则返回这个数值：无法通过测试，效率太低</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">while</span> nums:</div><div class="line">        c = nums.pop()</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">in</span> nums:</div><div class="line">            <span class="keyword">return</span> c</div><div class="line">        nums.remove(c)</div></pre></td></tr></table></figure>
<ul>
<li>利用字典来存储每个字符出现的次数，遍历一次 <code>list</code> 即可统计出来，然后返回 <code>key</code> 对应 <code>value</code> 为 1 的那个 <code>key</code>：14.15%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    d = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> nums:</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> c <span class="keyword">in</span> d:</div><div class="line">            d[c] = <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            d[c] += <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> d.keys():</div><div class="line">        <span class="keyword">if</span> d[i] == <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> i</div></pre></td></tr></table></figure>
<ul>
<li>利用 <code>XOR</code> 操作提高算法效率：67.34%</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">0 ^ N = N</div><div class="line">N ^ N = 0</div><div class="line"></div><div class="line">N1 ^ N1 ^ N2 ^ N2 ^ …… ^ Nx ^ Nx ^ N</div><div class="line">= (N1^N1) ^ (N2^N2) ^ …… ^ (Nx^Nx) ^ N</div><div class="line">= 0 ^ 0 ^ …… ^ 0 ^ N</div><div class="line">= N</div></pre></td></tr></table></figure>
<p><em>MARK：<code>XOR</code> 操作</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">singleNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    result = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">        result ^= nums[i]</div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure></p>
<h3 id="Linked-List-Cycle-141"><a href="#Linked-List-Cycle-141" class="headerlink" title="Linked List Cycle (#141)"></a>Linked List Cycle (#141)</h3><p>Given a linked list, determine if it has a cycle in it.<br>Follow up:<br>Can you solve it without using extra space?</p>
<ul>
<li>将链表从头开始每个节点加入一个 <code>list</code> 中，然后寻找下一个节点，如果该节点已经存在于列表中，那么说明存在环：无法通过测试，效率太低</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    flag, l = head, []</div><div class="line">    l.append(flag)</div><div class="line">    <span class="keyword">while</span> flag.next:</div><div class="line">        <span class="keyword">if</span> flag.next <span class="keyword">in</span> l:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            l.append(flag.next)</div><div class="line">            flag = flag.next</div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<ul>
<li>利用两个指针 <code>slow</code> 和 <code>fast</code>，<code>slow</code> 每次循环往前走一个，<code>fast</code> 每次循环往前走两个，如果该节点列表中存在环，那么总有一步两个指针会相遇：95.85%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        slow = head</div><div class="line">        fast = head.next</div><div class="line">        <span class="keyword">while</span> slow <span class="keyword">is</span> <span class="keyword">not</span> fast:</div><div class="line">            slow = slow.next</div><div class="line">            fast = fast.next.next</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<h3 id="Min-Stack-155"><a href="#Min-Stack-155" class="headerlink" title="Min Stack (#155)"></a>Min Stack (#155)</h3><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p>
<ul>
<li>push(x) – Push element x onto stack.</li>
<li>pop() – Removes the element on top of the stack.</li>
<li>top() – Get the top element.</li>
<li>getMin() – Retrieve the minimum element in the stack.</li>
</ul>
<p>Example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">MinStack minStack = new MinStack();</div><div class="line">minStack.push(-2);</div><div class="line">minStack.push(0);</div><div class="line">minStack.push(-3);</div><div class="line">minStack.getMin();   --&gt; Returns -3.</div><div class="line">minStack.pop();</div><div class="line">minStack.top();      --&gt; Returns 0.</div><div class="line">minStack.getMin();   --&gt; Returns -2.</div></pre></td></tr></table></figure></p>
<ul>
<li>利用 <code>list</code> 进行存储与操作：无法通过测试，效率太低</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        initialize your data structure here.</div><div class="line">        """</div><div class="line">        self.values = []</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :rtype: void</div><div class="line">        """</div><div class="line">        self.values.append(x)</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: void</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> self.values.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> self.values[<span class="number">-1</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> min(self.values)</div></pre></td></tr></table></figure>
<ul>
<li>上面存在问题，当计算最小值时，利用 <code>min</code> 函数的效率太低，因此，当新 <code>push</code> 进一个数的时候，应该同时储存此时所有元素最小的元素值是多少（或者利用一个变量存储此时的）：42.46%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        initialize your data structure here.</div><div class="line">        """</div><div class="line">        self.values = []</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, x)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type x: int</div><div class="line">        :rtype: void</div><div class="line">        """</div><div class="line">        curMin = self.getMin()</div><div class="line">        <span class="keyword">if</span> curMin == <span class="keyword">None</span> <span class="keyword">or</span> x &lt; curMin:</div><div class="line">            curMin = x</div><div class="line">        self.q.append((x, curMin));</div><div class="line">        </div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: void</div><div class="line">        """</div><div class="line">        <span class="keyword">return</span> self.values.pop()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> len(self.q) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self.q[len(self.q) - <span class="number">1</span>][<span class="number">0</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> len(self.q) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">None</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> self.q[len(self.q) - <span class="number">1</span>][<span class="number">1</span>]</div></pre></td></tr></table></figure>
<h3 id="Two-Sum-II-Input-array-is-sorted-167"><a href="#Two-Sum-II-Input-array-is-sorted-167" class="headerlink" title="Two Sum II - Input array is sorted (#167)"></a>Two Sum II - Input array is sorted (#167)</h3><p>Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.<br>The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2. Please note that your returned answers (both index1 and index2) are not zero-based.<br>You may assume that each input would have exactly one solution and you may not use the same element twice.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Input: numbers=&#123;2, 7, 11, 15&#125;, target=9</div><div class="line">Output: index1=1, index2=2</div></pre></td></tr></table></figure></p>
<ul>
<li>处理有很多值重复的情况，不然运行会超时，效率过低。分两种情况处理：1）如果应该分解成两个一样的值，那么判断后一个是否等于当前的值；2）如果不应该分解成两个一样的值，那么跳过所有相同的值，不再在这个值的时候遍历寻找另一个值：27.92%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers, target)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type numbers: List[int]</div><div class="line">    :type target: int</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    last = numbers[<span class="number">-1</span>]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(numbers)):</div><div class="line">        d1 = numbers[i]</div><div class="line">        <span class="keyword">if</span> d1 != target - d1:</div><div class="line">            <span class="keyword">if</span> d1 == last:</div><div class="line">                last = d1</div><div class="line">                <span class="keyword">continue</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> numbers[i+<span class="number">1</span>] == d1:</div><div class="line">                <span class="keyword">return</span> [i+<span class="number">1</span>,i+<span class="number">2</span>]</div><div class="line">        <span class="keyword">for</span> ii <span class="keyword">in</span> range(i+<span class="number">1</span>, len(numbers)):</div><div class="line">            d2 = numbers[ii]</div><div class="line">            <span class="keyword">if</span> d2 == target - d1:</div><div class="line">                <span class="keyword">return</span> [i+<span class="number">1</span>, ii+<span class="number">1</span>]</div><div class="line">            <span class="keyword">if</span> d2 &gt; target - d1:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        last = d1</div></pre></td></tr></table></figure>
<ul>
<li>利用双指针，当和大于目标值时，大指针向前挪动；当和小于目标值时，小指针向后挪动：70.18% </li>
</ul>
<p><em>MARK：双指针</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers, target)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type numbers: List[int]</div><div class="line">    :type target: int</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    l, r = <span class="number">0</span>, len(numbers)<span class="number">-1</span></div><div class="line">    <span class="keyword">while</span> l &lt; r:</div><div class="line">        s = numbers[l] + numbers[r]</div><div class="line">        <span class="keyword">if</span> s == target:</div><div class="line">            <span class="keyword">return</span> [l+<span class="number">1</span>, r+<span class="number">1</span>]</div><div class="line">        <span class="keyword">elif</span> s &lt; target:</div><div class="line">            l += <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            r -= <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h3 id="Excel-Sheet-Column-Title-168"><a href="#Excel-Sheet-Column-Title-168" class="headerlink" title="Excel Sheet Column Title (#168)"></a>Excel Sheet Column Title (#168)</h3><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.<br>For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1 -&gt; A</div><div class="line">2 -&gt; B</div><div class="line">3 -&gt; C</div><div class="line">...</div><div class="line">26 -&gt; Z</div><div class="line">27 -&gt; AA</div><div class="line">28 -&gt; AB</div></pre></td></tr></table></figure></p>
<ul>
<li>通过递归求解，首先生成一个 <code>list</code>用来储存 1-26 数字对应的字母，然后不停除以 26 求整数商以及余数，于是问题变成求这个商对应的字母加上余数对应的字母：80.54%</li>
</ul>
<p><em>MARK：ASCII 码</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    l = []</div><div class="line">    <span class="keyword">for</span> asciiNum <span class="keyword">in</span> range(<span class="number">65</span>, <span class="number">91</span>):</div><div class="line">        l.append(chr(asciiNum))</div><div class="line">    <span class="keyword">return</span> self.getOne(n,l)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getOne</span><span class="params">(self, n, l)</span>:</span></div><div class="line">    quotient = (n<span class="number">-1</span>) // <span class="number">26</span></div><div class="line">    remainder = n % <span class="number">26</span></div><div class="line">    <span class="keyword">if</span> quotient:</div><div class="line">        <span class="keyword">return</span> self.getOne(quotient, l) + l[remainder<span class="number">-1</span>]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> l[remainder<span class="number">-1</span>]</div></pre></td></tr></table></figure></p>
<ul>
<li>上面的函数可以简写成下面的形式：15.24%</li>
</ul>
<p><em>MARK：ASCII 码</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="string">""</span> <span class="keyword">if</span> n == <span class="number">0</span> <span class="keyword">else</span> self.convertToTitle((n - <span class="number">1</span>) // <span class="number">26</span>) + chr((n - <span class="number">1</span>) % <span class="number">26</span> + ord(<span class="string">'A'</span>))</div></pre></td></tr></table></figure></p>
<p>未完，接<a href="http://hijacking.cn/2017/03/06/Leetcode-Python-Solution-Part5/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2017/02/15/Leetcode-Python-Solution-Part4/">http://hijacking.cn/2017/02/15/Leetcode-Python-Solution-Part4/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接&lt;a href=&quot;http://hijacking.cn/2017/01/21/Leetcode-Python-Solution-Part3/&quot;&gt;上篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;过完年，终于可以继续愉快地更新了。越到后面的题，越发感觉到了对于算法效率的要求，好几道题都出现了 &lt;strong&gt;Time Limit Exceeded&lt;/strong&gt;，导致没能通过测试。有的用到了之前用过的双指针，有的用到了 ASCII 码，或者 &lt;code&gt;XOR&lt;/code&gt; 操作，这些都是没见过的，可以为以后的解题提供一些思路。&lt;/p&gt;
&lt;h3 id=&quot;Pascal’s-Triangle-118&quot;&gt;&lt;a href=&quot;#Pascal’s-Triangle-118&quot; class=&quot;headerlink&quot; title=&quot;Pascal’s Triangle (#118)&quot;&gt;&lt;/a&gt;Pascal’s Triangle (#118)&lt;/h3&gt;&lt;p&gt;Given numRows, generate the first numRows of Pascal’s triangle.&lt;br&gt;For example, given numRows = 5,&lt;br&gt;Return&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     [1],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [1,1],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   [1,2,1],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [1,3,3,1],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; [1,4,6,4,1]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://hijacking.cn/tags/Leetcode/"/>
    
      <category term="Python" scheme="http://hijacking.cn/tags/Python/"/>
    
      <category term="算法" scheme="http://hijacking.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 题解 in Python (3)</title>
    <link href="http://hijacking.cn/2017/01/21/Leetcode-Python-Solution-Part3/"/>
    <id>http://hijacking.cn/2017/01/21/Leetcode-Python-Solution-Part3/</id>
    <published>2017-01-21T01:16:38.000Z</published>
    <updated>2017-02-15T07:16:07.597Z</updated>
    
    <content type="html"><![CDATA[<p>接<a href="http://hijacking.cn/2017/01/11/Leetcode-Python-Solution-Part2/">上篇</a>。过年前最后一次更新，鸡年见！</p>
<h3 id="Remove-Duplicates-from-Sorted-List-83"><a href="#Remove-Duplicates-from-Sorted-List-83" class="headerlink" title="Remove Duplicates from Sorted List (#83)"></a>Remove Duplicates from Sorted List (#83)</h3><p>Given a sorted linked list, delete all duplicates such that each element appear only <em>once</em>.<br>For example,<br>Given <code>1-&gt;1-&gt;2</code>, return <code>1-&gt;2</code>.<br>Given <code>1-&gt;1-&gt;2-&gt;3-&gt;3</code>, return <code>1-&gt;2-&gt;3</code>.</p>
<ul>
<li>又是一道链表的题，可以使用前面经常使用的<strong>双指针</strong>的方法，特殊处理一下链表为空的情况：36.42%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> head: <span class="keyword">return</span> head</div><div class="line">    fast = slow = head</div><div class="line">    <span class="keyword">while</span> fast.next:</div><div class="line">        fast = fast.next</div><div class="line">        <span class="keyword">if</span> fast.val == slow.val:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            slow.next = fast</div><div class="line">            slow = slow.next</div><div class="line">    slow.next = fast.next</div><div class="line">    <span class="keyword">return</span> head</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>利用一个指针，其中用了一些技巧，例如，<code>cur.next.val</code> 不一定存在，于是可以用条件判断语句，先执行 <code>cur.next</code>，如果为 <code>False</code>，那么后面的也不会执行。内部的 <code>while</code>循环跳过了所有与当前值不相等的值，新的 <code>cur.next</code> 的值作为外面循环的新值传入：77.78%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    cur = head</div><div class="line">    <span class="keyword">while</span> cur:</div><div class="line">        <span class="keyword">while</span> cur.next <span class="keyword">and</span> cur.next.val == cur.val:</div><div class="line">            cur.next = cur.next.next     <span class="comment"># skip duplicated node</span></div><div class="line">        cur = cur.next     <span class="comment"># not duplicate of current node, move to next node</span></div><div class="line">    <span class="keyword">return</span> head</div></pre></td></tr></table></figure>
<h3 id="Merge-Sorted-Array-88"><a href="#Merge-Sorted-Array-88" class="headerlink" title="Merge Sorted Array (#88)"></a>Merge Sorted Array (#88)</h3><p>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p>
<blockquote>
<p><strong>NOTE</strong><br>You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2. The number of elements initialized in nums1 and nums2 are m and n respectively.</p>
</blockquote>
<ul>
<li>首先理解题意，<code>nums1</code> 实际的长度是 <code>m+n</code>，其中前 m 个是 <code>nums1</code> 本身自己的值，而后面 n 个填充为 0。可以从后往前依次比较 <code>nums1</code> 和 <code>nums2</code> 的数的大小，将较大的赋给相应的值，依次循环。<strong>注意</strong>处理其中一个已经全部赋完值的情况：50.82%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, m, nums2, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums1: List[int]</div><div class="line">    :type m: int</div><div class="line">    :type nums2: List[int]</div><div class="line">    :type n: int</div><div class="line">    :rtype: void Do not return anything, modify nums1 in-place instead.</div><div class="line">    """</div><div class="line">	index = m + n</div><div class="line">	<span class="keyword">while</span> index &gt;= <span class="number">0</span>:</div><div class="line">		<span class="keyword">if</span> n == <span class="number">0</span>: </div><div class="line">			nums1[:index] = nums1[:m]</div><div class="line">			<span class="keyword">break</span></div><div class="line">		<span class="keyword">if</span> m ==<span class="number">0</span>:</div><div class="line">		    nums1[:index] = nums2[:n]</div><div class="line">		    <span class="keyword">break</span></div><div class="line">		index -= <span class="number">1</span></div><div class="line">		num1 = nums1[m<span class="number">-1</span>]</div><div class="line">		num2 = nums2[n<span class="number">-1</span>]</div><div class="line">		<span class="keyword">if</span> num1 &gt; num2:</div><div class="line">			nums1[index] = num1</div><div class="line">			m -= <span class="number">1</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			nums1[index] = num2</div><div class="line">			n -= <span class="number">1</span></div></pre></td></tr></table></figure>
<ul>
<li>基本思想与上面一致，但是利用 <code>nums1</code> 和 <code>nums2</code> 各自的 <code>index</code> 来进行循环，最后处理 <code>nums2</code> 中还有值的情况：72.12%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, m, nums2, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums1: List[int]</div><div class="line">    :type m: int</div><div class="line">    :type nums2: List[int]</div><div class="line">    :type n: int</div><div class="line">    :rtype: void Do not return anything, modify nums1 in-place instead.</div><div class="line">    """</div><div class="line">        <span class="keyword">while</span> m &gt; <span class="number">0</span> <span class="keyword">and</span> n &gt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">if</span> nums1[m<span class="number">-1</span>] &gt;= nums2[n<span class="number">-1</span>]:</div><div class="line">                nums1[m+n<span class="number">-1</span>] = nums1[m<span class="number">-1</span>]</div><div class="line">                m -= <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                nums1[m+n<span class="number">-1</span>] = nums2[n<span class="number">-1</span>]</div><div class="line">                n -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> n &gt; <span class="number">0</span>:</div><div class="line">            nums1[:n] = nums2[:n]</div></pre></td></tr></table></figure>
<h3 id="Same-Tree-100"><a href="#Same-Tree-100" class="headerlink" title="Same Tree (#100)"></a>Same Tree (#100)</h3><p>Given two binary trees, write a function to check if they are equal or not.<br>Two binary trees are considered equal if they are structurally identical and the nodes have the same value.</p>
<ul>
<li>通过递归的方法来判断，如果一个点是叶子节点，那么它的 <code>left</code> 和 <code>right</code> 都是 <code>None</code>，此时比较两者是否同时为 <code>None</code>；如果不是叶子节点，那么比较该节点的 <code>val</code>，以及对 <code>left</code> 和 <code>right</code> 进行递归判断：48.38%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for a binary tree node.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.left = <span class="keyword">None</span></div><div class="line">        self.right = <span class="keyword">None</span></div><div class="line">        </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p, q)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type p: TreeNode</div><div class="line">    :type q: TreeNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> p <span class="keyword">and</span> q:</div><div class="line">        <span class="keyword">return</span> p.val == q.val <span class="keyword">and</span> self.isSameTree(p.left, q.left) <span class="keyword">and</span> self.isSameTree(p.right, q.right)</div><div class="line">    <span class="keyword">return</span> p == q</div></pre></td></tr></table></figure>
<p>值得注意：<code>if not a or b</code> 和 <code>if not (a or b)</code> 不一样，前者相当于 <code>if (not a) or b</code>。</p>
<ul>
<li>上面可以写成如下的形式，但是可读性太差：48.38%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p, q)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type p: TreeNode</div><div class="line">    :type q: TreeNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> p <span class="keyword">and</span> q <span class="keyword">and</span> p.val == q.val <span class="keyword">and</span> all(map(self.isSameTree, (p.left, p.right), (q.left, q.right))) <span class="keyword">or</span> p <span class="keyword">is</span> q</div></pre></td></tr></table></figure>
<ul>
<li>将两个数分别按照其树结构，形成对应的tuple，最后比较两个tuple是否相等即可，但不容易想到：86.56%</li>
</ul>
<p><em>MARK：tupleify，元祖化</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p, q)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type p: TreeNode</div><div class="line">    :type q: TreeNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">t</span><span class="params">(n)</span>:</span></div><div class="line">        <span class="keyword">return</span> n <span class="keyword">and</span> (n.val, t(n.left), t(n.right))</div><div class="line">    <span class="keyword">return</span> t(p) == t(q)</div></pre></td></tr></table></figure></p>
<h3 id="Symmetric-Tree-101"><a href="#Symmetric-Tree-101" class="headerlink" title="Symmetric Tree (#101)"></a>Symmetric Tree (#101)</h3><p>Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).<br>For example, this binary tree <code>[1,2,2,3,4,4,3]</code> is symmetric:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">    1</div><div class="line">   / \</div><div class="line">  2   2</div><div class="line"> / \ / \</div><div class="line">3  4 4  3</div></pre></td></tr></table></figure></p>
<p>But the following <code>[1,2,2,null,3,null,3]</code> is not:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  1</div><div class="line"> / \</div><div class="line">2   2</div><div class="line"> \   \</div><div class="line"> 3    3</div></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>NOTE</strong><br>Bonus points if you could solve it both recursively and iteratively.</p>
</blockquote>
<p><em>MARK：×</em></p>
<ul>
<li>利用<strong>递归</strong>，当传入的有一个为 <code>None</code> 时，判断左右是否相等；当左右都不为 <code>None</code> 时，首先如果两者的 <code>val</code> 不相等，那么肯定不同；然后，递归调用判断 <code>left.left</code> 和 <code>right.right</code>、<code>left.right</code> 和 <code>right.left</code> 是否相等：36.83%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> root == <span class="keyword">None</span> <span class="keyword">or</span> self.isSymmetricIter(root.left, root.right)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSymmetricIter</span><span class="params">(self, left, right)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (left <span class="keyword">and</span> right):</div><div class="line">        <span class="keyword">return</span> left == right</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> left.val == right.val:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> self.isSymmetricIter(left.left, right.right) <span class="keyword">and</span> self.isSymmetricIter(left.right, right.left)</div></pre></td></tr></table></figure>
<ul>
<li>递归的本质是使用堆栈，因此使用<strong>循环</strong>和堆栈来实现：33.67%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line">    stack = [[root.left, root.right]]</div><div class="line">    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</div><div class="line">        pair = stack.pop(<span class="number">0</span>)</div><div class="line">        left = pair[<span class="number">0</span>]</div><div class="line">        right = pair[<span class="number">1</span>]</div><div class="line"></div><div class="line">        <span class="keyword">if</span> left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> right <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        <span class="keyword">if</span> left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">or</span> right <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> left.val == right.val:</div><div class="line">            stack.insert(<span class="number">0</span>, [left.left, right.right])</div><div class="line">            stack.insert(<span class="number">0</span>, [left.right, right.left])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h3 id="Binary-Tree-Level-Order-Traversal-102"><a href="#Binary-Tree-Level-Order-Traversal-102" class="headerlink" title="Binary Tree Level Order Traversal (#102)"></a>Binary Tree Level Order Traversal (#102)</h3><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).<br>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / \</div><div class="line">9  20</div><div class="line">  /  \</div><div class="line"> 15   7</div></pre></td></tr></table></figure></p>
<p>return its level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [3],</div><div class="line">  [9,20],</div><div class="line">  [15,7]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<ul>
<li>利用一个新的 <code>list</code> 来记录要返回的值，另外一个 <code>list</code> 来记录下一次要去循环的所有节点： 64.71%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> []</div><div class="line">    result = [[root.val]]</div><div class="line">    <span class="keyword">if</span> root.right <span class="keyword">and</span> root.left:</div><div class="line">        stack = [root.right,root.left]</div><div class="line">    <span class="keyword">elif</span> root.right:</div><div class="line">        stack = [root.right]</div><div class="line">    <span class="keyword">elif</span> root.left:</div><div class="line">        stack = [root.left]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> result</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> len(stack) &gt; <span class="number">0</span>:</div><div class="line">        (appendl,temp) = self.valueInList(stack)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> len(appendl) == <span class="number">0</span>:</div><div class="line">            result.append(appendl)</div><div class="line">        stack = temp</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">valueInList</span><span class="params">(self, stack)</span>:</span></div><div class="line">    temp = []</div><div class="line">    appendl = []</div><div class="line">    <span class="keyword">while</span> len(stack)&gt;<span class="number">0</span>:</div><div class="line">        node = stack.pop()</div><div class="line">        appendl.append(node.val)</div><div class="line">        <span class="keyword">if</span> node.left: temp.insert(<span class="number">0</span>, node.left)</div><div class="line">        <span class="keyword">if</span> node.right: temp.insert(<span class="number">0</span>, node.right)</div><div class="line">    <span class="keyword">return</span> (appendl,temp)</div></pre></td></tr></table></figure>
<ul>
<li><strong>BFS</strong>，广度优先搜索。利用 <code>list</code> 生成器，简化表达式，将下一层需要添加的非空节点放进 <code>level</code> 列表中，将这一层所有节点的 <code>val</code> 值组成 <code>list</code> 添加到最后返回的 <code>ans</code> 列表中：43.97%</li>
</ul>
<p><em>MARK：BFS、层序遍历</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    ans, level = [], [root]</div><div class="line">    <span class="keyword">while</span> root <span class="keyword">and</span> level:</div><div class="line">        ans.append([node.val <span class="keyword">for</span> node <span class="keyword">in</span> level])</div><div class="line">        LRpair = [(node.left, node.right) <span class="keyword">for</span> node <span class="keyword">in</span> level]</div><div class="line">        level = [leaf <span class="keyword">for</span> LR <span class="keyword">in</span> LRpair <span class="keyword">for</span> leaf <span class="keyword">in</span> LR <span class="keyword">if</span> leaf]</div><div class="line">    <span class="keyword">return</span> ans</div></pre></td></tr></table></figure></p>
<h3 id="Maximum-Depth-of-Binary-Tree-104"><a href="#Maximum-Depth-of-Binary-Tree-104" class="headerlink" title="Maximum Depth of Binary Tree (#104)"></a>Maximum Depth of Binary Tree (#104)</h3><p>Given a binary tree, find its maximum depth.<br>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p>
<ul>
<li>根据上一题的第二种思路，将 <code>val</code> 变成 <code>list</code> 加入答案的步骤改为层数 +1： 97.04%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    ans, level = <span class="number">0</span>, [root]</div><div class="line">    <span class="keyword">while</span> root <span class="keyword">and</span> level:</div><div class="line">        ans += <span class="number">1</span></div><div class="line">        LRpair = [(node.left,node.right) <span class="keyword">for</span> node <span class="keyword">in</span> level]</div><div class="line">        level = [leaf <span class="keyword">for</span> LR <span class="keyword">in</span> LRpair <span class="keyword">for</span> leaf <span class="keyword">in</span> LR <span class="keyword">if</span> leaf]</div><div class="line">    <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<ul>
<li>使用<strong>递归</strong>，但效率较差：12.26%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + max(map(self.maxDepth, (root.left, root.right))) <span class="keyword">if</span> root <span class="keyword">else</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>DFS</strong>，深度优先搜索。分别找到树每一条分支路径的深度，返回最大的深度作为二叉树的深度：51.02%</li>
</ul>
<p><em>MARK：DFS</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        </div><div class="line">        stack = [root]</div><div class="line">        value = [<span class="number">1</span>]</div><div class="line">        result = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> len(stack)&gt;<span class="number">0</span>:</div><div class="line">            node = stack.pop(<span class="number">0</span>)</div><div class="line">            temp = value.pop(<span class="number">0</span>)</div><div class="line">            result = max(temp, result)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                stack.append(node.right)</div><div class="line">                value.append(temp+<span class="number">1</span>)</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">                stack.append(node.left)</div><div class="line">                value.append(temp+<span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure></p>
<h3 id="Binary-Tree-Level-Order-Traversal-II-107"><a href="#Binary-Tree-Level-Order-Traversal-II-107" class="headerlink" title="Binary Tree Level Order Traversal II (#107)"></a>Binary Tree Level Order Traversal II (#107)</h3><p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).<br>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  3</div><div class="line"> / \</div><div class="line">9  20</div><div class="line">  /  \</div><div class="line"> 15   7</div></pre></td></tr></table></figure></p>
<p>return its bottom-up level order traversal as:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  [<span class="number">15</span>,<span class="number">7</span>],</div><div class="line">  [<span class="number">9</span>,<span class="number">20</span>],</div><div class="line">  [<span class="number">3</span>]</div><div class="line">]</div></pre></td></tr></table></figure></p>
<ul>
<li>BFS。将 #102 题中顺序加入改成每次加入到最前面，即倒叙进行输出：7.86% </li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    ans, level = [], [root]</div><div class="line">    <span class="keyword">while</span> root <span class="keyword">and</span> level:</div><div class="line">        ans.insert(<span class="number">0</span>, [node.val <span class="keyword">for</span> node <span class="keyword">in</span> level])</div><div class="line">        LRpair = [(node.left, node.right) <span class="keyword">for</span> node <span class="keyword">in</span> level]</div><div class="line">        level = [leaf <span class="keyword">for</span> LR <span class="keyword">in</span> LRpair <span class="keyword">for</span> leaf <span class="keyword">in</span> LR <span class="keyword">if</span> leaf]</div><div class="line">    <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<ul>
<li>DFS + 堆栈。：41.37%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    stack = [(root, <span class="number">0</span>)]</div><div class="line">    res = []</div><div class="line">    <span class="keyword">while</span> stack:</div><div class="line">        node, level = stack.pop()</div><div class="line">        <span class="keyword">if</span> node:</div><div class="line">            <span class="keyword">if</span> len(res) &lt; level+<span class="number">1</span>:</div><div class="line">                res.insert(<span class="number">0</span>, [])</div><div class="line">            res[-(level+<span class="number">1</span>)].append(node.val)</div><div class="line">            stack.append((node.right, level+<span class="number">1</span>))</div><div class="line">            stack.append((node.left, level+<span class="number">1</span>))</div><div class="line">    <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
<ul>
<li>DFS + 递归。：63.79%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: List[List[int]]</div><div class="line">    """</div><div class="line">    res = []</div><div class="line">    self.dfs(root, <span class="number">0</span>, res)</div><div class="line">    <span class="keyword">return</span> res</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(self, root, level, res)</span>:</span></div><div class="line">    <span class="keyword">if</span> root:</div><div class="line">        <span class="keyword">if</span> len(res) &lt; level + <span class="number">1</span>:</div><div class="line">            res.insert(<span class="number">0</span>, [])</div><div class="line">        res[-(level+<span class="number">1</span>)].append(root.val)</div><div class="line">        self.dfs(root.left, level+<span class="number">1</span>, res)</div><div class="line">        self.dfs(root.right, level+<span class="number">1</span>, res)</div></pre></td></tr></table></figure>
<h3 id="Balanced-Binary-Tree-110"><a href="#Balanced-Binary-Tree-110" class="headerlink" title="Balanced Binary Tree (#110)"></a>Balanced Binary Tree (#110)</h3><p>Given a binary tree, determine if it is height-balanced.<br>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p>
<ul>
<li>利用 #104 计算数深度的算法，从根节点开始，计算左右两边树的深度相差是否超过 1，如果超过 1，那么不是平衡二叉树；如果没有超过1，那么继续遍历其左右两个子数，直至遍历完成：59.58%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">if</span> abs(self.depth(root.left) - self.depth(root.right)) &lt;= <span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> self.isBalanced(root.left) <span class="keyword">and</span> self.isBalanced(root.right)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">depth</span><span class="params">(self, tree)</span>:</span></div><div class="line">    result, stack = <span class="number">0</span>, [tree]</div><div class="line">    <span class="keyword">while</span> tree <span class="keyword">and</span> stack:</div><div class="line">        result += <span class="number">1</span></div><div class="line">        LRpair = [(node.left, node.right) <span class="keyword">for</span> node <span class="keyword">in</span> stack]</div><div class="line">        stack = [leaf <span class="keyword">for</span> LR <span class="keyword">in</span> LRpair <span class="keyword">for</span> leaf <span class="keyword">in</span> LR <span class="keyword">if</span> leaf]</div><div class="line">    <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>前一种方法是从上往下搜索，效率不高；<strong>从下往上搜索</strong>的话效率更高：76.95%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span> != self.dfsHeight(root)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfsHeight</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    left = self.dfsHeight(root.left)</div><div class="line">    <span class="keyword">if</span> left == <span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    right = self.dfsHeight(root.right)</div><div class="line">    <span class="keyword">if</span> right == <span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    <span class="keyword">if</span> abs(left - right) &gt; <span class="number">1</span>: <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + max(left, right)</div></pre></td></tr></table></figure>
<h3 id="Minimum-Depth-of-Binary-Tree-111"><a href="#Minimum-Depth-of-Binary-Tree-111" class="headerlink" title="Minimum Depth of Binary Tree (#111)"></a>Minimum Depth of Binary Tree (#111)</h3><p>Given a binary tree, find its minimum depth.<br>The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p>
<ul>
<li>从下往上，如果 <code>left</code> 或者 <code>right</code> 为 0，那么表示那个树枝上没有叶结点，因此不应该进行计算，而直接将另外一边的值加 1 得到其父节点的深度：63.39%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="keyword">None</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    left = self.minDepth(root.left)</div><div class="line">    right = self.minDepth(root.right)</div><div class="line">    <span class="keyword">if</span> left == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span> + right</div><div class="line">    <span class="keyword">if</span> right == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span> + left</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + min(left, right)</div></pre></td></tr></table></figure>
<ul>
<li>上面的方法可以写成下面三行：31.86%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    d = map(self.minDepth, (root.left, root.right))</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> + (min(d) <span class="keyword">or</span> max(d))</div></pre></td></tr></table></figure>
<h3 id="Path-Sum-112"><a href="#Path-Sum-112" class="headerlink" title="Path Sum (#112)"></a>Path Sum (#112)</h3><p>Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.<br>For example:<br>Given the below binary tree and <code>sum = 22</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">      5</div><div class="line">     / \</div><div class="line">    4   8</div><div class="line">   /   / \</div><div class="line">  11  13  4</div><div class="line"> /  \      \</div><div class="line">7    2      1</div></pre></td></tr></table></figure></p>
<p>return true, as there exist a root-to-leaf path <code>5-&gt;4-&gt;11-&gt;2</code> which sum is 22.</p>
<ul>
<li>DFS。首先计算每一条路径上数的和，如果一样，那么返回 <code>True</code>。其中，要判断该节点是否是叶节点，如果不是叶子节点，将其加入到堆栈的时候需要判断其是否非 <code>None</code>：18.74%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root, sum)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :type sum: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    stack = [root]</div><div class="line">    suml = [<span class="number">0</span>]</div><div class="line">    result = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> root <span class="keyword">and</span> stack:</div><div class="line">        node = stack.pop(<span class="number">0</span>)</div><div class="line">        result = suml.pop(<span class="number">0</span>) + node.val</div><div class="line">        <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">and</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> result == sum:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            suml.insert(<span class="number">0</span>,result)</div><div class="line">            stack.insert(<span class="number">0</span>,node.left)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.right <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            suml.insert(<span class="number">0</span>,result)</div><div class="line">            stack.insert(<span class="number">0</span>,node.right)</div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div></pre></td></tr></table></figure>
<ul>
<li>递归。每个节点，递归地判断两边的子节点是否有路径长度为 <code>总和-自身值</code> 大小的路径：52.58%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root, sum)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type root: TreeNode</div><div class="line">    :type sum: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> root.val == sum:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span>       </div><div class="line">    sum -= root.val</div><div class="line">    <span class="keyword">return</span> self.hasPathSum(root.left, sum) <span class="keyword">or</span> self.hasPathSum(root.right, sum)</div></pre></td></tr></table></figure>
<p>未完，接<a href="http://hijacking.cn/2017/02/15/Leetcode-Python-Solution-Part4/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2017/01/21/Leetcode-Python-Solution-Part3/">http://hijacking.cn/2017/01/21/Leetcode-Python-Solution-Part3/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接&lt;a href=&quot;http://hijacking.cn/2017/01/11/Leetcode-Python-Solution-Part2/&quot;&gt;上篇&lt;/a&gt;。过年前最后一次更新，鸡年见！&lt;/p&gt;
&lt;h3 id=&quot;Remove-Duplicates-from-Sorted-List-83&quot;&gt;&lt;a href=&quot;#Remove-Duplicates-from-Sorted-List-83&quot; class=&quot;headerlink&quot; title=&quot;Remove Duplicates from Sorted List (#83)&quot;&gt;&lt;/a&gt;Remove Duplicates from Sorted List (#83)&lt;/h3&gt;&lt;p&gt;Given a sorted linked list, delete all duplicates such that each element appear only &lt;em&gt;once&lt;/em&gt;.&lt;br&gt;For example,&lt;br&gt;Given &lt;code&gt;1-&amp;gt;1-&amp;gt;2&lt;/code&gt;, return &lt;code&gt;1-&amp;gt;2&lt;/code&gt;.&lt;br&gt;Given &lt;code&gt;1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;3&lt;/code&gt;, return &lt;code&gt;1-&amp;gt;2-&amp;gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;又是一道链表的题，可以使用前面经常使用的&lt;strong&gt;双指针&lt;/strong&gt;的方法，特殊处理一下链表为空的情况：36.42%&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deleteDuplicates&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, head)&lt;/span&gt;:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    :type head: ListNode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    :rtype: ListNode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; head: &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    fast = slow = head&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; fast.next:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        fast = fast.next&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; fast.val == slow.val:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            slow.next = fast&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            slow = slow.next&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    slow.next = fast.next&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; head&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://hijacking.cn/tags/Leetcode/"/>
    
      <category term="Python" scheme="http://hijacking.cn/tags/Python/"/>
    
      <category term="算法" scheme="http://hijacking.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>本站 ss 服务的邀请码</title>
    <link href="http://hijacking.cn/2017/01/17/ss/"/>
    <id>http://hijacking.cn/2017/01/17/ss/</id>
    <published>2017-01-17T08:17:09.000Z</published>
    <updated>2017-02-20T00:27:05.095Z</updated>
    
    <content type="html"><![CDATA[<p>平时不免需要纠正上网姿势，于是用 <a href="http://www.vultr.com/?ref=7084902-3B" title="Vultr 官网" target="_blank" rel="external">Vultr</a> 搭建了一个科学上网的 shadowsocks 服务，节点在日本，速度很快。点击 <a href="http://hijacking.cn/ss/" title="扶墙">扶墙</a> 了解更多。</p>
<p>放几个邀请码，有需求的朋友可以使用邀请码先注册。</p>
<a id="more"></a>
<p>以下是兑换码：</p>
<blockquote>
<p><code>ljw1MjgyMGNkMGZlNjQ2ZDM4YmM</code></p>
<p><code>ljwkZjIxNjZkZDQyNGE1NzEyNzQ</code></p>
<p><code>ljwNTI4NDVlYzBhMzc4Mzk0MDAz</code></p>
<p><code>ljwxZTRiYmQ2MzkzYzkxMTFlNjU</code></p>
<p><code>ljwdlZTZmNWY5YWE1Y2QxN2NhMW</code></p>
<p><code>ljwkNDhhYjMxZDAxNmZmY2JmMzM</code></p>
<p><code>ljwZDFiMmRiNTRkNTViYzhiYmEy</code></p>
<p><code>ljwRjODA1MWNmZDRlOWVhODA3Mm</code></p>
<p><code>ljwY5OGQ1Njk2N2Q5NDY0NzFhZj</code></p>
<p><code>ljwIzZGUwZDRlYWNiOWEzZTZlNT</code></p>
</blockquote>
<p>Enjoy~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时不免需要纠正上网姿势，于是用 &lt;a href=&quot;http://www.vultr.com/?ref=7084902-3B&quot; title=&quot;Vultr 官网&quot;&gt;Vultr&lt;/a&gt; 搭建了一个科学上网的 shadowsocks 服务，节点在日本，速度很快。点击 &lt;a href=&quot;http://hijacking.cn/ss/&quot; title=&quot;扶墙&quot;&gt;扶墙&lt;/a&gt; 了解更多。&lt;/p&gt;
&lt;p&gt;放几个邀请码，有需求的朋友可以使用邀请码先注册。&lt;/p&gt;
    
    </summary>
    
    
      <category term="shadowsocks" scheme="http://hijacking.cn/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 题解 in Python (2)</title>
    <link href="http://hijacking.cn/2017/01/11/Leetcode-Python-Solution-Part2/"/>
    <id>http://hijacking.cn/2017/01/11/Leetcode-Python-Solution-Part2/</id>
    <published>2017-01-11T01:53:34.000Z</published>
    <updated>2017-02-06T01:29:40.071Z</updated>
    
    <content type="html"><![CDATA[<p>接<a href="http://hijacking.cn/2017/01/01/Leetcode-Python-Solution-Part1/">上篇</a>。</p>
<p>Part 2 如期而至，其中有好好几道<strong>链表</strong>的题（用双指针有时候会很方便），涉及到算法<strong>效率</strong>的问题（用迭代虽然方便，但是对于计算来说效率是很低)，以及分析后变为<strong>斐波那契</strong>数列求解的问题。题目变得越来越有趣，希望自己可以坚持下去。</p>
<h3 id="Swap-Nodes-in-Pairs-24"><a href="#Swap-Nodes-in-Pairs-24" class="headerlink" title="Swap Nodes in Pairs (#24)"></a>Swap Nodes in Pairs (#24)</h3><p>Given a linked list, swap every two adjacent nodes and return its head.<br>For example, Given <code>1-&gt;2-&gt;3-&gt;4</code>, you should return the list as <code>2-&gt;1-&gt;4-&gt;3</code>.<br>Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.</p>
<a id="more"></a>
<ul>
<li>利用递归不停地将下两个数交换位置：22.61%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(l)</span>:</span></div><div class="line">    <span class="keyword">if</span> l == <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> l</div><div class="line">    <span class="keyword">elif</span> l.next == <span class="keyword">None</span>:</div><div class="line">        <span class="keyword">return</span> l</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        ln = l.next</div><div class="line">        temp = l.next.next</div><div class="line">        l.next.next = l</div><div class="line">        l.next = temp</div><div class="line">        <span class="keyword">return</span> ln</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type head: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head:<span class="keyword">return</span> head</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> head.next:<span class="keyword">return</span> head</div><div class="line">        l1 = head</div><div class="line">        l2 = head.next</div><div class="line">        temp = ListNode(<span class="number">0</span>)</div><div class="line">        ret = temp</div><div class="line">        <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</div><div class="line">            temp.next = swap(l1)</div><div class="line">            temp = l1</div><div class="line">            l1 = l1.next</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> l1:<span class="keyword">break</span></div><div class="line">            l2 = l1.next</div><div class="line">        <span class="keyword">return</span> ret.next</div></pre></td></tr></table></figure>
<ul>
<li>将 <code>pre -&gt; a -&gt; b -&gt; b.next</code>  变成 <code>pre -&gt; b -&gt; a -&gt; b.next</code>：51.05% </li>
</ul>
<p><em>MARK：连续赋值、动态语言</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">swapPairs</span><span class="params">(self, head)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type head: ListNode</div><div class="line">    :rtype: ListNode</div><div class="line">    """</div><div class="line">    pre, pre.next = self, head</div><div class="line">    <span class="keyword">while</span> pre.next <span class="keyword">and</span> pre.next.next:</div><div class="line">        a = pre.next</div><div class="line">        b = a.next</div><div class="line">        pre.next, b.next, a.next = b, a, b.next</div><div class="line">        pre = a</div><div class="line">    <span class="keyword">return</span> self.next</div></pre></td></tr></table></figure></p>
<p>注意，Python中的属性可以动态添加，即 <code>self.next</code> 是后来添加的属性。<br>另外，Python中多个变量连续赋值的时候，是一下子将等号右边的数读取进来，不会再随着变量值的改变而改变，然后赋给左边的变量：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">1</span></div><div class="line">b = <span class="number">2</span></div><div class="line"></div><div class="line">a,b = b,a</div><div class="line"><span class="comment"># a = 2, b = 1</span></div><div class="line"><span class="comment"># 而不是 a = 2, b = 2</span></div></pre></td></tr></table></figure></p>
<h3 id="Remove-Duplicates-from-Sorted-Array-26"><a href="#Remove-Duplicates-from-Sorted-Array-26" class="headerlink" title="Remove Duplicates from Sorted Array (#26)"></a>Remove Duplicates from Sorted Array (#26)</h3><p>Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.<br>Do not allocate extra space for another array, you must do this in place with constant memory.<br>For example, Given input array <code>nums = [1,1,2]</code>, Your function should return <code>length = 2</code>, with the first two elements of nums being <code>1</code> and <code>2</code> respectively. It doesn’t matter what you leave beyond the new length.</p>
<ul>
<li>每发现一个相同的值，将其移到最后，然后后面的值依次向前补充，直到循环过每个值：无法通过测试，<strong>效率太低</strong>，所有数向前挪这一步不需要进行</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></div><div class="line">	<span class="string">"""</span></div><div class="line">	:type nums: List[int]</div><div class="line">	:rtype: int</div><div class="line">	"""</div><div class="line">	<span class="keyword">if</span> nums == []:<span class="keyword">return</span> <span class="number">0</span></div><div class="line">	last = nums[<span class="number">0</span>]</div><div class="line">	i = c = count = <span class="number">1</span></div><div class="line">	<span class="keyword">while</span> c &lt; len(nums):</div><div class="line">		this = nums[i]</div><div class="line">		<span class="keyword">if</span> this == last:</div><div class="line">			<span class="keyword">for</span> j <span class="keyword">in</span> range(i,len(nums)<span class="number">-1</span>):</div><div class="line">				nums[j] = nums[j+<span class="number">1</span>]</div><div class="line">			nums[len(nums)<span class="number">-1</span>] = this</div><div class="line">		<span class="keyword">elif</span> this &lt; last:</div><div class="line">			<span class="keyword">return</span> count</div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			count +=<span class="number">1</span></div><div class="line">			i += <span class="number">1</span></div><div class="line">		last = this</div><div class="line">		c += <span class="number">1</span></div><div class="line">	<span class="keyword">return</span> count</div></pre></td></tr></table></figure>
<ul>
<li>将不同的数替换相同数对应位置上的数字，然后返回对应长度的数组：58.91%</li>
</ul>
<p><em>MARK：双指针</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span><span class="params">(self, nums)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">    newTail = <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</div><div class="line">        <span class="keyword">if</span> nums[i] != nums[newTail]:</div><div class="line">            newTail += <span class="number">1</span></div><div class="line">            nums[newTail] = nums[i]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> newTail + <span class="number">1</span></div></pre></td></tr></table></figure></p>
<h3 id="Remove-Element-27"><a href="#Remove-Element-27" class="headerlink" title="Remove Element (#27)"></a>Remove Element (#27)</h3><p>Given an array and a value, remove all instances of that value in place and return the new length.<br>Do not allocate extra space for another array, you must do this in place with constant memory.<br>The order of elements can be changed. It doesn’t matter what you leave beyond the new length.<br>Example:<br>Given input array <code>nums = [3,2,2,3]</code>, <code>val = 3</code><br>Your function should return length = 2, with the first two elements of nums being 2.</p>
<blockquote>
<p><strong>Hint</strong></p>
<ol>
<li>Try two pointers.</li>
<li>Did you use the property of “the order of elements can be changed”?</li>
<li>What happens when the elements to remove are rare?</li>
</ol>
</blockquote>
<ul>
<li>在数组里的数，一个一个和 <code>val</code> 比较，如果不相同，则从数组头部开始加入，最后返回数组的长度（与 #26 类似）：35.64%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums, val)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type val: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    newlen = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">        <span class="keyword">if</span> nums[i] != val:</div><div class="line">            nums[newlen] = nums[i]</div><div class="line">            newlen += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> newlen</div></pre></td></tr></table></figure>
<ul>
<li>如果需要取出的数在数组中很稀少，那么可以通过减小数组长度的方法来提高速度，但是这样的数组的顺序是乱的：35.64%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeElement</span><span class="params">(self, nums, val)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type val: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    i = <span class="number">0</span></div><div class="line">    n = len(nums)</div><div class="line">    <span class="keyword">while</span> i &lt; n:</div><div class="line">        <span class="keyword">if</span> nums[i] == val:</div><div class="line">            nums[i] = nums[n<span class="number">-1</span>]</div><div class="line">            n -= <span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            i += <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> n</div></pre></td></tr></table></figure>
<h3 id="Implement-strStr-28"><a href="#Implement-strStr-28" class="headerlink" title="Implement strStr() (#28)"></a>Implement strStr() (#28)</h3><p>Implement strStr().<br>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>
<ul>
<li>首先找出特殊情况；对于一般情况，先查找第一个字符符合的 <code>index</code>，然后检验 <code>len(needle)</code> 个字符是否也一样，注意中间有一步需要判断 <code>haystack</code> 剩下的长度是否不小于 <code>needle</code> 的长度，否则会数组越界：22.46%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type haystack: str</div><div class="line">    :type needle: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> needle == <span class="string">""</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">if</span> len(needle)&gt;len(haystack): <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    n0 = needle[<span class="number">0</span>]</div><div class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(haystack)):</div><div class="line">        has = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> haystack[index] == n0:</div><div class="line">            has = <span class="keyword">True</span></div><div class="line">            <span class="comment"># 检查剩余长度，否则越界</span></div><div class="line">            <span class="keyword">if</span> len(haystack)-index&lt;len(needle):<span class="keyword">return</span> <span class="number">-1</span></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(needle)):</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> needle[i] == haystack[index+i]:</div><div class="line">                    has = <span class="keyword">False</span></div><div class="line">        <span class="keyword">if</span> has: <span class="keyword">return</span> index</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<ul>
<li>使用切片来判断字符串是否相等，循环条件需要判断长度：38.69%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">strStr</span><span class="params">(self, haystack, needle)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type haystack: str</div><div class="line">    :type needle: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(haystack) - len(needle)+<span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> haystack[i:i+len(needle)] == needle:</div><div class="line">            <span class="keyword">return</span> i</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<h3 id="Valid-Sudoku-36"><a href="#Valid-Sudoku-36" class="headerlink" title="Valid Sudoku (#36)"></a>Valid Sudoku (#36)</h3><p>Determine if a Sudoku is valid, according to: <a href="http://sudoku.com.au/TheRules.aspx" target="_blank" rel="external">Sudoku Puzzles - The Rules</a>.<br>The Sudoku board could be partially filled, where empty cells are filled with the character <code>&#39;.&#39;</code>.</p>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20170111/100632671.png" alt="A partially filled sudoku which is valid." title="A partially filled sudoku which is valid. "></p>
<blockquote>
<p><strong>Note</strong><br>A valid Sudoku board (partially filled) is not necessarily solvable. Only the filled cells need to be validated.</p>
</blockquote>
<ul>
<li>分三种情况检验是否合法（利用一个函数），行、列、以及九宫格内，1-9 每个数字最多只能出现一次：21.52%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidEachNine</span><span class="params">(self, eachList)</span>:</span></div><div class="line">        before = list(filter(<span class="keyword">lambda</span> x:x!=<span class="string">'.'</span>,eachList))</div><div class="line">        after = set(before)</div><div class="line">        <span class="keyword">if</span> len(before) == len(after):</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type board: List[List[str]]</div><div class="line">        :rtype: bool</div><div class="line">        """</div><div class="line">        <span class="comment"># 检查行</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(board)):</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.isValidEachNine(board[i]):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span>    </div><div class="line">        <span class="comment"># 检查列</span></div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">9</span>):</div><div class="line">            l = []</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(board)):</div><div class="line">                l.append(board[i][index])</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.isValidEachNine(l):</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span>    </div><div class="line">        <span class="comment"># 检查九宫格</span></div><div class="line">        <span class="keyword">for</span> rowiter <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>):</div><div class="line">            row = rowiter</div><div class="line">            <span class="keyword">for</span> coliter <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">9</span>,<span class="number">3</span>):</div><div class="line">                col = coliter</div><div class="line">                l = []</div><div class="line">                <span class="keyword">for</span> rownum <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">                    <span class="keyword">for</span> colnum <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">                        l.append(board[row+rownum][col+colnum])</div><div class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.isValidEachNine(l):</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">False</span>        </div><div class="line">        <span class="comment"># 都满足</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>利用set去除相同元组来检测，<code>(c, i)</code>记录每个数字及其行号，<code>(j, c)</code>用来记录每个数字及其列号，<code>(i//3, j//3, c)</code>用来记录每个数字所属九宫格的行列号，<code>(c, i)</code>和<code>(j, c)</code>元组之所以顺序相反，是为了区分行和列，因为<code>c</code>是字符，<code>i</code>和<code>j</code>是整数：67.23%</li>
</ul>
<p><em>MARK：元组以及生成器的使用</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidSudoku</span><span class="params">(self, board)</span>:</span></div><div class="line">    seen = sum(([(c, i), (j, c), (i//<span class="number">3</span>, j//<span class="number">3</span>, c)]</div><div class="line">                <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(board)</div><div class="line">                <span class="keyword">for</span> j, c <span class="keyword">in</span> enumerate(row)</div><div class="line">                <span class="keyword">if</span> c != <span class="string">'.'</span>), [])</div><div class="line">    <span class="keyword">return</span> len(seen) == len(set(seen))</div></pre></td></tr></table></figure></p>
<h3 id="Count-and-Say-38"><a href="#Count-and-Say-38" class="headerlink" title="Count and Say (#38)"></a>Count and Say (#38)</h3><p>The count-and-say sequence is the sequence of integers beginning as follows: <code>1, 11, 21, 1211, 111221, ...</code><br><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one 2, then one 1&quot;</code> or <code>1211</code>.<br>Given an integer <em>n</em>, generate the <em>nth</em> sequence.</p>
<blockquote>
<p><strong>NOTE</strong><br>The sequence of integers will be represented as a string.</p>
</blockquote>
<ul>
<li>首先处理特殊情况，对于一般情况 (n&gt;1) 来说，每次循环上一次得到的字符串，特别处理一下当这个字符串是最后一个字符串的时候，需要添加进新的字符串中：14.21%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n&lt;<span class="number">1</span>: <span class="keyword">return</span> <span class="string">""</span></div><div class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>: <span class="keyword">return</span> <span class="string">"1"</span></div><div class="line"></div><div class="line">    result = <span class="string">"1"</span></div><div class="line">    newresult = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> iternum <span class="keyword">in</span> range(n<span class="number">-1</span>):</div><div class="line">        newresult = <span class="string">""</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        last = result[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(result)):</div><div class="line">            c = result[index]</div><div class="line">            <span class="keyword">if</span> c == last:</div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                newresult += <span class="string">"%d%s"</span>%(count,last)</div><div class="line">                count = <span class="number">1</span></div><div class="line">            last = c</div><div class="line">            <span class="comment"># 最后一个字符串</span></div><div class="line">            <span class="keyword">if</span> index == len(result) - <span class="number">1</span>:</div><div class="line">                newresult += <span class="string">"%d%s"</span>%(count,c)           </div><div class="line">        result = newresult</div><div class="line">    <span class="keyword">return</span> newresult</div></pre></td></tr></table></figure>
<ul>
<li>上面算法的改写，因为最后一个字符的结果总是没有添加，因此可以在循环外面加入，循环内部可以不需要 <code>index</code> 来判断是否是最后一个字符：47.21%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">countAndSay</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    s = <span class="string">'1'</span></div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n<span class="number">-1</span>):</div><div class="line">        let, temp, count = s[<span class="number">0</span>], <span class="string">''</span>, <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> s:</div><div class="line">            <span class="keyword">if</span> let == l:</div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                temp += str(count)+let</div><div class="line">                let = l</div><div class="line">                count = <span class="number">1</span></div><div class="line">        temp += str(count)+let</div><div class="line">        s = temp</div><div class="line">    <span class="keyword">return</span> s</div></pre></td></tr></table></figure>
<h3 id="Length-of-Last-Word-58"><a href="#Length-of-Last-Word-58" class="headerlink" title="Length of Last Word (#58)"></a>Length of Last Word (#58)</h3><p>Given a string s consists of upper/lower-case alphabets and empty space characters <code>&#39; &#39;</code>, return the length of last word in the string.<br>If the last word does not exist, return 0.</p>
<blockquote>
<p><strong>NOTE</strong><br>A word is defined as a character sequence consists of non-space characters only.</p>
</blockquote>
<p>For example, Given s = <code>&quot;Hello World&quot;</code>, return <code>5</code>.</p>
<ul>
<li>以 空格 为分隔符进行切割，去除切割后的最后一个元素，注意可能是空的情况，如果是空，则依次向前取一个：30.29%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> s==<span class="string">""</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    l = s.split(<span class="string">" "</span>)</div><div class="line">    <span class="keyword">if</span> len(l) == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(len(l)):</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> l[<span class="number">-1</span>-index] == <span class="string">""</span>:</div><div class="line">                <span class="keyword">return</span> len(l[<span class="number">-1</span>-index])</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<ul>
<li>一行代码，不具有参考性，利用了Python中字符串的一些方法：43.73%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> len(s.rstrip(<span class="string">' '</span>).split(<span class="string">' '</span>)[<span class="number">-1</span>])</div></pre></td></tr></table></figure>
<ul>
<li>不使用内置的方法解，利用双指针，<code>slow</code> 指向从后往前第一个非空格，<code>fast</code> 指向从 <code>slow</code> 往前第一个空格，两者之差就是长度：62.59%</li>
</ul>
<p><em>MARK：双指针应用</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">lengthOfLastWord</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    ls = len(s)</div><div class="line">    <span class="comment"># slow and fast pointers</span></div><div class="line">    slow = <span class="number">-1</span></div><div class="line">    <span class="comment"># iterate over trailing spaces</span></div><div class="line">    <span class="keyword">while</span> slow &gt;= -ls <span class="keyword">and</span> s[slow] == <span class="string">' '</span>:</div><div class="line">        slow-=<span class="number">1</span></div><div class="line">    fast = slow</div><div class="line">    <span class="comment"># iterate over last word</span></div><div class="line">    <span class="keyword">while</span> fast &gt;= -ls <span class="keyword">and</span> s[fast] != <span class="string">' '</span>:</div><div class="line">        fast-=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> slow - fast</div></pre></td></tr></table></figure></p>
<h3 id="Plus-One-66"><a href="#Plus-One-66" class="headerlink" title="Plus One (#66)"></a>Plus One (#66)</h3><p>Given a non-negative integer represented as a non-empty array of digits, plus one to the integer.<br>You may assume the integer do not contain any leading zero, except the number 0 itself.<br>The digits are stored such that the most significant digit is at the head of the list.</p>
<blockquote>
<p>题意：<br>题目要求是给定一个装有int类型元素的数组，对这个数组加1，然后返回加1的结果。<br>例如，给定<code>[3]</code>，输出<code>[4]</code>；给定<code>[9]</code>，输出<code>[1,0]</code>；给定<code>[9,9]</code>，输出<code>[1,0,0]</code>。</p>
</blockquote>
<ul>
<li>先将 <code>list</code> 变成 <code>int</code> 类型的数字，然后以 <code>int</code> 为基础进行 +1 操作，然后将 <code>int</code> 在转化为 <code>list</code>，且其中每个元素也是 <code>int</code>：64.68%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type digits: List[int]</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    int_val = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(digits)):</div><div class="line">        int_val = <span class="number">10</span>*int_val + digits[i]</div><div class="line">    new_val = int_val + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> list(map(int, str(new_val)))</div><div class="line">    <span class="comment"># 最后一句亦可以改写成</span></div><div class="line">    <span class="keyword">return</span> [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> str(new_val)]</div></pre></td></tr></table></figure>
<ul>
<li>不将 <code>list</code> 转为 <code>int</code>，直接对 <code>list</code> 进行操作，特殊判断末位为9，考虑需要进位（可能不止一位）：47.29%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">plusOne</span><span class="params">(self, digits)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type digits: List[int]</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(digits)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">        digits[i] = digits[i] + <span class="number">1</span> <span class="keyword">if</span> digits[i] &lt; <span class="number">9</span> <span class="keyword">else</span> <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> digits[i]: </div><div class="line">            <span class="keyword">return</span> digits</div><div class="line">    digits.insert(<span class="number">0</span>, <span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> digits</div></pre></td></tr></table></figure>
<h3 id="Add-Binary-67"><a href="#Add-Binary-67" class="headerlink" title="Add Binary (#67)"></a>Add Binary (#67)</h3><p>Given two binary strings, return their sum (also a binary string).<br>For example,<br>a = <code>&quot;11&quot;</code><br>b = <code>&quot;1&quot;</code><br>Return <code>&quot;100&quot;</code>.</p>
<ul>
<li>两个字符串从最后一位开始相加，当两个字符串长度不同时，将剩余长度的字符串与进位标志位相加，然后不断递归调用：36.56%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type a: str</div><div class="line">    :type b: str</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a: <span class="keyword">return</span> b</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> b: <span class="keyword">return</span> a</div><div class="line">    lplus = <span class="number">0</span></div><div class="line">    result = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">-1</span>, -min(len(a),len(b))<span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">        <span class="keyword">if</span> a[i] == <span class="string">'1'</span> <span class="keyword">and</span> b[i] == <span class="string">'1'</span>:</div><div class="line">            result = str(lplus) + result</div><div class="line">            lplus = <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> a[i] == <span class="string">'0'</span> <span class="keyword">and</span> b[i] == <span class="string">'0'</span>:</div><div class="line">            result = str(lplus) + result</div><div class="line">            lplus = <span class="number">0</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">if</span> lplus:</div><div class="line">                result = <span class="string">'0'</span> + result</div><div class="line">                lplus = <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result = <span class="string">'1'</span> + result</div><div class="line">                lplus = <span class="number">0</span></div><div class="line">    m = len(a) - len(b)</div><div class="line">    <span class="keyword">if</span> m &lt; <span class="number">0</span>:</div><div class="line">        left = b[:-m]</div><div class="line">    <span class="keyword">elif</span> m &gt; <span class="number">0</span>:</div><div class="line">        left = a[:m]</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">if</span> lplus:</div><div class="line">            <span class="keyword">return</span> str(lplus) + result</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">return</span> self.addBinary(left,str(lplus)) + result</div></pre></td></tr></table></figure>
<ul>
<li>直接使用递归，分三种情况考虑，但递归效率较低：22.13%</li>
</ul>
<p><em>MARK：递归</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(a)==<span class="number">0</span>: <span class="keyword">return</span> b</div><div class="line">    <span class="keyword">if</span> len(b)==<span class="number">0</span>: <span class="keyword">return</span> a</div><div class="line">    <span class="keyword">if</span> a[<span class="number">-1</span>] == <span class="string">'1'</span> <span class="keyword">and</span> b[<span class="number">-1</span>] == <span class="string">'1'</span>:</div><div class="line">        <span class="keyword">return</span> self.addBinary(self.addBinary(a[<span class="number">0</span>:<span class="number">-1</span>],b[<span class="number">0</span>:<span class="number">-1</span>]),<span class="string">'1'</span>)+<span class="string">'0'</span></div><div class="line">    <span class="keyword">if</span> a[<span class="number">-1</span>] == <span class="string">'0'</span> <span class="keyword">and</span> b[<span class="number">-1</span>] == <span class="string">'0'</span>:</div><div class="line">        <span class="keyword">return</span> self.addBinary(a[<span class="number">0</span>:<span class="number">-1</span>],b[<span class="number">0</span>:<span class="number">-1</span>])+<span class="string">'0'</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> self.addBinary(a[<span class="number">0</span>:<span class="number">-1</span>],b[<span class="number">0</span>:<span class="number">-1</span>])+<span class="string">'1'</span></div></pre></td></tr></table></figure></p>
<h3 id="Climbing-Stairs-70"><a href="#Climbing-Stairs-70" class="headerlink" title="Climbing Stairs (#70)"></a>Climbing Stairs (#70)</h3><p>You are climbing a stair case. It takes n steps to reach to the top.<br>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p>
<blockquote>
<p><strong>NOTE</strong><br>Given n will be a positive integer.</p>
</blockquote>
<ul>
<li>使用递归的方法，每次爬楼梯的最后一步都可以选择1步或2步，如果选择1步，那么为 n-1 层的方法数；如果选择2步，那么为 n-2 层的方法数，两者相加就是总的方法数：无法通过测试，<strong>效率太低</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n&lt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">elif</span> n==<span class="number">2</span>: <span class="keyword">return</span> <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> self.climbStairs(n<span class="number">-2</span>)+self.climbStairs(n<span class="number">-1</span>)</div></pre></td></tr></table></figure>
<ul>
<li>将前面的方法改写成使用循环：53.54%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> n&lt;=<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">elif</span> n==<span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    <span class="keyword">elif</span> n==<span class="number">2</span>: <span class="keyword">return</span> <span class="number">2</span></div><div class="line">    inall = <span class="number">0</span></div><div class="line">    onestepway = <span class="number">2</span></div><div class="line">    twostepway = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> numiter <span class="keyword">in</span> range(n<span class="number">-2</span>):</div><div class="line">        inall = onestepway + twostepway</div><div class="line">        twostepway = onestepway</div><div class="line">        onestepway = inall</div><div class="line">    <span class="keyword">return</span> inall</div></pre></td></tr></table></figure>
<ul>
<li>其实问题的解是一个 <code>斐波那契(fibonacci)数列</code> 求解问题，因为每一步的值等于前一个值加上前前个的值：66.03%</li>
</ul>
<p><em>MARK：斐波那契数列 fibonacci</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">climbStairs</span><span class="params">(self, n)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type n: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    a = b = <span class="number">1</span></div><div class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</div><div class="line">        a, b = b, a + b</div><div class="line">    <span class="keyword">return</span> a</div></pre></td></tr></table></figure></p>
<p>未完，接<a href="http://hijacking.cn/2017/01/21/Leetcode-Python-Solution-Part3/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2017/01/11/Leetcode-Python-Solution-Part2/">http://hijacking.cn/2017/01/11/Leetcode-Python-Solution-Part2/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接&lt;a href=&quot;http://hijacking.cn/2017/01/01/Leetcode-Python-Solution-Part1/&quot;&gt;上篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Part 2 如期而至，其中有好好几道&lt;strong&gt;链表&lt;/strong&gt;的题（用双指针有时候会很方便），涉及到算法&lt;strong&gt;效率&lt;/strong&gt;的问题（用迭代虽然方便，但是对于计算来说效率是很低)，以及分析后变为&lt;strong&gt;斐波那契&lt;/strong&gt;数列求解的问题。题目变得越来越有趣，希望自己可以坚持下去。&lt;/p&gt;
&lt;h3 id=&quot;Swap-Nodes-in-Pairs-24&quot;&gt;&lt;a href=&quot;#Swap-Nodes-in-Pairs-24&quot; class=&quot;headerlink&quot; title=&quot;Swap Nodes in Pairs (#24)&quot;&gt;&lt;/a&gt;Swap Nodes in Pairs (#24)&lt;/h3&gt;&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;br&gt;For example, Given &lt;code&gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4&lt;/code&gt;, you should return the list as &lt;code&gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;3&lt;/code&gt;.&lt;br&gt;Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://hijacking.cn/tags/Leetcode/"/>
    
      <category term="Python" scheme="http://hijacking.cn/tags/Python/"/>
    
      <category term="算法" scheme="http://hijacking.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 题解 in Python (1)</title>
    <link href="http://hijacking.cn/2017/01/01/Leetcode-Python-Solution-Part1/"/>
    <id>http://hijacking.cn/2017/01/01/Leetcode-Python-Solution-Part1/</id>
    <published>2017-01-01T10:07:47.000Z</published>
    <updated>2017-01-11T02:09:11.445Z</updated>
    
    <content type="html"><![CDATA[<p>2017年了，给自己 <del>订个目标</del> 开个坑吧，一天一条 Leetcode 的<a href="https://leetcode.com/problemset/algorithms/" target="_blank" rel="external">算法题</a>，把解题过程中自己的方法和大神的一些思路做个记录，希望能有所提高。<br>先从 <strong>Easy</strong> 开始，十条一发，欢迎督促。如果有更好的解题思路，欢迎一起<a href="mailto:me@jiaweilu.com?subject=【Leetcode】" target="_blank" rel="external">交流</a>。</p>
<blockquote>
<p>思路后面的百分数代表 Leetcode 提供的算法效率击败的人数百分比，这个数值摇摆不定且浮动较大，仅供参考。算法效率优劣参考时间和空间复杂度，本文并不涉及。</p>
</blockquote>
<h3 id="Two-Sum-1"><a href="#Two-Sum-1" class="headerlink" title="Two Sum (#1)"></a>Two Sum (#1)</h3><p>Given an array of integers, return indices of the two numbers such that they add up to a specific target.<br>You may assume that each input would have exactly one solution.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Given nums = [2, 7, 11, 15], target = 9,</div><div class="line"></div><div class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</div><div class="line">return [0, 1].</div></pre></td></tr></table></figure>
<p>The return format had been changed to zero-based indices.</p>
<a id="more"></a>
<ul>
<li>通过循环：41.25%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type target: int</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">        j = i</div><div class="line">        <span class="keyword">while</span> j&lt; len(nums)<span class="number">-1</span>:</div><div class="line">            j = j+<span class="number">1</span></div><div class="line">            <span class="keyword">if</span> nums[i]+nums[j] == target:</div><div class="line">                <span class="keyword">return</span> [i,j]</div></pre></td></tr></table></figure>
<ul>
<li>通过list：43.32%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type target: int</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">        j = target-nums[i]</div><div class="line">        <span class="keyword">if</span> j <span class="keyword">in</span> nums:</div><div class="line">            index = nums.index(j)</div><div class="line">            <span class="keyword">if</span> i != index:</div><div class="line">                <span class="keyword">return</span> [i, nums.index(j)]</div></pre></td></tr></table></figure>
<ul>
<li>通过dict：43.38%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type nums: List[int]</div><div class="line">    :type target: int</div><div class="line">    :rtype: List[int]</div><div class="line">    """</div><div class="line">    dict = &#123;&#125;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</div><div class="line">        rest = target - nums[i]</div><div class="line">        <span class="keyword">if</span> rest <span class="keyword">in</span> dict:</div><div class="line">            <span class="keyword">return</span> [dict.get(rest),i]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            dict[nums[i]] = i</div></pre></td></tr></table></figure>
<h3 id="ZigZag-Conversion-6"><a href="#ZigZag-Conversion-6" class="headerlink" title="ZigZag Conversion (#6)"></a>ZigZag Conversion (#6)</h3><p>The string “<code>PAYPALISHIRING</code>“ is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">P   A   H   N</div><div class="line">A P L S I I G</div><div class="line">Y   I   R</div></pre></td></tr></table></figure></p>
<p>And then read line by line: “<code>PAHNAPLSIIGYIR</code>“。</p>
<ul>
<li>寻找每行下标规律，使用一个list按行序读入对应文字，最后统一输出：30.49%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :type numRows: int</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    lists = list(s)</div><div class="line">    newl = []</div><div class="line">    num = len(s)</div><div class="line">    <span class="keyword">if</span> num==<span class="number">0</span> <span class="keyword">or</span> numRows==<span class="number">1</span>:</div><div class="line">        <span class="keyword">return</span> s</div><div class="line">    repeat = (numRows<span class="number">-1</span>) * <span class="number">2</span></div><div class="line">    numrepeat = (num+repeat<span class="number">-1</span>) // repeat</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> range(numRows):</div><div class="line">        <span class="keyword">if</span> row == <span class="number">0</span>:</div><div class="line">            numCols = numrepeat</div><div class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(numCols):</div><div class="line">                newl.append(lists[col*repeat])</div><div class="line">        <span class="keyword">elif</span> row == numRows<span class="number">-1</span>:</div><div class="line">            numCols = numrepeat</div><div class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> range(numCols):</div><div class="line">                index = row + col*repeat</div><div class="line">                <span class="keyword">if</span> (index &lt; num):</div><div class="line">                    newl.append(lists[index])</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> range(numrepeat):</div><div class="line">                first = row + n * repeat</div><div class="line">                second = (<span class="number">2</span>*n+<span class="number">1</span>)*repeat - first</div><div class="line">                <span class="keyword">if</span> (first &lt; num):</div><div class="line">                    newl.append(lists[first])</div><div class="line">                    <span class="keyword">if</span> (second &lt; num):</div><div class="line">                        newl.append(lists[second])</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(newl)</div></pre></td></tr></table></figure>
<ul>
<li>每行建立一个字符串，按顺序读取，然后将其放到对应行的字符串中，最后统一输出：93.99%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s, numRows)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :type numRows: int</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> numRows == <span class="number">1</span> <span class="keyword">or</span> numRows &gt;= len(s):</div><div class="line">        <span class="keyword">return</span> s</div><div class="line"></div><div class="line">    L = [<span class="string">''</span>] * numRows</div><div class="line">    index, step = <span class="number">0</span>, <span class="number">1</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> s:</div><div class="line">        L[index] += x</div><div class="line">        <span class="keyword">if</span> index == <span class="number">0</span>:</div><div class="line">            step = <span class="number">1</span></div><div class="line">        <span class="keyword">elif</span> index == numRows <span class="number">-1</span>:</div><div class="line">            step = <span class="number">-1</span></div><div class="line">        index += step</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(L)</div></pre></td></tr></table></figure>
<h3 id="Reverse-Integer-7"><a href="#Reverse-Integer-7" class="headerlink" title="Reverse Integer (#7)"></a>Reverse Integer (#7)</h3><p>Reverse digits of an integer.<br>Example1: x = 123, return 321<br>Example2: x = -123, return -321</p>
<blockquote>
<p><strong>NOTE</strong><br>If the integer’s last digit is 0, what should the output be? ie, cases such as 10, 100.<br>Did you notice that the reversed integer might overflow? Assume the input is a 32-bit integer, then the reverse of 1000000003 overflows. How should you handle such cases?<br>For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</p>
</blockquote>
<ul>
<li>将int转换成list，然后使用切片方法进行倒排，排除符号，然后变换成int类型，判断是否溢出，最后输出：63.11%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type x: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> x&gt;<span class="number">0</span>:</div><div class="line">        result = int(<span class="string">''</span>.join(list(str(x))[::<span class="number">-1</span>]))</div><div class="line">        <span class="keyword">if</span> result&lt; <span class="number">2</span>**<span class="number">31</span>:</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">elif</span> x&lt;<span class="number">0</span>:</div><div class="line">        result = -int(<span class="string">''</span>.join(list(str(x))[:<span class="number">0</span>:<span class="number">-1</span>]))</div><div class="line">        <span class="keyword">if</span> -result&lt; <span class="number">2</span>**<span class="number">31</span>:</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<ul>
<li>利用算法输出一个整数的反序：69.19%</li>
</ul>
<p><em>MARK：求一个整数的反序数</em><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type x: int</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> abs(x) &gt;= <span class="number">2147483647</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">    result = <span class="number">0</span></div><div class="line">    pos_x = abs(x)</div><div class="line">    <span class="keyword">while</span> pos_x:</div><div class="line">        result = result * <span class="number">10</span> + pos_x % <span class="number">10</span></div><div class="line">        pos_x //= <span class="number">10</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> result &gt;= <span class="number">2147483647</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line"></div><div class="line">    <span class="keyword">return</span> result <span class="keyword">if</span> x &gt;= <span class="number">0</span> <span class="keyword">else</span> result * (<span class="number">-1</span>)</div></pre></td></tr></table></figure></p>
<h3 id="String-to-Integer-8"><a href="#String-to-Integer-8" class="headerlink" title="String to Integer (#8)"></a>String to Integer (#8)</h3><p>Implement atoi to convert a string to an integer.</p>
<blockquote>
<p><strong>NOTE</strong><br>The function first discards as many whitespace characters as necessary until the first non-whitespace character is found. Then, starting from this character, takes an optional initial plus or minus sign followed by as many numerical digits as possible, and interprets them as a numerical value.<br>The string can contain additional characters after those that form the integral number, which are ignored and have no effect on the behavior of this function.<br>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such sequence exists because either str is empty or it contains only whitespace characters, no conversion is performed.<br>If no valid conversion could be performed, a zero value is returned. If the correct value is out of the range of representable values, INT_MAX (2147483647) or INT_MIN (-2147483648) is returned.</p>
</blockquote>
<ul>
<li>先对字符串处理，然后将字符串转换成整型，特别注意对于对于正数、负数以及非数字的情况：19.07%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">myAtoi</span><span class="params">(self, mystr)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type str: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">	nstr = mystr.strip()</div><div class="line">	flag = <span class="number">1</span></div><div class="line">	result = <span class="number">0</span></div><div class="line">	hasFlag = <span class="keyword">False</span></div><div class="line">	isFirst = <span class="keyword">True</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(result)</span>:</span></div><div class="line">	    <span class="keyword">if</span> result &gt; <span class="number">2</span>**<span class="number">31</span> <span class="number">-1</span>:</div><div class="line">	        <span class="keyword">return</span> <span class="number">2</span>**<span class="number">31</span> <span class="number">-1</span></div><div class="line">	    <span class="keyword">elif</span> result &lt; <span class="number">-2</span>**<span class="number">31</span>:</div><div class="line">	        <span class="keyword">return</span> <span class="number">-2</span>**<span class="number">31</span></div><div class="line">	    <span class="keyword">else</span>:</div><div class="line">	        <span class="keyword">return</span> result</div><div class="line">	<span class="keyword">for</span> s <span class="keyword">in</span> nstr:</div><div class="line">		<span class="keyword">if</span> s <span class="keyword">in</span> [str(t) <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">10</span>)]:</div><div class="line">			result = result * <span class="number">10</span> + int(s)</div><div class="line">			isFirst = <span class="keyword">False</span></div><div class="line">		<span class="keyword">elif</span> s == <span class="string">'-'</span> <span class="keyword">and</span> isFirst:</div><div class="line">			<span class="keyword">if</span> hasFlag:</div><div class="line">				<span class="keyword">return</span> <span class="number">0</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				flag = <span class="number">-1</span></div><div class="line">				hasFlag = <span class="keyword">True</span></div><div class="line">		<span class="keyword">elif</span> s == <span class="string">'+'</span> <span class="keyword">and</span> isFirst:</div><div class="line">			<span class="keyword">if</span> hasFlag:</div><div class="line">				<span class="keyword">return</span> <span class="number">0</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				flag = <span class="number">1</span></div><div class="line">				hasFlag = <span class="keyword">True</span></div><div class="line">		<span class="keyword">else</span>:</div><div class="line">			<span class="keyword">return</span> check(result * flag)</div><div class="line">	result = result * flag</div><div class="line">	<span class="keyword">return</span> check(result)</div></pre></td></tr></table></figure>
<ul>
<li>利用<em>正则表达式</em>筛选数字：55.36%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">atoi</span><span class="params">(self, str)</span>:</span></div><div class="line">    str = str.strip()</div><div class="line">    str = re.findall(<span class="string">'(^[\+\-0]*\d+)\D*'</span>, str)</div><div class="line"></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        result = int(<span class="string">''</span>.join(str))</div><div class="line">        MAX_INT = <span class="number">2147483647</span></div><div class="line">        MIN_INT = <span class="number">-2147483648</span></div><div class="line">        <span class="keyword">if</span> result &gt; MAX_INT &gt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> MAX_INT</div><div class="line">        <span class="keyword">elif</span> result &lt; MIN_INT &lt; <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> MIN_INT</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<h3 id="Palindrome-Number-9"><a href="#Palindrome-Number-9" class="headerlink" title="Palindrome Number (#9)"></a>Palindrome Number (#9)</h3><p>Determine whether an integer is a palindrome. Do this without extra space.</p>
<blockquote>
<p><strong>NOTE</strong><br>Could negative integers be palindromes? (ie, -1)<br>If you are thinking of converting the integer to string, note the restriction of using extra space.<br>You could also try reversing an integer. However, if you have solved the problem “Reverse Integer”, you know that the reversed integer might overflow. How would you handle such case?</p>
</blockquote>
<ul>
<li>依次验证首尾数字是否相同来判断，负数均不是：56.29%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type x: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>: <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    n = <span class="number">0</span></div><div class="line">    r = x</div><div class="line">    <span class="keyword">while</span> r &gt; <span class="number">0</span>:</div><div class="line">        n += <span class="number">1</span></div><div class="line">        r = x // <span class="number">10</span>**n</div><div class="line">    <span class="keyword">while</span> n &gt; <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> x // <span class="number">10</span>**(n<span class="number">-1</span>) != x % <span class="number">10</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        x = (x%<span class="number">10</span>**(n<span class="number">-1</span>))//<span class="number">10</span></div><div class="line">        n -= <span class="number">2</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>先考虑明显不可能的情况，然后将输入的整数拆成前半部分和后半部分，对于奇数位和偶数位分别考虑： 88.84%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type x: int</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x!=<span class="number">0</span> <span class="keyword">and</span> x%<span class="number">10</span> ==<span class="number">0</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    rev = <span class="number">0</span></div><div class="line">    <span class="keyword">while</span> x&gt;rev:</div><div class="line">        rev = rev*<span class="number">10</span> + x%<span class="number">10</span></div><div class="line">        x = x//<span class="number">10</span></div><div class="line">    <span class="keyword">return</span> x==rev <span class="keyword">or</span> x==rev//<span class="number">10</span></div></pre></td></tr></table></figure>
<h3 id="Roman-to-Integer-13"><a href="#Roman-to-Integer-13" class="headerlink" title="Roman to Integer (#13)"></a>Roman to Integer (#13)</h3><p>Given a roman numeral, convert it to an integer.<br>Input is guaranteed to be within the range from 1 to 3999.</p>
<ul>
<li>罗马数字中 Ⅰ（1）、Ⅴ（5）、Ⅹ（10）、Ⅼ（50）、Ⅽ（100）、Ⅾ（500）和Ⅿ（1000），从大（M）到小（I）开始寻找，然后在该数字左边的减去、右边的加上：5.35%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">restValue</span><span class="params">(subs,indexStr,index)</span>:</span></div><div class="line">    indexDict = &#123;<span class="string">'M'</span>:<span class="number">1000</span>,<span class="string">'D'</span>:<span class="number">500</span>,<span class="string">'C'</span>:<span class="number">100</span>,<span class="string">'L'</span>:<span class="number">50</span>,<span class="string">'X'</span>:<span class="number">10</span>,<span class="string">'V'</span>:<span class="number">5</span>,<span class="string">'I'</span>:<span class="number">1</span>&#125;</div><div class="line">    indexValue = indexDict[indexStr]</div><div class="line">    left = subs[:index]</div><div class="line">    leftValue = compute(left) <span class="keyword">if</span> left <span class="keyword">else</span> <span class="number">0</span></div><div class="line">    right = subs[index+<span class="number">1</span>:]</div><div class="line">    rightValue = compute(right) <span class="keyword">if</span> right <span class="keyword">else</span> <span class="number">0</span></div><div class="line">    <span class="keyword">return</span> indexValue+rightValue-leftValue</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">(subs)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> subs:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    indexM = subs.find(<span class="string">"M"</span>)</div><div class="line">    indexD = subs.find(<span class="string">"D"</span>)</div><div class="line">    indexC = subs.find(<span class="string">"C"</span>)</div><div class="line">    indexL = subs.find(<span class="string">"L"</span>)</div><div class="line">    indexX = subs.find(<span class="string">"X"</span>)</div><div class="line">    indexV = subs.find(<span class="string">"V"</span>)</div><div class="line">    indexI = subs.find(<span class="string">"I"</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> indexM == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">return</span> restValue(subs,<span class="string">'M'</span>,indexM)</div><div class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> indexD == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">return</span> restValue(subs,<span class="string">'D'</span>,indexD)</div><div class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> indexC == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">return</span> restValue(subs,<span class="string">'C'</span>,indexC)</div><div class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> indexL == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">return</span> restValue(subs,<span class="string">'L'</span>,indexL)</div><div class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> indexX == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">return</span> restValue(subs,<span class="string">'X'</span>,indexX)</div><div class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> indexV == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">return</span> restValue(subs,<span class="string">'V'</span>,indexV)</div><div class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> indexI == <span class="number">-1</span>:</div><div class="line">        <span class="keyword">return</span> restValue(subs,<span class="string">'I'</span>,indexI)</div><div class="line">        </div><div class="line"><span class="keyword">return</span> compute(s)</div></pre></td></tr></table></figure>
<ul>
<li>观察罗马数字的构成，发现：最右一位总是加上的，除此之外，如果某一位比其右边一位表示的数小，那么就减去，否则加上：58.32%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: int</div><div class="line">    """</div><div class="line">    roman = &#123;<span class="string">'M'</span>: <span class="number">1000</span>,<span class="string">'D'</span>: <span class="number">500</span> ,<span class="string">'C'</span>: <span class="number">100</span>,<span class="string">'L'</span>: <span class="number">50</span>,<span class="string">'X'</span>: <span class="number">10</span>,<span class="string">'V'</span>: <span class="number">5</span>,<span class="string">'I'</span>: <span class="number">1</span>&#125;</div><div class="line">    z = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(s) - <span class="number">1</span>):</div><div class="line">        <span class="keyword">if</span> roman[s[i]] &lt; roman[s[i+<span class="number">1</span>]]:</div><div class="line">            z -= roman[s[i]]</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            z += roman[s[i]]</div><div class="line">    <span class="keyword">return</span> z + roman[s[<span class="number">-1</span>]]</div></pre></td></tr></table></figure>
<h3 id="Longest-Common-Prefix-14"><a href="#Longest-Common-Prefix-14" class="headerlink" title="Longest Common Prefix (#14)"></a>Longest Common Prefix (#14)</h3><p>Write a function to find the longest common prefix string amongst an array of strings.</p>
<ul>
<li>用一个最大相同前缀的index记录，通过循环找到最大的index： 57.73%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type strs: List[str]</div><div class="line">    :rtype: str</div><div class="line">    """</div><div class="line">    <span class="keyword">if</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></div><div class="line">    count = min(list(map(len,strs)))</div><div class="line">    end = <span class="keyword">False</span></div><div class="line">    maxindex = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(count):</div><div class="line">        base = strs[<span class="number">0</span>][i]</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(strs)):</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> strs[j][i] == base:</div><div class="line">                end = <span class="keyword">True</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">if</span> end:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        maxindex +=<span class="number">1</span></div><div class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>][:maxindex]</div></pre></td></tr></table></figure>
<ul>
<li>使用二分法，先查找一半中的前半段，如果是LCP，那么后面的最大index向后一位；如果不是LCP，那么最小index向前一位，直到找到最大LCP： 57.73%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isCommonPrefix</span><span class="params">(self, strs, slen)</span>:</span></div><div class="line">    str1 = strs[<span class="number">0</span>][:slen]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(strs)):</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs[i][:slen] == str1:</div><div class="line">           <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs)</span>:</span></div><div class="line">    <span class="keyword">if</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></div><div class="line">    minLen = min(list(map(len,strs)))</div><div class="line">    low = <span class="number">1</span></div><div class="line">    high = minLen</div><div class="line">    <span class="keyword">while</span> low&lt;=high:</div><div class="line">        middle = (low + high) // <span class="number">2</span></div><div class="line">        <span class="keyword">if</span> self.isCommonPrefix(strs,middle):</div><div class="line">            low = middle +<span class="number">1</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            high = middle <span class="number">-1</span></div><div class="line">    <span class="keyword">return</span> strs[<span class="number">0</span>][:(low+high)//<span class="number">2</span>]</div></pre></td></tr></table></figure>
<h3 id="Remove-Nth-Node-From-End-of-List-19"><a href="#Remove-Nth-Node-From-End-of-List-19" class="headerlink" title="Remove Nth Node From End of List (#19)"></a>Remove Nth Node From End of List (#19)</h3><p>Given a linked list, remove the nth node from the end of list and return its head.<br>For example,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.</div><div class="line"></div><div class="line">After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.</div></pre></td></tr></table></figure></p>
<ul>
<li>因为是找出后n个数并删掉，而每个链表只记录的它下一个指向的数，因此首先要求出列表中总的个数，然后计算要删去的数在正向的第几个：54.06%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type head: ListNode</div><div class="line">        :type n: int</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        p =head</div><div class="line">        num = <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> p.next:</div><div class="line">            p = p.next</div><div class="line">            num +=<span class="number">1</span></div><div class="line">        index = num - n+<span class="number">1</span> <span class="comment">#from 1</span></div><div class="line">        <span class="keyword">if</span> index == <span class="number">1</span>: </div><div class="line">            <span class="keyword">return</span> head.next</div><div class="line">        pp = head</div><div class="line">        i = <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            p = pp</div><div class="line">            pp = pp.next</div><div class="line">            i +=<span class="number">1</span></div><div class="line">            <span class="keyword">if</span> i == index:</div><div class="line">                <span class="keyword">if</span> pp.next:</div><div class="line">                    p.next = pp.next</div><div class="line">                <span class="keyword">else</span>: </div><div class="line">                    p.next = <span class="keyword">None</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">        <span class="keyword">return</span> head</div></pre></td></tr></table></figure>
<ul>
<li>使用两个指针，两个指正中间的距离相聚为传入的n，即倒数第n个要删除的数，然后两个指针同时向前，直到后面的指正到达链表最后，而前面的指向的刚好是要删除的节点的前一个节点：67.78%</li>
</ul>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20170101/183223334.png" alt="算法示意图" title="算法示意图"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeNthFromEnd</span><span class="params">(self, head, n)</span>:</span></div><div class="line">        fast = slow = head</div><div class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(n):</div><div class="line">            fast = fast.next</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> fast:</div><div class="line">            <span class="keyword">return</span> head.next</div><div class="line">        <span class="keyword">while</span> fast.next:</div><div class="line">            fast = fast.next</div><div class="line">            slow = slow.next</div><div class="line">        slow.next = slow.next.next</div><div class="line">        <span class="keyword">return</span> head</div></pre></td></tr></table></figure>
<h3 id="Valid-Parentheses-20"><a href="#Valid-Parentheses-20" class="headerlink" title="Valid Parentheses (#20)"></a>Valid Parentheses (#20)</h3><p>Given a string containing just the characters<code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.<br>The brackets must close in the correct order, <code>&quot;()&quot;</code> and <code>&quot;()[]{}&quot;</code> are all valid but <code>&quot;(]&quot;</code> and <code>&quot;([)]&quot;</code> are not.</p>
<ul>
<li>利用一个list来存放对应应该出现的记号，并且按顺序出现，如果不是按照list中先进后出的顺序出现，那么标记为False：46.62%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    :type s: str</div><div class="line">    :rtype: bool</div><div class="line">    """</div><div class="line">	stack = []</div><div class="line">	l = list(s)</div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(len(l)):</div><div class="line">		<span class="keyword">if</span> l[i] == <span class="string">"("</span>:</div><div class="line">			stack.append(<span class="string">")"</span>)</div><div class="line">		<span class="keyword">elif</span> l[i] == <span class="string">"&#123;"</span>:</div><div class="line">			stack.append(<span class="string">"&#125;"</span>)</div><div class="line">		<span class="keyword">elif</span> l[i] == <span class="string">"["</span>:</div><div class="line">			stack.append(<span class="string">"]"</span>)</div><div class="line">		<span class="keyword">elif</span> l[i] == <span class="string">")"</span>:</div><div class="line">			<span class="keyword">if</span> len(stack) == <span class="number">0</span> <span class="keyword">or</span> stack.pop() != <span class="string">")"</span>:</div><div class="line">				<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">		<span class="keyword">elif</span> l[i] == <span class="string">"&#125;"</span>:</div><div class="line">			<span class="keyword">if</span> len(stack) == <span class="number">0</span> <span class="keyword">or</span> stack.pop() != <span class="string">"&#125;"</span>:</div><div class="line">				<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">		<span class="keyword">elif</span> l[i] == <span class="string">"]"</span>:</div><div class="line">			<span class="keyword">if</span> len(stack) == <span class="number">0</span> <span class="keyword">or</span> stack.pop() != <span class="string">"]"</span>:</div><div class="line">				<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">	<span class="keyword">if</span> <span class="keyword">not</span> len(stack) == <span class="number">0</span>:</div><div class="line">	    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>上面的方法可以写成下面的形式（字典的运用），代码更简洁：24.68%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span><span class="params">(self, s)</span>:</span></div><div class="line">    stack = []</div><div class="line">    dict = &#123;<span class="string">"]"</span>:<span class="string">"["</span>, <span class="string">"&#125;"</span>:<span class="string">"&#123;"</span>, <span class="string">")"</span>:<span class="string">"("</span>&#125;</div><div class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> s:</div><div class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> dict.values():</div><div class="line">            stack.append(char)</div><div class="line">        <span class="keyword">elif</span> char <span class="keyword">in</span> dict.keys():</div><div class="line">            <span class="keyword">if</span> stack == [] <span class="keyword">or</span> dict[char] != stack.pop():</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">return</span> stack == []</div></pre></td></tr></table></figure>
<h3 id="Merge-Two-Sorted-Lists-21"><a href="#Merge-Two-Sorted-Lists-21" class="headerlink" title="Merge Two Sorted Lists (#21)"></a>Merge Two Sorted Lists (#21)</h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>
<ul>
<li>比较两个ListNode的值，哪个大将新的ListNode指向哪个，然后将取过值得ListNode的指针指向后一个，即next，再次比较。考虑有一个没有取完的情况 ：77.19%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Definition for singly-linked list.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x)</span>:</span></div><div class="line">        self.val = x</div><div class="line">        self.next = <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type l1: ListNode</div><div class="line">        :type l2: ListNode</div><div class="line">        :rtype: ListNode</div><div class="line">        """</div><div class="line">        <span class="keyword">if</span> l1 == []: <span class="keyword">return</span> l2</div><div class="line">        <span class="keyword">if</span> l2 == []: <span class="keyword">return</span> l1</div><div class="line">        l = ListNode(<span class="number">0</span>)</div><div class="line">        lptr = l</div><div class="line">        p = ListNode(<span class="number">0</span>)</div><div class="line">        l1_temp = l1</div><div class="line">        l2_temp = l2</div><div class="line">        <span class="keyword">while</span> l1_temp!= <span class="keyword">None</span> <span class="keyword">and</span> l2_temp != <span class="keyword">None</span>:</div><div class="line">            <span class="keyword">if</span> l1_temp.val &lt; l2_temp.val:</div><div class="line">                p = l1_temp</div><div class="line">                l1_temp = l1_temp.next</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                p = l2_temp</div><div class="line">                l2_temp = l2_temp.next</div><div class="line">            lptr.next = p</div><div class="line">            lptr= p</div><div class="line">        <span class="keyword">if</span> l1_temp != <span class="keyword">None</span>: lptr.next = l1_temp</div><div class="line">        <span class="keyword">if</span> l2_temp != <span class="keyword">None</span>: lptr.next = l2_temp</div><div class="line">        <span class="keyword">return</span> l.next</div></pre></td></tr></table></figure>
<ul>
<li>上面一种方法可以简写成： 43.81%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists1</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">    dummy = cur = ListNode(<span class="number">0</span>)</div><div class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</div><div class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</div><div class="line">            cur.next = l1</div><div class="line">            l1 = l1.next</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            cur.next = l2</div><div class="line">            l2 = l2.next</div><div class="line">        cur = cur.next</div><div class="line">    cur.next = l1 <span class="keyword">or</span> l2</div><div class="line">    <span class="keyword">return</span> dummy.next</div></pre></td></tr></table></figure>
<ul>
<li>使用递归调用的方法：50.10%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists2</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">or</span> <span class="keyword">not</span> l2:</div><div class="line">        <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</div><div class="line">    <span class="keyword">if</span> l1.val &lt; l2.val:</div><div class="line">        l1.next = self.mergeTwoLists(l1.next, l2)</div><div class="line">        <span class="keyword">return</span> l1</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        l2.next = self.mergeTwoLists(l1, l2.next)</div><div class="line">        <span class="keyword">return</span> l2</div></pre></td></tr></table></figure>
<ul>
<li>和第一种方法类似，不同的是将两个list连接成一个，然后再一次检查每一个是否是按照从小到大的顺序排列：52.80%</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># in-place, iteratively        </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1, l2)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">None</span> <span class="keyword">in</span> (l1, l2):</div><div class="line">        <span class="keyword">return</span> l1 <span class="keyword">or</span> l2</div><div class="line">    dummy = cur = ListNode(<span class="number">0</span>)</div><div class="line">    dummy.next = l1</div><div class="line">    <span class="keyword">while</span> l1 <span class="keyword">and</span> l2:</div><div class="line">        <span class="keyword">if</span> l1.val &lt; l2.val:</div><div class="line">            l1 = l1.next</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            nxt = cur.next</div><div class="line">            cur.next = l2</div><div class="line">            tmp = l2.next</div><div class="line">            l2.next = nxt</div><div class="line">            l2 = tmp</div><div class="line">        cur = cur.next</div><div class="line">    cur.next = l1 <span class="keyword">or</span> l2</div><div class="line">    <span class="keyword">return</span> dummy.next</div></pre></td></tr></table></figure>
<p>未完，接<a href="http://hijacking.cn/2017/01/11/Leetcode-Python-Solution-Part2/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2017/01/01/Leetcode-Python-Solution-Part1/">http://hijacking.cn/2017/01/01/Leetcode-Python-Solution-Part1/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年了，给自己 &lt;del&gt;订个目标&lt;/del&gt; 开个坑吧，一天一条 Leetcode 的&lt;a href=&quot;https://leetcode.com/problemset/algorithms/&quot;&gt;算法题&lt;/a&gt;，把解题过程中自己的方法和大神的一些思路做个记录，希望能有所提高。&lt;br&gt;先从 &lt;strong&gt;Easy&lt;/strong&gt; 开始，十条一发，欢迎督促。如果有更好的解题思路，欢迎一起&lt;a href=&quot;mailto:me@jiaweilu.com?subject=【Leetcode】&quot;&gt;交流&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;思路后面的百分数代表 Leetcode 提供的算法效率击败的人数百分比，这个数值摇摆不定且浮动较大，仅供参考。算法效率优劣参考时间和空间复杂度，本文并不涉及。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Two-Sum-1&quot;&gt;&lt;a href=&quot;#Two-Sum-1&quot; class=&quot;headerlink&quot; title=&quot;Two Sum (#1)&quot;&gt;&lt;/a&gt;Two Sum (#1)&lt;/h3&gt;&lt;p&gt;Given an array of integers, return indices of the two numbers such that they add up to a specific target.&lt;br&gt;You may assume that each input would have exactly one solution.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Given nums = [2, 7, 11, 15], target = 9,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Because nums[0] + nums[1] = 2 + 7 = 9,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;return [0, 1].&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The return format had been changed to zero-based indices.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Leetcode" scheme="http://hijacking.cn/tags/Leetcode/"/>
    
      <category term="Python" scheme="http://hijacking.cn/tags/Python/"/>
    
      <category term="算法" scheme="http://hijacking.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Coursera - Scala 函数式程序设计原理 - 学习笔记 (2)</title>
    <link href="http://hijacking.cn/2016/12/23/Coursera-FP-in-Scala-Note-Part2/"/>
    <id>http://hijacking.cn/2016/12/23/Coursera-FP-in-Scala-Note-Part2/</id>
    <published>2016-12-23T03:00:01.000Z</published>
    <updated>2016-12-23T14:35:45.903Z</updated>
    
    <content type="html"><![CDATA[<p>此笔记是在学习 Coursera 上 <a href="https://www.coursera.org/learn/progfun1/home" title="课程链接" target="_blank" rel="external"><em>Functional Programming Principles in Scala</em></a> 课程时所整理，方便今后查阅。</p>
<p>接<a href="http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/">上篇</a>。</p>
<h2 id="Types-and-Pattern-Matching"><a href="#Types-and-Pattern-Matching" class="headerlink" title="Types and Pattern Matching"></a>Types and Pattern Matching</h2><h3 id="Objects-Everywhere-无处不在的对象"><a href="#Objects-Everywhere-无处不在的对象" class="headerlink" title="Objects Everywhere 无处不在的对象"></a>Objects Everywhere 无处不在的对象</h3><p>Scala是纯面向对象的语言，因此在Scala中，所有的值都是对象。<br>虽然第一眼看上去，Scala中存在一些不是对象的，如基本类型，函数等，但是基本类型Boolean、Int等都可以自己定义类型，因此它们也是对象。<br>Scala和Java一样，支持<strong>重载overlaod</strong>机制，可以根据方法传入的不同参数选择应该调用哪个具体的方法。</p>
<h3 id="Functions-as-Objects-函数作为对象"><a href="#Functions-as-Objects-函数作为对象" class="headerlink" title="Functions as Objects 函数作为对象"></a>Functions as Objects 函数作为对象</h3><p>在Scala中，函数也被看作是对象，而函数的类型<code>A =&gt; B</code>也只是scala.Function1[A, B]的缩写，且定义如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> scala</div><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Function1</span>[<span class="type">A</span>, <span class="type">B</span>] </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">A</span>): <span class="type">B</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>而Function2接收2个参数，Function3接收3个参数，最多至22个参数。<br>函数值的扩展：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(x: <span class="type">Int</span>) =&gt; x * x</div><div class="line"></div><div class="line"><span class="comment">// 扩展为</span></div><div class="line">&#123; <span class="class"><span class="keyword">class</span> <span class="title">AnonFun</span> <span class="keyword">extends</span> <span class="title">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] </span>&#123;</div><div class="line">		<span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x * x</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">new</span> <span class="type">AnonFun</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 或者，使用匿名函数简写</span></div><div class="line"><span class="keyword">new</span> <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] &#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x * x</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用时，f(a, b)函数调用，其中f是类型的名称，可以扩展成f.apply(a, b)。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> f = (x: <span class="type">Int</span>) =&gt; x * x</div><div class="line">f(<span class="number">7</span>)</div><div class="line"></div><div class="line"><span class="comment">// 写成</span></div><div class="line"><span class="keyword">val</span> f = <span class="keyword">new</span> <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Int</span>] &#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = x * x</div><div class="line">&#125;</div><div class="line">f.apply(<span class="number">7</span>)</div></pre></td></tr></table></figure></p>
<p>注意，方法本身不是一个函数值，例如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(x: <span class="type">Int</span>): <span class="type">Boolean</span> = ...</div></pre></td></tr></table></figure></p>
<p>但是，当方法被用在需要接受一个函数值的地方时，它会自动转化成函数值。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(x: <span class="type">Int</span>) =&gt; f(x)</div><div class="line"></div><div class="line"><span class="comment">// 展开</span></div><div class="line"><span class="keyword">new</span> <span class="type">Function1</span>[<span class="type">Int</span>, <span class="type">Boolean</span>] &#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(x: <span class="type">Int</span>) = f(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Subtyping-and-Generics-子类型化和泛型"><a href="#Subtyping-and-Generics-子类型化和泛型" class="headerlink" title="Subtyping and Generics 子类型化和泛型"></a>Subtyping and Generics 子类型化和泛型</h3><p><strong>类型边界type bound</strong><br>assertAllPos当接收空数组时返回空数组，当接收非空数组时，返回非空数组，可以通过下面的方式表示：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">assertAllPos</span></span>[<span class="type">S</span>&lt;: <span class="type">IntSet</span>](r: <span class="type">S</span>): <span class="type">S</span> = ...</div></pre></td></tr></table></figure></p>
<p><code>&lt;:</code>意味着它是类型参数S的<strong>上界upper bound</strong>，S可以使服从IntSet累的所有类型，也就是说</p>
<ul>
<li><code>S &lt;: T</code> S是T的子类型</li>
<li><code>S &gt;: T</code> S是T的父类型，或者说，T是S的子类型</li>
</ul>
<p><code>&gt;:</code>意味着<strong>下界lower bound</strong>，例如[S&gt;: NonEmpty]中，S可以使NonEmpty, IntSet, AnyRef 或者是Any。<br>可以同时使用上界和下界组成<strong>混合边界mixed bound</strong>，例如[S:&gt; NonEmpty &lt;: IntSet]，会限制S的类型在NonEmpty和IntSet之间。<br><strong>协变量covariance</strong><br>如果NonEmpty:&lt; IntSet，那么List[NonEmpty]&lt;: List[IntSet]成立，但并不是任何时候都是成立的，当满足下面条件时：<br>如果A&lt;: B，那么可以对B做的任何事情都可以对A做。</p>
<blockquote>
<p>Let q(x) be a property provable about objects x of type B. Then q(y) should be provable for objects y of type A where A &lt;: B.</p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> a: <span class="type">Array</span>[<span class="type">NonEmpty</span>] = <span class="type">Array</span>(<span class="keyword">new</span> <span class="type">NonEmpty</span>(<span class="number">1</span>, <span class="type">Empty</span>, <span class="type">Empty</span>))</div><div class="line"><span class="keyword">val</span> b: <span class="type">Array</span>[<span class="type">IntSet</span>] = a</div><div class="line">b(<span class="number">0</span>) = <span class="type">Empty</span></div><div class="line"><span class="keyword">val</span> s: <span class="type">NonEmpty</span> = a(<span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">// Scala中编译器会在第2行报错，因为Scala中Array不是协变量</span></div><div class="line"><span class="comment">// 若使用Java语法改写，那么Java编译时不会报错，但是在第3行会有运行时错误，抛出异常</span></div></pre></td></tr></table></figure>
<h3 id="Variance"><a href="#Variance" class="headerlink" title="Variance"></a>Variance</h3><h3 id="Decomposition-分解"><a href="#Decomposition-分解" class="headerlink" title="Decomposition 分解"></a>Decomposition 分解</h3><p><strong>类型检验type test</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isInstanceOf</span></span>[<span class="type">T</span>]: <span class="type">Boolean</span> <span class="comment">// 检验对象的类型是否符合T</span></div></pre></td></tr></table></figure></p>
<p><strong>类型转换type cast</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">asInstanceOf</span></span>[<span class="type">T</span>]: <span class="type">T</span> <span class="comment">// 将对象当做是类型T，如果不是，抛出ClassCastException</span></div></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>(e: <span class="type">Expr</span>): <span class="type">Int</span> = </div><div class="line">	<span class="keyword">if</span> (e.isInstanceOf[<span class="type">Number</span>])</div><div class="line">		e.asInstanceOf[<span class="type">Number</span>].numValue</div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (e.isInstanceOf[<span class="type">Sum</span>])</div><div class="line">		eval(e.asInstanceOf[<span class="type">Sum</span>].leftOp) + eval(e.asInstanceOf[<span class="type">Sum</span>].rightOp)</div><div class="line">	<span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Error</span>(<span class="string">"Unknown expression"</span> + e)</div></pre></td></tr></table></figure></p>
<p>但是类型转换会存在一些未知的问题，因此不建议使用。<br>我们可以通过在类中定义一个eval方法，并且由子类改写来解决这个问题：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = n</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span>(<span class="params">e1: <span class="type">Expr</span>, e2: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = e1.eval + e2.eval</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是，当对表达式进行简化的时候，比如说<code>a\*b+a\*c -&gt; a\*(b+c)</code>时，就不能只在某一个类中增加来进行计算了。</p>
<h3 id="Pattern-Matching-模式匹配"><a href="#Pattern-Matching-模式匹配" class="headerlink" title="Pattern Matching 模式匹配"></a>Pattern Matching 模式匹配</h3><p>使用模式匹配来进行函数式分解，在Scala中使用<strong>样本类case class</strong>来实现，case class的定义和普通类一样，但是以标识符case开头，如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Number</span>(<span class="params">n: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Sum</span>(<span class="params">e1: <span class="type">Expr</span>, e2: <span class="type">Expr</span></span>) <span class="keyword">extends</span> <span class="title">Expr</span></span></div></pre></td></tr></table></figure></p>
<p>并且，它同时隐式地定义了拥有apply方法的<strong>伴随对象companion object</strong>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Number</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(n: <span class="type">Int</span>) = <span class="keyword">new</span> <span class="type">Number</span>(n)</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">Sum</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(e1: <span class="type">Expr</span>, e2: <span class="type">Expr</span>) = <span class="keyword">new</span> <span class="type">Sum</span>(e1, e2)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因此，可以使用Number(1)而不用写new Number(1)来创建。<br><strong>模式匹配pattern matching</strong>是C和Java中switch的一般化，并且使用match关键字：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>(e: <span class="type">Expr</span>): <span class="type">Int</span> = e <span class="keyword">match</span> &#123;</div><div class="line">	<span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</div><div class="line">	<span class="keyword">case</span> <span class="type">Sum</span>(e1, e2) =&gt; eval(e1) + eval(e2)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>规则：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">e <span class="keyword">match</span> &#123;</div><div class="line">	<span class="keyword">case</span> pat1 =&gt; expr1</div><div class="line">	...</div><div class="line">	<span class="keyword">case</span> patn =&gt; exprn</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// e是选择子，被选择来进行模式匹配的</span></div><div class="line"><span class="comment">// pat是模式</span></div><div class="line"><span class="comment">// expr是表达式</span></div><div class="line"><span class="comment">// 当没有模式可以匹配选择子的值的时候，MatchError异常将会抛出</span></div></pre></td></tr></table></figure></p>
<p>模式可以由下面几部分构成：</p>
<ul>
<li>构造器：Number, Sum</li>
<li>变量：n, e1, e2</li>
<li>通配符：_</li>
<li>常量：1, true</li>
</ul>
<p>其中，变量总是以小写字母开头，并且相同的变量名只能在模式中出现一次， 如Sum(x, x)是不合法的。<br>常量的名字是以大写字母开头，除了保留关键字null, true, false。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">eval(<span class="type">Sum</span>(<span class="type">Number</span>(<span class="number">1</span>), <span class="type">Number</span>(<span class="number">2</span>)))</div><div class="line"></div><div class="line">→</div><div class="line"><span class="type">Sum</span>(<span class="type">Number</span>(<span class="number">1</span>), <span class="type">Number</span>(<span class="number">2</span>)) <span class="keyword">match</span> &#123;</div><div class="line">	<span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</div><div class="line">	<span class="keyword">case</span> <span class="type">Sum</span>(e1, e2) =&gt; eval(e1) + eval(e2)</div><div class="line">&#125;</div><div class="line"></div><div class="line">→</div><div class="line">eval(<span class="type">Number</span>(<span class="number">1</span>)) + eval(<span class="type">Number</span>(<span class="number">2</span>))</div><div class="line"></div><div class="line">→</div><div class="line"><span class="type">Number</span>(<span class="number">1</span>) <span class="keyword">match</span> &#123;</div><div class="line">	<span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</div><div class="line">	<span class="keyword">case</span> <span class="type">Sum</span>(e1, e2) =&gt; eval(e1) + eval(e2)</div><div class="line">&#125; + eval(<span class="type">Number</span>(<span class="number">2</span>))</div><div class="line"></div><div class="line">→</div><div class="line"><span class="number">1</span> + eval(<span class="type">Number</span>(<span class="number">2</span>))</div><div class="line"></div><div class="line">→→</div><div class="line"><span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>当然，可以将模式匹配定义为方法：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Expr</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">eval</span></span>: <span class="type">Int</span> = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</div><div class="line">		<span class="keyword">case</span> <span class="type">Number</span>(n) =&gt; n</div><div class="line">		<span class="keyword">case</span> <span class="type">Sum</span>(e1, e2) =&gt; e1.eval +e2.eval</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>和上一节的方法相比，如果以后会更多地新建类，那么建议使用上一节的改进方法，因为新的类只需定义def eval方法，其他的都不需要改动；而如果以后会更多地添加方法，那么应该使用模式匹配，因为只需要在基本类中定义一个模式匹配的方法，就能够匹配所有的情况，不需要在其他类中一一添加。</p>
<h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> fruit = <span class="type">List</span>(<span class="string">"apples"</span>, <span class="string">"oranges"</span>, <span class="string">"pears"</span>) <span class="comment">// List[String]</span></div><div class="line"><span class="keyword">val</span> nums = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// List[Int]</span></div><div class="line"><span class="keyword">val</span> diag3 = <span class="type">List</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)) <span class="comment">// List[List[Int]]</span></div><div class="line"><span class="keyword">val</span> empty = <span class="type">List</span>() <span class="comment">// List[Nothing]</span></div></pre></td></tr></table></figure>
<p>list和array有两个重要的不同点：</p>
<ul>
<li>list是<strong>不可变</strong>的，list总的元素是不可改变的</li>
<li>list是递归的，而array是平的（不可递归）</li>
</ul>
<p>list中的元素必须是同性质的，也就是所有的元素都使相同的类型，因此，类型T元素的list可以写作List[T]。<br>上面list的构造方法属于语法糖，同样可以通过构造器<code>::</code>来构造，<code>x :: xs</code>表示第一个元素是x，接下去的元素为xs。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fruit = <span class="string">"apple"</span> :: (<span class="string">"oranges"</span> :: (<span class="string">"pears"</span> :: <span class="type">Nil</span>))</div><div class="line">nums = <span class="number">1</span> :: (<span class="number">2</span> :: (<span class="number">3</span> :: (<span class="number">4</span> :: <span class="type">Nil</span>)))</div><div class="line">empty = <span class="type">Nil</span></div></pre></td></tr></table></figure></p>
<p>Scala中，以<code>:</code>结尾的操作符都是右结合，例如A :: B :: C看成是A :: (B :: C)，因此可以减少定义中多余的括号。<br>并且，这些操作符调用方法的时候是对操作符右边的操作数进行调用。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> nums = <span class="number">1</span> :: <span class="number">2</span> :: <span class="number">3</span> :: <span class="number">4</span> :: <span class="type">Nil</span></div><div class="line"><span class="type">Nil</span>.::(<span class="number">4</span>).::(<span class="number">3</span>).::(<span class="number">2</span>).::(<span class="number">1</span>)</div></pre></td></tr></table></figure></p>
<p>list模式匹配：</p>
<ul>
<li>Nil：常量Nil</li>
<li>p :: ps：head是p，tail是ps的list</li>
<li>List(p1, …, pn)：相当于p1 :: … :: pn :: Nil</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> :: <span class="number">2</span> :: xs <span class="comment">// 以1，2开始</span></div><div class="line">x :: <span class="type">Nil</span> <span class="comment">// 长度为1</span></div><div class="line"><span class="type">List</span>(x) <span class="comment">// 与x :: Nil一样</span></div><div class="line"><span class="type">List</span>() <span class="comment">// 空list，与Nil一样</span></div><div class="line"><span class="type">List</span>(<span class="number">2</span> :: xs) <span class="comment">// 只包含一个以2开始的list的list</span></div></pre></td></tr></table></figure>
<h2 id="Lists-1"><a href="#Lists-1" class="headerlink" title="Lists"></a>Lists</h2><h3 id="More-Functions-on-Lists-更多List的函数"><a href="#More-Functions-on-Lists-更多List的函数" class="headerlink" title="More Functions on Lists 更多List的函数"></a>More Functions on Lists 更多List的函数</h3><p>list的方法</p>
<ul>
<li>xs.length</li>
<li>xs.last</li>
<li>xs.init：返回包含xs除最后一个元素外剩余所有元素的list，如果为空则抛出异常。</li>
<li>xs take n：返回包含xs前n个元素的list，如果长度小于n那么返回它自己</li>
<li>xs drop n：返回去除n个元素的剩余部分</li>
<li>xs(n)：或者写成xs apply n，返回xs的n（从0开始）位的元素</li>
</ul>
<p>创建新的list</p>
<ul>
<li>xs ++ ys：返回包含xs所有元素，后面跟着ys所有元素的list</li>
<li>xs.reverse：返回倒序的list</li>
<li>xs updated(n, x)：返回和原list相同的list，只将第n位的数改成x</li>
</ul>
<p>寻找元素</p>
<ul>
<li>xs indexOf x：xs中第一个元素与x匹配的序号，如果没有返回-1</li>
<li>xs contains x：与xs indexOf x &gt;= 0相同</li>
</ul>
<h3 id="Pairs-and-Tuples"><a href="#Pairs-and-Tuples" class="headerlink" title="Pairs and Tuples"></a>Pairs and Tuples</h3><p><strong>pair</strong><br>由x、y写成(x, y)组成，如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> pair = (<span class="string">"answer"</span>, <span class="number">42</span>)</div></pre></td></tr></table></figure></p>
<p>pair也可以被用作模式匹配中的模式：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> (label, value) = pair</div></pre></td></tr></table></figure></p>
<p><strong>tuple</strong><br>tuple的类型(T1, …, Tn)是scala.Tuplen[T1, …, Tn]的缩写，tuple表达式(e1, …, en)相当于scala.Tuplen(e1, …, en)，tuple模式(p1, …, pn)相当于scala.Tuplen(p1, …, pn)。<br>可以通过下划线_1, _2来获得tuple中的值，如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> label = pair._1</div><div class="line"><span class="keyword">val</span> value = pair._2</div></pre></td></tr></table></figure></p>
<h3 id="Implicit-Parameters-隐式参数"><a href="#Implicit-Parameters-隐式参数" class="headerlink" title="Implicit Parameters 隐式参数"></a>Implicit Parameters 隐式参数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">msort</span></span>[<span class="type">T</span>](xs: <span class="type">List</span>[<span class="type">T</span>])(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>) = </div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(xs: <span class="type">List</span>[<span class="type">T</span>], ys: <span class="type">List</span>[<span class="type">T</span>]) = </div><div class="line">		... <span class="keyword">if</span> (ord.lt(x, y)) ...</div><div class="line"></div><div class="line">	... merge(msort(fst), msort(snd)) ...</div><div class="line"></div><div class="line"><span class="comment">// call msort can avoid the ordering parameter</span></div><div class="line">msort(nums)</div><div class="line">msort(fruits)</div></pre></td></tr></table></figure>
<p>在参数名前加标识符implicit，可以将该参数声明为隐式参数，这样的参数不需要具体传入，编译器会根据传入变量的类型自动选取。<br>使用隐式参数的规则：<br>编译器会搜索隐式定义，被标记为implicit、类型与T相匹配、在函数调用处可见或者被定义在与T相关的伴随对象中。如果编译器找到了唯一的定义，那么会将实际的参数传递给隐式参数，如果没有或者有多个，那么会报错。</p>
<h3 id="Higher-Order-List-Functions"><a href="#Higher-Order-List-Functions" class="headerlink" title="Higher-Order List Functions"></a>Higher-Order List Functions</h3><p><strong>Map</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">map</span></span>[<span class="type">U</span>](f: <span class="type">T</span> =&gt; <span class="type">U</span>): <span class="type">List</span>[<span class="type">U</span>] = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</div><div class="line">		<span class="keyword">case</span> <span class="type">Nil</span> =&gt; <span class="keyword">this</span></div><div class="line">		<span class="keyword">case</span> x :: xs =&gt; f(x) :: xs.map(f)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>filter</strong><br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">List</span>[<span class="type">T</span>] </span>&#123;</div><div class="line">	...</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">filter</span></span>(p: <span class="type">T</span> =&gt; <span class="type">Boolean</span>): <span class="type">List</span>[<span class="type">T</span>] = <span class="keyword">this</span> <span class="keyword">match</span> &#123;</div><div class="line">		<span class="keyword">case</span> <span class="type">Nil</span> =&gt; <span class="keyword">this</span></div><div class="line">		<span class="keyword">case</span> x :: xs =&gt; <span class="keyword">if</span> (p(x)) x :: xs.filter(p) <span class="keyword">else</span> xs.filter(p)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p> filter的变形：</p>
<ul>
<li>xs filterNot p</li>
<li>xs partition p</li>
<li>xs takewhile p</li>
<li>xs dropWhile p</li>
<li>xs span p</li>
</ul>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> nums = <span class="type">List</span>(<span class="number">2</span>, <span class="number">-4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>)</div><div class="line"></div><div class="line">nums filter(x =&gt; x &gt; <span class="number">0</span>)</div><div class="line">nums filterNot(x =&gt; x &gt; <span class="number">0</span>)</div><div class="line">nums partition(x =&gt; x &gt; <span class="number">0</span>)</div><div class="line"></div><div class="line">nums takeWhile(x =&gt; x &gt; <span class="number">0</span>)</div><div class="line">nums dropWhile(x =&gt; x &gt; <span class="number">0</span>)</div><div class="line">nums span(x =&gt; x &gt; <span class="number">0</span>)</div><div class="line"></div><div class="line"><span class="comment">// res0: List[Int] = List(2, 5, 7, 1)</span></div><div class="line"><span class="comment">// res1: List[Int] = List(-4)</span></div><div class="line"><span class="comment">// res2: (List[Int], List[Int]) = (List(2, 5, 7, 1),List(-4))</span></div><div class="line"></div><div class="line"><span class="comment">// res3: List[Int] = List(2)</span></div><div class="line"><span class="comment">// res4: List[Int] = List(-4, 5, 7, 1)</span></div><div class="line"><span class="comment">// res5: (List[Int], List[Int]) = (List(2),List(-4, 5, 7, 1))</span></div></pre></td></tr></table></figure>
<h3 id="Reduction-of-Lists"><a href="#Reduction-of-Lists" class="headerlink" title="Reduction of Lists"></a>Reduction of Lists</h3><p><strong>reduceLeft</strong><br>reduceLeft在list的元素间插入指定的二元操作符。<br>函数的简写：<br>((x, y) =&gt; x * y)可以简写成(_ * _)，每一个<code>_</code>表示一个从左到右的新的参数。<br><strong>foldLeft</strong><br>foldLeft和reduceLeft一样，不过多了一个accumulator累加器参数，当空list调用foldLeft参数时会返回这个值。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// reduceLeft</span></div><div class="line"><span class="type">List</span>(x1, ..., xn) reduceLeft op = (...(x1 op x2) op ...) op xn</div><div class="line"><span class="comment">// foldLeft</span></div><div class="line">(<span class="type">List</span>(x1, ..., xn) foldLeft z)(op) = (...(z op x1) op ...) op xn</div><div class="line"><span class="comment">// reduceRight</span></div><div class="line"><span class="type">List</span>(x1, ..., x&#123;n<span class="number">-1</span>&#125;, xn) reduceRight op = x1 op (... (x&#123;n<span class="number">-1</span>&#125; op xn) ...)</div><div class="line"><span class="comment">// foldRight</span></div><div class="line">(<span class="type">List</span>(x1, ..., xn) foldRight acc)(op) = x1 op (... (xn op acc) ...)</div></pre></td></tr></table></figure></p>
<p>Example:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">concat</span></span>[<span class="type">T</span>](xs: <span class="type">List</span>[<span class="type">T</span>], ys: <span class="type">List</span>[<span class="type">T</span>]): <span class="type">List</span>[<span class="type">T</span>] =</div><div class="line">	(xs foldRight ys)(_ :: _)</div></pre></td></tr></table></figure></p>
<h3 id="Reasoning-About-Concat"><a href="#Reasoning-About-Concat" class="headerlink" title="Reasoning About Concat"></a>Reasoning About Concat</h3><p><strong>引用透明referential transparency</strong><br>证明可以随意地对一个推断的某个部分应用归减的方法来替换成相同的部分。这是因为纯函数式程序没有副作用，被替换的部分就等于化简之后的形式。这种原理称为引用透明。</p>
<blockquote>
<p>Note that a proof can freely apply reduction steps as equalities to some part of a term.<br>That works because pure functional programs don’t have side effects; so that a term is equivalent to the term to which it reduces.<br>This principle is called referential transparency.</p>
</blockquote>
<p><strong>结构归纳法structural induction</strong><br>为了证明P(xs)对所有xs成立，需要证明：</p>
<ul>
<li>P(Nil)成立</li>
<li>对于list xs以及某个元素x，如果P(xs)成立，那么P(x :: xs)也成立</li>
</ul>
<blockquote>
<p>To prove a property P(xs) for all lists xs, </p>
<ul>
<li>show that P(Nil) holds (base case),</li>
<li>for a list xs and some element x, show the induction step: if P(xs) holds, then P(x :: xs) also holds.</li>
</ul>
</blockquote>
<h3 id="A-Larger-Equational-Proof-on-Lists"><a href="#A-Larger-Equational-Proof-on-Lists" class="headerlink" title="A Larger Equational Proof on Lists"></a>A Larger Equational Proof on Lists</h3><h2 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h2><h3 id="Other-Collections"><a href="#Other-Collections" class="headerlink" title="Other Collections"></a>Other Collections</h3><p>lists是线性的，获取第一个元素比获取list中间或者结尾的元素要更快。<br>因此，Scala定义了另外一种序列的实现，<strong>Vector</strong>，其比list更加平均。<br>如果操作是去序列的首个元素以及末尾所有元素，应该使用list来存储；如果操作是对序列中的每个元素进行映射，例如map等操作，则应该使用vector来存储。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> nums = <span class="type">Vector</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">-88</span>)</div><div class="line"><span class="keyword">val</span> people = <span class="type">Vector</span>(<span class="string">"Bob"</span>, <span class="string">"James"</span>, <span class="string">"Peter"</span>)</div></pre></td></tr></table></figure></p>
<p>vector支持list相同的所有操作，除了 :: 操作，vector使用（: 指向的是集合）：</p>
<ul>
<li>x +: xs：创建一个新vector，以x开头，后面跟随xs</li>
<li>xs :+ x：创建一个新vector，以xs开头，后面跟随x</li>
</ul>
<p>List和Vector的基类是Seq，它表示所有的序列。<br>数组和字符串支持和Seq一样的操作，因此在需要的时候可以隐式地转换成序列。（它们不是Seq的子类，因此数组和字符串来自Java）</p>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161223/222124882.png" alt="继承关系" title="继承关系"></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> xs = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">44</span>)</div><div class="line">xs map (x =&gt; x * <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">val</span> s = <span class="string">"Hello World"</span></div><div class="line">s filter (c =&gt; c.isUpper)</div></pre></td></tr></table></figure>
<p><strong>Range</strong><br>有三个操作符：to（包含），until（不包含），by（确定步长）<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> r: <span class="type">Range</span> = <span class="number">1</span> until <span class="number">5</span> <span class="comment">// 1, 2, 3, 4</span></div><div class="line"><span class="keyword">val</span> s: <span class="type">Range</span> = <span class="number">1</span> to <span class="number">5</span> <span class="comment">// 1, 2, 3, 4, 5</span></div><div class="line"><span class="number">1</span> to <span class="number">10</span> by <span class="number">3</span> <span class="comment">// 1, 4, 7, 10</span></div><div class="line"><span class="number">6</span> to <span class="number">1</span> by <span class="number">-2</span> <span class="comment">// 6, 4, 2</span></div></pre></td></tr></table></figure></p>
<p>Ranges表示一个带有三个属性的对象，下界、上界、步长。</p>
<p>序列的一些通用操作（List、Vector、Range）：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">xs exists p		<span class="comment">// xs中存在p(x)为真，则真</span></div><div class="line">xs forall p		<span class="comment">// xs中所有p(x)为真，则真</span></div><div class="line">xs zip ys		<span class="comment">// 返回xs和ys对应元素组成的pair的序列</span></div><div class="line">xs.unzip		<span class="comment">// 将pair序列分解成两个list，分别包含全部第一个元素和全部第二个元素</span></div><div class="line">xs.flatmap f	<span class="comment">// 将f函数得到的集合的所有的值进行收集，形成新的集合</span></div><div class="line">xs.sum			<span class="comment">// xs所有元素的和</span></div><div class="line">xs.product		<span class="comment">// xs所有元素的乘积</span></div><div class="line">xs.max			<span class="comment">// xs中最大的元素</span></div><div class="line">xs.min			<span class="comment">// xs中最小的元素</span></div></pre></td></tr></table></figure></p>
<p>Tip<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="keyword">case</span> p1 =&gt; e1 ... <span class="keyword">case</span> pn =&gt; en &#125;</div><div class="line"><span class="comment">// 等价于</span></div><div class="line">x =&gt; x <span class="keyword">match</span> &#123; <span class="keyword">case</span> p1 =&gt; e1 ... <span class="keyword">case</span> pn =&gt; en &#125;</div></pre></td></tr></table></figure></p>
<h3 id="Combinatorial-Search-and-For-Expressions"><a href="#Combinatorial-Search-and-For-Expressions" class="headerlink" title="Combinatorial Search and For-Expressions"></a>Combinatorial Search and For-Expressions</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="number">1</span> until n) map(i =&gt; (<span class="number">1</span> until i) map(j =&gt; (i, j)))</div><div class="line"></div><div class="line"><span class="comment">// res0: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Int, Int)]] = Vector(Vector(), Vector((2,1)), Vector((3,1), (3,2)), Vector((4,1), (4,2), (4,3)), Vector((5,1), (5,2), (5,3), (5,4)), Vector((6,1), (6,2), (6,3), (6,4), (6,5)))</span></div></pre></td></tr></table></figure>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161223/222302110.png" alt="继承关系" title="继承关系"></p>
<p>结果是vector of vectors。<br>因为，1 until n是Range类型，经过map之后不能是Range类型，只能转换成IndexedSeq，并且Vector是IndexedSeq的子类，于是转换成了Vector类型。</p>
<p>一个装有序列的序列，我们把它记做xss(a sequence of sequences)，我们使用foldRight和++来将所有的子序列结合起来。<br>或者，使用内置的方法flatten。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(xss foldRight <span class="type">Seq</span>[<span class="type">Int</span>]())(_ ++ _)</div><div class="line"></div><div class="line"><span class="comment">// equivalently</span></div><div class="line">xss.flatten</div></pre></td></tr></table></figure></p>
<p>定理：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xs flatMap f = (xs map f).flatten</div></pre></td></tr></table></figure></p>
<p>For表达式<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Int</span></span>)</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (p &lt;- persons <span class="keyword">if</span> p.age &gt; <span class="number">20</span>) <span class="keyword">yield</span> p.name</div><div class="line"><span class="comment">// is equivalent to</span></div><div class="line">persons filter (p =&gt; p.age &gt; <span class="number">20</span>) map (p =&gt; p.name)</div></pre></td></tr></table></figure></p>
<p>for (s) yield e<br>s是一序列的生成器generator和过滤器filter，e是一个迭代返回的值。<br>generator是这样的形式：p &lt;- e，其中p是一个模式pattern，e是一个集合的表达式。<br>filter是这样的形式：if f，f是一个布尔表达式。<br>序列必须以一个generator开始，如果序列中有多个generator，最后一个generator比第一个generator变化的要更快。<br>我们可以将generator和filter写在一个{ }中，这样可以每一行写一个generator或者filter，而不用加上分号。</p>
<h3 id="Combinatorial-Search-Example"><a href="#Combinatorial-Search-Example" class="headerlink" title="Combinatorial Search Example"></a>Combinatorial Search Example</h3><p><strong>集合Set</strong><br>Set是scala集合中的另一个基本抽象，集合写法类似于序列：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> fruit = <span class="type">Set</span>(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"pear"</span>)</div><div class="line"><span class="keyword">val</span> s = (<span class="number">1</span> to <span class="number">6</span>).toSet</div></pre></td></tr></table></figure></p>
<p>序列上的大部分操作都可以用在集合上：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s map (_ + <span class="number">2</span>)</div><div class="line">fruit filter (_.startsWith == <span class="string">"app"</span>)</div><div class="line">s.nonEmpty</div></pre></td></tr></table></figure></p>
<p>Set 和 Sequence 的区别：</p>
<ul>
<li>set是无序的，set中元素出现的顺序不是预先定义好的</li>
<li>set没有重复的元素</li>
<li>set上最重要的操作是contains，而seq上重要的操作是head和tail，或者对vector来说的indexing</li>
</ul>
<h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><p><strong>映射Map</strong><br>Map[Key, Value]是将所有Key类型与Value类型将结合的数据结构。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> romanNumerals = <span class="type">Map</span>(<span class="string">"I"</span> -&gt; <span class="number">1</span>, <span class="string">"V"</span> -&gt; <span class="number">5</span>, <span class="string">"X"</span> -&gt; <span class="number">10</span>)</div><div class="line"><span class="keyword">val</span> capitalOfCountry = <span class="type">Map</span>(<span class="string">"US"</span> -&gt; <span class="string">"Washington"</span>, <span class="string">"Switzerland"</span> -&gt; <span class="string">"Bern"</span>)</div></pre></td></tr></table></figure></p>
<p>Map是可迭代的，并且也是函数，Map[Key, Value]的函数类型是Key =&gt; Value，因此map可以使用在任何函数可以使用的地方。<br>如果没有对应的键，会抛出异常，但是可以使用get方法来避免。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">capitalOfCountry(<span class="string">"US"</span>) <span class="comment">// "Washington"</span></div><div class="line">capitalOfCountry(<span class="string">"Andorra"</span>) <span class="comment">// NoSuchElementException: key not found: Andorra</span></div><div class="line">capitalOfCountry get <span class="string">"China"</span> <span class="comment">// Option[String] = None</span></div></pre></td></tr></table></figure></p>
<p>Option类型：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Option</span>[+<span class="type">A</span>]</span></div><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Some</span>[+<span class="type">A</span>](<span class="params">value: <span class="type">A</span></span>) <span class="keyword">extends</span> <span class="title">Option</span>[<span class="type">A</span>]</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">None</span> <span class="keyword">extends</span> <span class="title">Option</span>[<span class="type">Nothing</span>]</span></div></pre></td></tr></table></figure></p>
<p>因此，Option类型可以有两种返回值类型：</p>
<ul>
<li>None：找不到匹配的key</li>
<li>Some(x)：如果key找到对应value</li>
</ul>
<p>由于Option是case class，因此可以使用模式匹配来进行分解：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">showCapital</span></span>(country: <span class="type">String</span>) = capitalOfCountry.get(country) <span class="keyword">match</span> &#123;</div><div class="line">	<span class="keyword">case</span> <span class="type">Some</span>(capital) =&gt; capital</div><div class="line">	<span class="keyword">case</span> <span class="type">None</span> =&gt; <span class="string">"missing data"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">showCapital(<span class="string">"US"</span>) <span class="comment">// "Washington"</span></div><div class="line">showCapital(<span class="string">"China"</span>) <span class="comment">// "missing data"</span></div></pre></td></tr></table></figure></p>
<p>sorted<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> fruit = <span class="type">List</span>(<span class="string">"apple"</span>, <span class="string">"pear"</span>, <span class="string">"orange"</span>, <span class="string">"pineapple"</span>)</div><div class="line">fruit sortWith (_.length &lt; _.length) <span class="comment">// List("pear", "apple", "orange", "pineapple")</span></div><div class="line">fruit.sorted <span class="comment">// List("apple", "orange", "pear", "pineapple")</span></div></pre></td></tr></table></figure></p>
<p>groupBy<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fruit groupBy (_.head) <span class="comment">//scala.collection.immutable.Map[Char,List[String]] = Map(p -&gt; List(pear, pineapple), a -&gt; List(apple), o -&gt; List(orange))</span></div></pre></td></tr></table></figure></p>
<p>默认值，map只是局部的函数，如果map没有存储对应的key，从map中取得这个key对应的值可能会抛出异常。可以使用withDefaultValue将map变成一个完整的函数。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> cap1 = capitalOfCountry withDefaultValue <span class="string">"&lt;unknown&gt;"</span></div><div class="line">cap1(<span class="string">"China"</span>) <span class="comment">// "&lt;unknown&gt;"</span></div></pre></td></tr></table></figure></p>
<h3 id="Putting-the-Pieces-Together"><a href="#Putting-the-Pieces-Together" class="headerlink" title="Putting the Pieces Together"></a>Putting the Pieces Together</h3><h2 id="Course-Conclusion"><a href="#Course-Conclusion" class="headerlink" title="Course Conclusion"></a>Course Conclusion</h2><ul>
<li>higher-order functions</li>
<li>case classes and pattern matching</li>
<li>immutable collections</li>
<li>absence of mutable state</li>
<li>flexible evaluation strategies: strict vs. by name</li>
</ul>
<p><br><br>全文完。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/12/23/Coursera-FP-in-Scala-Note-Part2/">http://hijacking.cn/2016/12/23/Coursera-FP-in-Scala-Note-Part2/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此笔记是在学习 Coursera 上 &lt;a href=&quot;https://www.coursera.org/learn/progfun1/home&quot; title=&quot;课程链接&quot;&gt;&lt;em&gt;Functional Programming Principles in Scala&lt;/em&gt;&lt;/a&gt; 课程时所整理，方便今后查阅。&lt;/p&gt;
&lt;p&gt;接&lt;a href=&quot;http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/&quot;&gt;上篇&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Types-and-Pattern-Matching&quot;&gt;&lt;a href=&quot;#Types-and-Pattern-Matching&quot; class=&quot;headerlink&quot; title=&quot;Types and Pattern Matching&quot;&gt;&lt;/a&gt;Types and Pattern Matching&lt;/h2&gt;&lt;h3 id=&quot;Objects-Everywhere-无处不在的对象&quot;&gt;&lt;a href=&quot;#Objects-Everywhere-无处不在的对象&quot; class=&quot;headerlink&quot; title=&quot;Objects Everywhere 无处不在的对象&quot;&gt;&lt;/a&gt;Objects Everywhere 无处不在的对象&lt;/h3&gt;&lt;p&gt;Scala是纯面向对象的语言，因此在Scala中，所有的值都是对象。&lt;br&gt;虽然第一眼看上去，Scala中存在一些不是对象的，如基本类型，函数等，但是基本类型Boolean、Int等都可以自己定义类型，因此它们也是对象。&lt;br&gt;Scala和Java一样，支持&lt;strong&gt;重载overlaod&lt;/strong&gt;机制，可以根据方法传入的不同参数选择应该调用哪个具体的方法。&lt;/p&gt;
&lt;h3 id=&quot;Functions-as-Objects-函数作为对象&quot;&gt;&lt;a href=&quot;#Functions-as-Objects-函数作为对象&quot; class=&quot;headerlink&quot; title=&quot;Functions as Objects 函数作为对象&quot;&gt;&lt;/a&gt;Functions as Objects 函数作为对象&lt;/h3&gt;&lt;p&gt;在Scala中，函数也被看作是对象，而函数的类型&lt;code&gt;A =&amp;gt; B&lt;/code&gt;也只是scala.Function1[A, B]的缩写，且定义如下：&lt;br&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt; scala&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Function1&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;] &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;apply&lt;/span&gt;&lt;/span&gt;(x: &lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;): &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据处理" scheme="http://hijacking.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Scala" scheme="http://hijacking.cn/tags/Scala/"/>
    
      <category term="Coursera" scheme="http://hijacking.cn/tags/Coursera/"/>
    
  </entry>
  
  <entry>
    <title>HDFS 常用操作</title>
    <link href="http://hijacking.cn/2016/12/15/HDFS-Commands/"/>
    <id>http://hijacking.cn/2016/12/15/HDFS-Commands/</id>
    <published>2016-12-15T03:06:27.000Z</published>
    <updated>2016-12-18T07:11:37.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几种指令区别"><a href="#几种指令区别" class="headerlink" title="几种指令区别"></a>几种指令区别</h2><p>在操作HDFS上的文件的时候，Hadoop给我们提供了以下三种（其中一种已被废弃）指令，它们分别是：</p>
<ul>
<li><code>hadoop fs</code>: 适用范围最广，操作通用文件系统，例如Local FS、HDFS、HFTP FS、S3 FS等。</li>
<li><code>hadoop dfs</code>: 进行与HDFS相关的操作，但是该方法已经被<strong>废弃</strong>，使用<code>hdfs dfs</code>代替。</li>
<li><code>hdfs dfs</code>: 进行HDFS的相关操作。</li>
</ul>
<p><strong>值得注意</strong>，如果<code>hadoop fs</code>指令后未指明是何种文件系统，那么默认是HDFS，也就是说<code>hadoop fs -ls /</code>相当于<code>hadoop fs -ls hdfs:///</code>。<br><strong>还有一点</strong>，<code>/path</code>路径和<code>path</code>并不指向同一个目录，后者其实是<code>/user/username/path</code>的简写形式。这一点与Linux本地文件系统类似。</p>
<p>几种指令操作类似，下面以<code>hadoop fs</code>为例，介绍常用的几种操作。</p>
<a id="more"></a>
<h2 id="FS-Shell"><a href="#FS-Shell" class="headerlink" title="FS Shell"></a>FS Shell</h2><p>调用FS Shell指令为：<code>bin/hadoop fs &lt;args&gt;</code>的形式，如果在系统的环境变量的路径中添加了<code>$Hadoop_HOME/bin</code>，那么可以直接使用<code>hadoop fs &lt;args&gt;</code>指令。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161215/110801595.png" alt="环境变量" title="环境变量"></p>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p><code>hadoop fs -mkdir &lt;paths&gt;</code>：在HDFS上创建指令路径的目录。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在HDFS上新建一个data目录</span></div><div class="line">hadoop fs -mkdir /<span class="keyword">data</span></div></pre></td></tr></table></figure></p>
<h3 id="上载文件"><a href="#上载文件" class="headerlink" title="上载文件"></a>上载文件</h3><p><code>hadoop fs -put &lt;localsrc&gt; ... &lt;dst&gt;</code>：将一个或多个本地文件上载到HDFS目录中。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将本地的u1.base和u1.test文件写入到HDFS中的data目录</span></div><div class="line">hadoop fs -put /home/linux/Documents/u1.base home/linux/Documents/u1.test /<span class="keyword">data</span></div></pre></td></tr></table></figure></p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p><code>hadoop fs -get &lt;src&gt; &lt;localdst&gt;</code>：复制文件到本地文件系统。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将HDFS中u1.base和u1.test复制到本地</span></div><div class="line">hadoop fs -get /<span class="keyword">data</span>/u1.base /home/linux/Documents</div><div class="line">hadoop fs -get /<span class="keyword">data</span>/u1.test /home/linux/Documents</div></pre></td></tr></table></figure></p>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p><code>hadoop fs -cp URI [URI …] &lt;dest&gt;</code>：将文件从源路径复制到目的路径。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将data目录下的u1.base和u1.test文件复制到/data/ml100k文件夹下</span></div><div class="line">hadoop fs -cp /<span class="keyword">data</span>/u1.base /<span class="keyword">data</span>/u1.test /<span class="keyword">data</span>/ml100k</div></pre></td></tr></table></figure></p>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p><code>hadoop fs -mv URI [URI …] &lt;dest&gt;</code>：将文件从源路径移动到目的路径。不允许不同文件系统间移动文件。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将data目录下的u1.base和u1.test文件移动到/data/ml100k文件夹下</span></div><div class="line">hadoop fs -mv /<span class="keyword">data</span>/u1.base /<span class="keyword">data</span>/u1.test /<span class="keyword">data</span>/ml100k</div></pre></td></tr></table></figure></p>
<h3 id="查看目录结构"><a href="#查看目录结构" class="headerlink" title="查看目录结构"></a>查看目录结构</h3><p><code>hadoop fs -ls &lt;args&gt;</code>：</p>
<ul>
<li>如果是文件：返回<code>文件名 &lt;副本数&gt; 文件大小 修改日期 修改时间 权限 用户ID 组ID</code></li>
<li>如果是目录：返回<code>目录名 &lt;dir&gt; 修改日期 修改时间 权限 用户ID 组ID</code></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看data目录下的直接子文件</span></div><div class="line">hadoop fs -ls /<span class="keyword">data</span></div></pre></td></tr></table></figure>
<h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><p><code>hadoop fs -cat URI [URI …]</code>：将路径指定文件的内容输出到stdout。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看u1.test文件的内容</span></div><div class="line">hadoop fs -cat /<span class="keyword">data</span>/u1.test</div></pre></td></tr></table></figure></p>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><code>hadoop fs -rm [-R] URI [URI …]</code>：删除指定文件。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将data目录下u1.base、u1.test</span></div><div class="line">hadoop fs -rm /<span class="keyword">data</span>/u1.base /<span class="keyword">data</span>/u1.test</div></pre></td></tr></table></figure></p>
<p>若想要删除文件夹及其路径内所有文件，则使用下面指令：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 删除/data/ml100k目录下所有文件</span></div><div class="line">hadoop fs -rm -R /<span class="keyword">data</span>/ml100k</div></pre></td></tr></table></figure></p>
<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>对于不同的文件系统，有不同的scheme，读取本地文件系统时候，应该使用<code>file:///localpath</code>；而对于HDFS，应该使用<code>hdfs:///hdfspath</code>。<br>HDFS所有节点都可以读取，但是本地文件系统只能够读取本地文件，如果程序需要读本地文件，应该在所有节点的相同目录下都有该文件的备份。</p>
<hr>
<p>阅读参考：</p>
<p>关于三种指令的区别，参考<a href="http://stackoverflow.com/questions/18142960/whats-the-difference-between-hadoop-fs-shell-commands-and-hdfs-dfs-shell-co" target="_blank" rel="external">stackoverflow</a>。</p>
<p>更多指令，参考Hadoop文档<a href="https://hadoop.apache.org/docs/r1.0.4/cn/hdfs_shell.html" target="_blank" rel="external">ch</a>或<a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/FileSystemShell.html" target="_blank" rel="external">en</a><em>(最新稳定版)</em>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/12/15/HDFS-Commands/">http://hijacking.cn/2016/12/15/HDFS-Commands/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;几种指令区别&quot;&gt;&lt;a href=&quot;#几种指令区别&quot; class=&quot;headerlink&quot; title=&quot;几种指令区别&quot;&gt;&lt;/a&gt;几种指令区别&lt;/h2&gt;&lt;p&gt;在操作HDFS上的文件的时候，Hadoop给我们提供了以下三种（其中一种已被废弃）指令，它们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hadoop fs&lt;/code&gt;: 适用范围最广，操作通用文件系统，例如Local FS、HDFS、HFTP FS、S3 FS等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hadoop dfs&lt;/code&gt;: 进行与HDFS相关的操作，但是该方法已经被&lt;strong&gt;废弃&lt;/strong&gt;，使用&lt;code&gt;hdfs dfs&lt;/code&gt;代替。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hdfs dfs&lt;/code&gt;: 进行HDFS的相关操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;值得注意&lt;/strong&gt;，如果&lt;code&gt;hadoop fs&lt;/code&gt;指令后未指明是何种文件系统，那么默认是HDFS，也就是说&lt;code&gt;hadoop fs -ls /&lt;/code&gt;相当于&lt;code&gt;hadoop fs -ls hdfs:///&lt;/code&gt;。&lt;br&gt;&lt;strong&gt;还有一点&lt;/strong&gt;，&lt;code&gt;/path&lt;/code&gt;路径和&lt;code&gt;path&lt;/code&gt;并不指向同一个目录，后者其实是&lt;code&gt;/user/username/path&lt;/code&gt;的简写形式。这一点与Linux本地文件系统类似。&lt;/p&gt;
&lt;p&gt;几种指令操作类似，下面以&lt;code&gt;hadoop fs&lt;/code&gt;为例，介绍常用的几种操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据处理" scheme="http://hijacking.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Hadoop" scheme="http://hijacking.cn/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>协同过滤推荐之 矩阵分解模型</title>
    <link href="http://hijacking.cn/2016/12/12/CF-MF/"/>
    <id>http://hijacking.cn/2016/12/12/CF-MF/</id>
    <published>2016-12-12T03:08:25.000Z</published>
    <updated>2016-12-18T04:24:27.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111006385.png" alt="推荐算法分类" title="推荐算法分类"></p>
<h2 id="SVD"><a href="#SVD" class="headerlink" title="SVD"></a>SVD</h2><p>Singular Value Decomposition, 奇异值分解</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3>
假设${\bf{M}}$是一个$m \times n$矩阵，其中的元素全部属于实数域或复数域。那么存在一个分解使得：
$${{\bf{M}}_{m \times n}} = {{\bf{U}}_{m \times m}}{{\bf{\Sigma }}_{m \times n}}{\bf{V}}_{n \times n}^*$$
其中，${\bf{U}}$、${\bf{V}}$分别称为左、右奇异向量，$*$表示共轭转置，${\bf{\Sigma}}$对角线上的值是奇异值，其值按从大到小排列，且下降迅速。因此我们可以用前$r$个奇异值来近似描述原矩阵：
$${{\bf{M}}_{m \times n}} \approx {{\bf{U}}_{m \times r}}{{\bf{\Sigma }}_{r \times r}}{\bf{V}}_{n \times r}^*$$
其中，$r$是一个远小于$m$和$n$的数。

<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111041846.png" alt="SVD 近似" title="SVD 近似"></p>
<a id="more"></a>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p><a href="http://www.d.umn.edu/~mhampton/m4326svd_example.pdf" target="_blank" rel="external">SVD computation example</a></p>
<h3 id="评分预测"><a href="#评分预测" class="headerlink" title="评分预测"></a>评分预测</h3><ol>
<li>利用SVD将评分矩阵${\bf{R}}$分解为${\bf{U}}$、${\bf{\Sigma }}$、${\bf{V}}$；</li>
<li>将${\bf{\Sigma }}$简化为维数是$r$的矩阵，得到${{\bf{\Sigma }}_r}$；</li>
<li>相应地简化${\bf{U}}$、${\bf{V}}$得到矩阵${{\bf{U}}_r}$与${{\bf{V}}_r}$；</li>
<li>计算两个相关矩阵${{\bf{U}}_k} = {{\bf{U}}_r} \cdot \sqrt {{{\bf{\Sigma }}_r}} $与${{\bf{V}}_k} = \sqrt {{{\bf{\Sigma }}_r}}  \cdot {\bf{V}}_r^T$；</li>
<li>计算用户$u$对未评分项目$i$的预测评分：${\hat r_{ui}} = {{\bf{U}}_k}\left( u \right) \cdot {{\bf{V}}_k}\left( i \right)$。
</li>
</ol>
<p>优点：</p>
<ul>
<li>提取评分矩阵关键特征，简化数据，去除噪声和冗余数据</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要将稀疏评分矩阵补全成稠密矩阵，而实践中评分矩阵往往非常庞大且稀疏，一旦补全成稠密的，将会占用非常大的空间</li>
<li>算法复杂度严重依赖SVD方法，在稠密大规模矩阵上分解时，速度非常慢</li>
</ul>
<h3 id="Funk-SVD"><a href="#Funk-SVD" class="headerlink" title="Funk-SVD"></a>Funk-SVD</h3><p>Netflix Prize开始后，Simon Funk在其个人博客中公布了一个基于SVD的改进算法(Funk-SVD)，一下子引爆了推荐系统研究者对于矩阵分解的关注。这种改进算法称为隐语义模型或潜在因素模型。</p>
<h2 id="LFM"><a href="#LFM" class="headerlink" title="LFM"></a>LFM</h2><p>Latent Factor Model, 潜在因素模型</p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3>
将评分矩阵分解为用户隐含特征组成的矩阵和项目隐含特征组成的矩阵，类似于SVD算法中的${{\bf{U}}_r}$与${{\bf{V}}_r}$：
$${\bf{R}} \approx {{\bf{P}}^T}{\bf{Q}}$$
${\bf{P}}$为$k \times m$矩阵，表示用户特征向量；${\bf{Q}}$为$k \times n$矩阵，表示物品特征向量。那么$u$对$i$预测评分为：
$${\hat r_{ui}} = {\bf{p}}_u^T{{\bf{q}}_i}$$

<h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3>
采用最小化误差函数的方法来求解，转化为最优化问题。
定义损失函数：
$$C = \sum\limits_{(u,i) \in R} {{{\left( {{r_{u,i}} - {\bf{p}}_u^T{{\bf{q}}_i}} \right)}^2}} {\rm{ + }}\lambda \left( {{{\left\| {{{\bf{p}}_u}} \right\|}^2} + {{\left\| {{{\bf{q}}_i}} \right\|}^2}} \right)$$
目标：
$$\mathop {\min }\limits_{{{\bf{p}}_u},{{\bf{q}}_i}} C$$

<h3 id="最优化算法"><a href="#最优化算法" class="headerlink" title="最优化算法"></a>最优化算法</h3><p>两种常用的算法：</p>
<ul>
<li>梯度下降法<br>Simon Funk所采用的方法，为了减少计算量，采用随机梯度下降SDG(Stochastic Gradient Descent)</li>
<li>交替最小二乘法<br>通常SGD比ALS(Alternating Least Squares)简单而且快速，但是ALS的并行性能比较好，而且可以较好地处理稀疏数据</li>
</ul>
<h3 id="ALS"><a href="#ALS" class="headerlink" title="ALS"></a>ALS</h3>
目标：
$$\mathop {\min }\limits_{{{\bf{p}}_u},{{\bf{q}}_i}} \sum\limits_{(u,i) \in R} {{{\left( {{r_{u,i}} - {\bf{p}}_u^T{{\bf{q}}_i}} \right)}^2}} {\rm{ + }}\lambda \left( {{{\left\| {{{\bf{p}}_u}} \right\|}^2} + {{\left\| {{{\bf{q}}_i}} \right\|}^2}} \right)$$
因为变量${{{\bf{p}}_u}}$和${{{\bf{q}}_i}}$耦合到一起，不好求解，因此可以先固定${\bf{Q}}$，求解${\bf{P}}$；再固定${\bf{P}}$，求解${\bf{Q}}$，如此交替反复，直至收敛。

<ul>
<li>先固定${\bf{Q}}$，将损失函数$C$对${{{\bf{p}}_u}}$求偏导，并令导数等于0，得到：
<center>${{\bf{p}}_u} = {\left( {{{\bf{Q}}^T}{\bf{Q}} + \lambda {\bf{E}}} \right)^{ - 1}}{{\bf{Q}}^T}{{\bf{r}}_u}$&nbsp;&nbsp;&nbsp;&nbsp;(1)</center>
</li>
<li>同理固定${\bf{P}}$，可得：
<center>${{\bf{q}}_i} = {\left( {{{\bf{P}}^T}{\bf{P}} + \lambda {\bf{E}}} \right)^{ - 1}}{{\bf{P}}^T}{{\bf{r}}_i}$&nbsp;&nbsp;&nbsp;&nbsp;(2)</center>

</li>
</ul>
<p><a href="http://blog.csdn.net/oucpowerman/article/details/49847979" target="_blank" rel="external">证明</a><br>
具体步骤：
随机初始化${\bf{Q}}$，利用公式(1)更新得到${\bf{P}}$，然后利用公式(2)更新${\bf{Q}}$，直到误差值变化很小或者达到最大迭代次数。
</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>Spark MLlib</p>
<h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>ALS伴生对象是建立ALS模型的入口，主要方法：</p>
<ul>
<li>train(ratings, rank, iterations, lambda)：训练模型，返回MatrixFactorizationModel</li>
</ul>
<p>传入参数：</p>
<ul>
<li>ratings：评分RDD格式(userID, productID, rating)对</li>
<li>rank：特征数量</li>
<li>iterations：迭代数量</li>
<li>lambda：正则因子</li>
</ul>
<h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><p>MatrixFactorizationModel是用来预测评分的模型，主要方法：</p>
<ul>
<li>predict(user: Int, product: Int)：返回user用户对product物品的预测评分</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 建立模型</span></div><div class="line"><span class="keyword">val</span> rank = <span class="number">10</span></div><div class="line"><span class="keyword">val</span> numIterations = <span class="number">20</span></div><div class="line"><span class="keyword">val</span> model = <span class="type">ALS</span>.train(trainRatings, rank, numIterations, <span class="number">0.01</span>)</div><div class="line"></div><div class="line"><span class="comment">// 预测结果</span></div><div class="line"><span class="keyword">val</span> predictions = model.predict(usersProducts).map &#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Rating</span>(user, product, rate) =&gt;</div><div class="line">    ((user, product), rate)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111105522.png" alt="输出结果" title="输出结果"><br>误差：</p>
<ul>
<li>MAE = 0.9112771540040457</li>
<li>RMSE = 1.2129820340745725</li>
</ul>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><h3 id="带有偏置的MF"><a href="#带有偏置的MF" class="headerlink" title="带有偏置的MF"></a>带有偏置的MF</h3>
不同的人打分的偏好不同，有的人愿意都给高分，有的人打分则比较保守。修改评分预测公式：
$${\hat r_{ui}} = \mu  + {b_u} + {b_i} + {\bf{p}}_u^T{{\bf{q}}_i}$$
加入$\mu $全部评分的总体平均分，${b_u}$是用户$u$打分行为的偏差，${b_i}$是物品$i$收到打分的偏差，选取一种最优化算法训练出${b_u}$、${b_i}$、${{{\bf{p}}_u}}$和${{{\bf{q}}_i}}$。

<h3 id="带有隐反馈的MF-SVD"><a href="#带有隐反馈的MF-SVD" class="headerlink" title="带有隐反馈的MF(SVD++)"></a>带有隐反馈的MF(SVD++)</h3>
用户评分的物品只占很少一部分，但是用户的浏览、点击行为从一定程度上也反应了他对物品的兴趣，而这些都是隐性的反馈因素。因此，考虑修改评分预测公式：
$${\hat r_{ui}} = \mu  + {b_u} + {b_i} + \left( {{\bf{p}}_u^T{\rm{ + }}{1 \over {\sqrt {\left| {N\left( u \right)} \right|} }}\sum\limits_{j \in N\left( u \right)} {{{\bf{y}}_{\bf{j}}}} } \right){{\bf{q}}_i}$$
${N\left( u \right)}$是用户$u$浏览或评论过的物品集合，${{\bf{y}}_j}$表示历史行为表现出来的偏好，和前面向量的维度相同。

<h3 id="非负矩阵分解-NMF"><a href="#非负矩阵分解-NMF" class="headerlink" title="非负矩阵分解(NMF)"></a>非负矩阵分解(NMF)</h3>
在矩阵分解的过程中增添一些限制，如分解出来的矩阵${\bf{P}}$和${\bf{Q}}$的元素不允许出现负值。

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p>ALS-WR<br>增加置信度权重来权衡显性和隐性反馈的比重。</p>
</li>
<li><p>考虑时间因素<br>用户的兴趣度会随时间的推移而变化，因此将会随时间变化的因素表示为时间的函数。</p>
</li>
<li><p>带标签的MF<br>加入用户的标签（比如年龄、性别、职业）来推测对每个因素的喜爱程度。</p>
</li>
</ul>
<hr>
<p>阅读参考：</p>
<ol>
<li><a href="http://www.flickering.cn/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/2015/01/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3%EF%BC%88we-recommend-a-singular-value-decomposition%EF%BC%89/" target="_blank" rel="external">几何角度解释SVD</a></li>
<li><a href="http://sifter.org/~simon/journal/20061211.html" target="_blank" rel="external">Simon Funk’s Blog</a></li>
<li><a href="https://datajobs.com/data-science-repo/Recommender-Systems-[Netflix].pdf" target="_blank" rel="external">Recommender Systems [Netflix]</a></li>
<li><a href="http://papers.nips.cc/paper/1861-algorithms-for-non-negative-matrix-factorization.pdf" target="_blank" rel="external">Non-negative matrix factorization</a></li>
</ol>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/12/12/CF-MF/">http://hijacking.cn/2016/12/12/CF-MF/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;推荐&quot;&gt;&lt;a href=&quot;#推荐&quot; class=&quot;headerlink&quot; title=&quot;推荐&quot;&gt;&lt;/a&gt;推荐&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111006385.png&quot; alt=&quot;推荐算法分类&quot; title=&quot;推荐算法分类&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;SVD&quot;&gt;&lt;a href=&quot;#SVD&quot; class=&quot;headerlink&quot; title=&quot;SVD&quot;&gt;&lt;/a&gt;SVD&lt;/h2&gt;&lt;p&gt;Singular Value Decomposition, 奇异值分解&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;
假设${\bf{M}}$是一个$m \times n$矩阵，其中的元素全部属于实数域或复数域。那么存在一个分解使得：
$${{\bf{M}}_{m \times n}} = {{\bf{U}}_{m \times m}}{{\bf{\Sigma }}_{m \times n}}{\bf{V}}_{n \times n}^*$$
其中，${\bf{U}}$、${\bf{V}}$分别称为左、右奇异向量，$*$表示共轭转置，${\bf{\Sigma}}$对角线上的值是奇异值，其值按从大到小排列，且下降迅速。因此我们可以用前$r$个奇异值来近似描述原矩阵：
$${{\bf{M}}_{m \times n}} \approx {{\bf{U}}_{m \times r}}{{\bf{\Sigma }}_{r \times r}}{\bf{V}}_{n \times r}^*$$
其中，$r$是一个远小于$m$和$n$的数。

&lt;p&gt;&lt;img src=&quot;http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111041846.png&quot; alt=&quot;SVD 近似&quot; title=&quot;SVD 近似&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据处理" scheme="http://hijacking.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="推荐" scheme="http://hijacking.cn/tags/%E6%8E%A8%E8%8D%90/"/>
    
      <category term="矩阵分解" scheme="http://hijacking.cn/tags/%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/"/>
    
      <category term="SVD" scheme="http://hijacking.cn/tags/SVD/"/>
    
      <category term="Spark" scheme="http://hijacking.cn/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Coursera - Scala 函数式程序设计原理 - 学习笔记 (1)</title>
    <link href="http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/"/>
    <id>http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/</id>
    <published>2016-12-07T03:00:01.000Z</published>
    <updated>2016-12-23T14:44:25.688Z</updated>
    
    <content type="html"><![CDATA[<p>此笔记是在学习 Coursera 上 <a href="https://www.coursera.org/learn/progfun1/home" title="课程链接" target="_blank" rel="external"><em>Functional Programming Principles in Scala</em></a> 课程时所整理，方便今后查阅。</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="SBT-相关知识以及作业提交"><a href="#SBT-相关知识以及作业提交" class="headerlink" title="SBT 相关知识以及作业提交"></a>SBT 相关知识以及作业提交</h3><p>在 sbt 的术语中，基础目录或者是项目的根目录，指的是包含项目的目录。而 <code>build.sbt</code> 就是基础目录。<br>src的目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">  main/</div><div class="line">    resources/</div><div class="line">       &lt;files to include in main jar here&gt;</div><div class="line">    scala/</div><div class="line">       &lt;main Scala sources&gt;</div><div class="line">    java/</div><div class="line">       &lt;main Java sources&gt;</div><div class="line">  test/</div><div class="line">    resources</div><div class="line">       &lt;files to include in test jar here&gt;</div><div class="line">    scala/</div><div class="line">       &lt;test Scala sources&gt;</div><div class="line">    java/</div><div class="line">       &lt;test Java sources&gt;</div><div class="line">Other directories in src/ will be ignored. Additionally, all hidden</div><div class="line">directories will be ignored.</div></pre></td></tr></table></figure></p>
<p><code>project/</code> 文件夹下也可能有 <code>.sbt</code>文件，但是它们与基础目录的 sbt 文件作用不同。</p>
<a id="more"></a>
<p>在 sbt 文件所在处打开 CMD，键入<code>sbt</code>指令。sbt 指令只能在 sbt shell 中使用，不能在 Scala REPL 中使用。<br>但是，可以在 sbt shell 中开启Scala解释器，输入<code>console</code>指令。当从sbt中启动解释器的时候，项目中的所有代码会被加载，并且可以直接访问。因此，Scala REPL 只能在项目没有错误的时候才能启动成功。<code>ctrl + D</code>退出。<br>使用 <code>compile</code> 指令编译代码。<br><code>src/test/scala</code> 目录中包含的是测试代码，使用 <code>test</code> 指令进行测试。<br>当项目中有一个 object 对象，并且含有 main 函数（或者是继承自 App），那么可以使用 <code>run</code> 指令运行程序。如果有多个 main 函数，那么会询问执行哪一个。</p>
<h3 id="Scala-Tutorial"><a href="#Scala-Tutorial" class="headerlink" title="Scala Tutorial"></a>Scala Tutorial</h3><p>两种方式实现 HelloWorld：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// #1</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  println(<span class="string">"Hello, World!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// #2</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">    println(<span class="string">"Hello, World!"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>官方文档建议<strong>使用定义 main 函数</strong>的方法来实现，前者有可能出现各种问题。</p>
<h2 id="Functions-amp-Evaluation"><a href="#Functions-amp-Evaluation" class="headerlink" title="Functions &amp; Evaluation"></a>Functions &amp; Evaluation</h2><h3 id="Programming-Paradigms-编程范型"><a href="#Programming-Paradigms-编程范型" class="headerlink" title="Programming Paradigms 编程范型"></a>Programming Paradigms 编程范型</h3><p>函数式编程意味着避免<strong>变化 mutation</strong>。<br>狭义上说，函数式编程FP意味着不使用<strong>变量 mutable variable</strong>、<strong>分配 assignment</strong>、<strong>循环 loop</strong>以及其他<strong>必要的控制结构 imperative control structure</strong>。<br>广义上说，集中注意在程序中的函数上。<br>函数在 FP 语言中是第一等公民：</p>
<ul>
<li>可以在任何地方定义，包括其他函数的内部</li>
<li>可以被当做参数传入以及返回</li>
</ul>
<h3 id="Elements-of-Programming-编程元素"><a href="#Elements-of-Programming-编程元素" class="headerlink" title="Elements of Programming 编程元素"></a>Elements of Programming 编程元素</h3><p>交互式 shell，也被称作 <strong>RELP(Read-Eval-Print-Loop)</strong>，通过输入 scala 开启。<br>Scala 参数与返回值类型：</p>
<ul>
<li>Int：32位整数</li>
<li>Double：64位浮点数</li>
<li>Boolean：布尔值 true 或者 false</li>
</ul>
<p>计算步骤：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 表达式计算：</span></div><div class="line">(<span class="number">2</span> * pi) * radius</div><div class="line">(<span class="number">2</span> * <span class="number">3.14159</span>) * radius</div><div class="line"><span class="number">6.28318</span> * radius</div><div class="line"><span class="number">6.28318</span> * <span class="number">10</span></div><div class="line"><span class="number">62.8318</span></div><div class="line"></div><div class="line"><span class="comment">// 函数计算：</span></div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">2</span>+<span class="number">2</span>)</div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">square(<span class="number">3</span>) + square(<span class="number">4</span>)</div><div class="line"><span class="number">3</span> * <span class="number">3</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * <span class="number">4</span></div><div class="line"><span class="number">9</span> + <span class="number">16</span></div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p>
<p>替代模型 substitution model：<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/121542116.png" alt="替代模型" title="替代模型"></p>
<p>只要没有副作用，所有的表示式都可以用替代模型表示。C++ 这个表达式就具有副作用，因为每次计算后C的值都会改变，并不是所有的表达式最后都会计算出一个值（在有限的步骤内），例如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span></span>: <span class="type">Int</span> = loop</div><div class="line"><span class="comment">// 调用</span></div><div class="line">loop</div></pre></td></tr></table></figure></p>
<p>Call-by-name and Call-by-value：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// call-by-value</span></div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">2</span>+<span class="number">2</span>)</div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">square(<span class="number">3</span>) + square(<span class="number">4</span>)</div><div class="line"><span class="number">3</span> * <span class="number">3</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * <span class="number">4</span></div><div class="line"><span class="number">9</span> + <span class="number">16</span></div><div class="line"><span class="number">25</span></div><div class="line"></div><div class="line"><span class="comment">// call-by-name</span></div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">2</span>+<span class="number">2</span>)</div><div class="line">square(<span class="number">3</span>) + square(<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">3</span> * <span class="number">3</span> + square(<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">9</span> + square(<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">9</span> + (<span class="number">2</span>+<span class="number">2</span>) * (<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * (<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * <span class="number">4</span></div><div class="line"><span class="number">9</span> + <span class="number">16</span></div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p>
<p>call-by-value：每个函数参数都只计算一次<br>call-by-name：当对应该的参数在函数计算体内没有被时用到的话，就不会被计算<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// which strategy is fastest?</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = x * x</div><div class="line"></div><div class="line">test(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// same</span></div><div class="line">test(<span class="number">3</span>+<span class="number">4</span>, <span class="number">8</span>) <span class="comment">// CBV</span></div><div class="line">test(<span class="number">7</span>, <span class="number">2</span>*<span class="number">4</span>) <span class="comment">// CBN</span></div><div class="line">test(<span class="number">3</span>+<span class="number">4</span>, <span class="number">2</span>*<span class="number">4</span>) <span class="comment">//same</span></div></pre></td></tr></table></figure></p>
<h3 id="Evaluation-Strategies-and-Termination-计算策略与终止"><a href="#Evaluation-Strategies-and-Termination-计算策略与终止" class="headerlink" title="Evaluation Strategies and Termination 计算策略与终止"></a>Evaluation Strategies and Termination 计算策略与终止</h3><p>如果表达式 e 的 CBV 计算终止了，那么 CBN 的计算也会终止；反过来则不一定是正确的。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = x</div><div class="line"></div><div class="line"><span class="comment">// CBN</span></div><div class="line">first(<span class="number">1</span>, loop)</div><div class="line"></div><div class="line"><span class="comment">// CBV</span></div><div class="line">first(<span class="number">1</span>, loop)</div></pre></td></tr></table></figure></p>
<p>Scala 通常使用上的计算策略是 call-by-value ，但是如果一个参数类型以 <code>=&gt;</code>开头，那么它使用的策略是 call-by-name：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">constOne</span></span>(x: <span class="type">Int</span>, y: =&gt; <span class="type">Int</span>) = <span class="number">1</span></div><div class="line"></div><div class="line">constOne(<span class="number">1</span>+<span class="number">2</span>, loop) <span class="comment">// 1</span></div><div class="line"></div><div class="line">constOne(loop, <span class="number">1</span>+<span class="number">2</span>) <span class="comment">// loop</span></div></pre></td></tr></table></figure></p>
<h3 id="Conditionals-and-Value-Definitions-条件语句与值定义"><a href="#Conditionals-and-Value-Definitions-条件语句与值定义" class="headerlink" title="Conditionals and Value Definitions 条件语句与值定义"></a>Conditionals and Value Definitions 条件语句与值定义</h3><p><code>if-else</code>在 Scala 中用作表达式，而不是声明：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span></span>(x: <span class="type">Int</span>) = <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) x <span class="keyword">else</span> -x</div></pre></td></tr></table></figure></p>
<p>值定义也没有 by-name 与 by-value，<code>def</code>用来定义 by-name,每一次时候都会重新进行计算；而 <code>val</code> 用来定义 by-value，val 的值只会计算一次：<br>def 和 val 的区别在等式右边的表达式不会终止的时候很明显：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span></span>: <span class="type">Boolean</span> = loop</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span> </span>= loop <span class="comment">// OK</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> x = loop <span class="comment">// lead to an infinite loop</span></div></pre></td></tr></table></figure></p>
<p><code>&amp;&amp;</code> 和 <code>||</code> 可以写成：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// and</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">and</span></span>(x:<span class="type">Boolean</span>,y:=&gt;<span class="type">Boolean</span>) = <span class="keyword">if</span>(x) y <span class="keyword">else</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">or</span></span>(x:<span class="type">Boolean</span>,y:=&gt;<span class="type">Boolean</span>) = <span class="keyword">if</span>(x) <span class="literal">true</span> <span class="keyword">else</span> y</div></pre></td></tr></table></figure></p>
<h3 id="Example-square-roots-with-Newton’s-method-使用牛顿方法实现平方根"><a href="#Example-square-roots-with-Newton’s-method-使用牛顿方法实现平方根" class="headerlink" title="Example square roots with Newton’s method 使用牛顿方法实现平方根"></a>Example square roots with Newton’s method 使用牛顿方法实现平方根</h3><p>实现平方根算法：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span></span>(x: <span class="type">Double</span>) = <span class="keyword">if</span> (x &lt; <span class="number">0</span>) -x <span class="keyword">else</span> x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrtIter</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>): <span class="type">Double</span> =</div><div class="line">  <span class="keyword">if</span> (isGoodEnough(guess, x)) guess</div><div class="line">  <span class="keyword">else</span> sqrtIter(improve(guess, x), x)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isGoodEnough</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) =</div><div class="line">  abs(guess * guess - x) / x &lt; <span class="number">0.001</span> <span class="comment">// instead of abs(guess * guess - x) &lt; 0.001</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">improve</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) =</div><div class="line">  (guess + x / guess) / <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = sqrtIter(<span class="number">1.0</span>, x)</div><div class="line"></div><div class="line">sqrt(<span class="number">2</span>)</div><div class="line">sqrt(<span class="number">4</span>)</div><div class="line">sqrt(<span class="number">1e-6</span>)</div><div class="line">sqrt(<span class="number">1e60</span>)</div></pre></td></tr></table></figure></p>
<h3 id="Blocks-and-Lexical-Scope-块代码以及词法作用域"><a href="#Blocks-and-Lexical-Scope-块代码以及词法作用域" class="headerlink" title="Blocks and Lexical Scope 块代码以及词法作用域"></a>Blocks and Lexical Scope 块代码以及词法作用域</h3><p>将一个任务分解成若干个函数实现是很好的编程风格，但是 sqrtIter, improve, isGoodEnough 这个方法知识 sqrt 的实现，而不是使用。<br>因此，我们可以将这个函数放到另外一个函数的内部，这样还可以有效避免<strong>命名空间污染 name-space pollution</strong>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sqrtIter</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>): <span class="type">Double</span> =</div><div class="line">    <span class="keyword">if</span> (isGoodEnough(guess, x)) guess</div><div class="line">    <span class="keyword">else</span> sqrtIter(improve(guess, x), x)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isGoodEnough</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) =</div><div class="line">    abs(guess * guess - x) / x &lt; <span class="number">0.001</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">improve</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) =</div><div class="line">    (guess + x / guess) / <span class="number">2</span></div><div class="line"></div><div class="line">  sqrtIter(<span class="number">1.0</span>, x)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Scala 中的 Block：<br>block 定义在一堆花括号中<code>{...}</code>，内部包含了一系列的定义和表达式，block 的最后一个元素代表了它的值，block 自身是表达式，表达式可以出现在哪儿，block 就能出现在哪儿。<br>block 内部的定义只有在 block 内部是可见的，外部不可见。而外部的定义只要没有在内部重新被定义，那么内部可以直接使用外部的定义。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> x = <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(y: <span class="type">Int</span>) = y + <span class="number">1</span></div><div class="line"><span class="keyword">val</span> result = &#123;</div><div class="line">  <span class="keyword">val</span> x = f(<span class="number">3</span>)</div><div class="line">  x * x</div><div class="line">&#125; + x <span class="comment">// result = 16</span></div></pre></td></tr></table></figure></p>
<p>除非定义在 block 内部被遮蔽 shadow 了，它都是可见的。因此，可以通过清除多余的变量来使程序变得简洁，sqrt 可以简化如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sqrtIter</span></span>(guess: <span class="type">Double</span>): <span class="type">Double</span> =</div><div class="line">    <span class="keyword">if</span> (isGoodEnough(guess)) guess</div><div class="line">    <span class="keyword">else</span> sqrtIter(improve(guess))</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isGoodEnough</span></span>(guess: <span class="type">Double</span>) =</div><div class="line">    abs(guess * guess - x) / x &lt; <span class="number">0.001</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">improve</span></span>(guess: <span class="type">Double</span>) =</div><div class="line">    (guess + x / guess) / <span class="number">2</span></div><div class="line"></div><div class="line">  sqrtIter(<span class="number">1.0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果一个表达式太长，通常会将表达式写成多行，但是：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">someLongExpression</div><div class="line">+ someOtherExpression</div><div class="line"></div><div class="line"><span class="comment">// 相当于</span></div><div class="line">someLongExpression;</div><div class="line">+ someOtherExpression</div></pre></td></tr></table></figure></p>
<p>通常会被当做是两个表达式，可以通过加小括号或者使+放在第一行来告诉 Scala，这个表达式还没有结束，如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(someLongExpression</div><div class="line">+ someOtherExpression)</div><div class="line"></div><div class="line">someLongExpression +</div><div class="line">someOtherExpression</div></pre></td></tr></table></figure></p>
<h3 id="Tail-Recursion-尾递归"><a href="#Tail-Recursion-尾递归" class="headerlink" title="Tail Recursion 尾递归"></a>Tail Recursion 尾递归</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">	<span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line"><span class="comment">// rewrite</span></div><div class="line">gcd(<span class="number">14</span>, <span class="number">21</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="number">21</span> == <span class="number">0</span>) <span class="number">14</span> <span class="keyword">else</span> gcd(<span class="number">21</span>, <span class="number">14</span> % <span class="number">21</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="literal">false</span>) <span class="number">14</span> <span class="keyword">else</span> gcd(<span class="number">21</span>, <span class="number">14</span> % <span class="number">21</span>)</div><div class="line">→ gcd(<span class="number">21</span>, <span class="number">14</span> % <span class="number">21</span>)</div><div class="line">→ gcd(<span class="number">21</span>, <span class="number">14</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="number">14</span> == <span class="number">0</span>) <span class="number">21</span> <span class="keyword">else</span> gcd(<span class="number">14</span>, <span class="number">21</span> % <span class="number">14</span>)</div><div class="line">→→ gcd(<span class="number">14</span>, <span class="number">7</span>)</div><div class="line">→→ gcd(<span class="number">7</span>, <span class="number">0</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="number">0</span> == <span class="number">0</span>) <span class="number">7</span> <span class="keyword">else</span> gcd(<span class="number">0</span>, <span class="number">7</span> % <span class="number">0</span>)</div><div class="line">→ <span class="number">7</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</div><div class="line"><span class="comment">// rewrite</span></div><div class="line">factorial(<span class="number">4</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="number">4</span> == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">4</span> * factorial(<span class="number">4</span> - <span class="number">1</span>)</div><div class="line">→→ <span class="number">4</span> * factorial(<span class="number">3</span>)</div><div class="line">→→ <span class="number">4</span> * (<span class="number">3</span> * factorial(<span class="number">2</span>))</div><div class="line">→→ <span class="number">4</span> * (<span class="number">3</span> * (<span class="number">2</span> * factorial(<span class="number">1</span>)))</div><div class="line">→→ <span class="number">4</span> * (<span class="number">3</span> * (<span class="number">2</span> * (<span class="number">1</span> * factorial(<span class="number">0</span>)))</div><div class="line">→→ <span class="number">4</span> * (<span class="number">3</span> * (<span class="number">2</span> * (<span class="number">1</span> * <span class="number">1</span>)))</div><div class="line">→→ <span class="number">120</span></div></pre></td></tr></table></figure>
<p>两个函数的区别，前者不停地摆动，<code>gcd(14,21) -&gt; gcd(21,14) -&gt; gcd(14,7) -&gt; gcd(7,0)</code>,但是总会重新变成对gcd的调用；后者中，每隔几步，我们都会增加一个新的元素到表达式中，表达式越来越长，直到简化到最后的结果。<br><strong>尾递归tail recursion</strong><br>一个函数在最后一步的时候调用它<strong>自己</strong>，而不能是自己去其他操作的混合操作，这样，这个函数的栈帧 stack frame 可以被重用，被称为尾递归。gcd 函数属于尾递归，而 factorial 函数不属于尾递归。<em>尾递归的判断标准是函数运行最后一步是否调用自身，而不是是否在函数的最后一行调用自身。</em></p>
<blockquote>
<p>function story() {<br>从前有座山，山上有座庙，庙里有个老和尚，一天老和尚对小和尚讲故事：story() // 尾递归，进入下一个函数不再需要上一个函数的环境了，得出结果以后直接返回。<br>}<br>function story() {<br>从前有座山，山上有座庙，庙里有个老和尚，一天老和尚对小和尚讲故事：story()，小和尚听了，找了块豆腐撞死了 // 非尾递归，下一个函数结束以后此函数还有后续，所以必须保存本身的环境以供处理返回值。<br>}</p>
<p>来源<br>作者：酿泉<br>链接：<a href="http://www.zhihu.com/question/20761771/answer/23254340" target="_blank" rel="external">http://www.zhihu.com/question/20761771/answer/23254340</a></p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通递归调用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// 尾递归调用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial2</span></span>(n:<span class="type">Int</span>, result:<span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) result <span class="keyword">else</span> factorial2(n<span class="number">-1</span>, result * n)</div><div class="line"></div><div class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></div><div class="line">factorial2(<span class="number">5</span>,<span class="number">1</span>) <span class="comment">// 120</span></div><div class="line"></div><div class="line"><span class="comment">// 普通递归调用</span></div><div class="line">function f(x) &#123;</div><div class="line">   <span class="keyword">if</span> (x === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   <span class="keyword">return</span> <span class="number">1</span> + f(x<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 尾递归调用</span></div><div class="line">function f(x) &#123;</div><div class="line">   <span class="keyword">if</span> (x === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   <span class="keyword">return</span> f(x<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><h3 id="Higher-Order-Functions-高阶函数"><a href="#Higher-Order-Functions-高阶函数" class="headerlink" title="Higher-Order Functions 高阶函数"></a>Higher-Order Functions 高阶函数</h3><p>函数式编程语言把函数看成是 <strong>第一等值first-class value</strong>，也就是说，函数可以被当成参数传递给一个函数或者当成一个结果返回。而将函数当成参数传给另一个函数，或者将函数当做结果返回被称之为高阶函数。<br>函数类型：<br>使用<code>A =&gt; B</code>来表示函数类型，它表示，这个函数接受一个参数类型 A，并且返回结果是类型 B。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (a &gt; b) <span class="number">0</span></div><div class="line">  <span class="keyword">else</span> f(a) + sum(f, a+<span class="number">1</span>, b)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumInt</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(id, a, b)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumCube</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(cube, a, b)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumFact</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(fact, a, b)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">id</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = x</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = x * x * x</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> x * fact(x<span class="number">-1</span>)</div><div class="line"></div><div class="line">sumInt(<span class="number">0</span>,<span class="number">2</span>)</div><div class="line">sumCube(<span class="number">0</span>,<span class="number">2</span>)</div><div class="line">sumFact(<span class="number">0</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>但是，这样会有一个问题，我们创建了很多小的函数，如 id、cube、fact，这样会显得程序很臃肿，因此介绍函数字面量 function literal，又被称为<strong>匿名函数 anonymous function</strong>。例如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (x: Int)是函数的参数，x*x*x是函数体</span></div><div class="line"><span class="comment">// 其中，参数的类型可以省略，因为编辑器可以根据上下文自动推断出类型</span></div><div class="line">(x: <span class="type">Int</span>) =&gt; x * x * x</div><div class="line"><span class="comment">// same as</span></div><div class="line">x =&gt; x * x * x</div><div class="line"><span class="comment">// 接收多个参数的函数</span></div><div class="line">(x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y</div><div class="line"><span class="comment">// same as</span></div><div class="line">(x, y) =&gt; x + y</div></pre></td></tr></table></figure></p>
<p>匿名函数是一种语法糖，可以让程序更加好写，<code>(x1: T1, …, xn: Tn) =&gt; E</code> 可以使用def来定义：<br><code>{ def f(x1: T1, …, xn: Tn) = E; f }</code>。</p>
<h3 id="Currying-柯西里化"><a href="#Currying-柯西里化" class="headerlink" title="Currying 柯西里化"></a>Currying 柯西里化</h3><p>函数返回值为函数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 接收参数是一个函数，返回值也是一个函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>) : (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sumF</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) : <span class="type">Int</span> =</div><div class="line">    <span class="keyword">if</span> (a &gt; b) <span class="number">0</span></div><div class="line">    <span class="keyword">else</span> f(a) + sumF(a + <span class="number">1</span>, b)</div><div class="line">  sumF</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 上面代码可以改写</span></div><div class="line"><span class="comment">// 这里就没有了重复的参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumInts</span> </span>= sum(x =&gt; x)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumCubes</span> </span>= sum(x =&gt; x * x * x)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumFactorials</span> </span>= sum(fact)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="number">1</span></div><div class="line">  <span class="keyword">else</span> x * fact(x - <span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">sumCubes(<span class="number">1</span>, <span class="number">10</span>) + sumFactorials(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 267634641</span></div><div class="line"></div><div class="line"><span class="comment">// 可以直接跳过定义辅助函数</span></div><div class="line">sum(x =&gt; x)(<span class="number">1</span>, <span class="number">10</span>) <span class="comment">// 55</span></div></pre></td></tr></table></figure></p>
<p>转化为多参数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用语法糖，进一步改写</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>)(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (a &gt; b) <span class="number">0</span> <span class="keyword">else</span> f(a) + sum(f)(a + <span class="number">1</span>, b)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/121639283.png" alt="多个参数" title="多个参数"></p>
<p>那么，上面 sum 函数的类型是什么？<br>类型为 <code>(Int =&gt; Int) =&gt; (Int, Int) =&gt; Int</code>，函数类型为右结合，也就是说，<code>Int =&gt; Int =&gt; Int</code> 相当于 <code>Int =&gt; (Int =&gt; Int)</code>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapReduce</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, combine: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>, zero: <span class="type">Int</span>)(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">  <span class="keyword">if</span> (a&gt;b) zero</div><div class="line">  <span class="keyword">else</span> combine(f(a), mapReduce(f, combine, zero)(a+<span class="number">1</span>, b))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>)(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = mapReduce(f, (x, y) =&gt; x * y, <span class="number">1</span>)(a, b)</div><div class="line"></div><div class="line">product(x =&gt; x)(<span class="number">1</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>当 mapReduce函数 与 product 函数中间出现其他函数定义的时候，可能会报错：<br>multiple markers at this line<br>- forward reference extends over definition of value res\$0<br>- forward reference extends over definition of value res\$1</p>
<h3 id="Example-Finding-Fixed-Points-例子：找不动点"><a href="#Example-Finding-Fixed-Points-例子：找不动点" class="headerlink" title="Example Finding Fixed Points 例子：找不动点"></a>Example Finding Fixed Points 例子：找不动点</h3><p>不动点：x = f(x) 如果一个 x 的值满足前面的等式，那么可以看成是这个函数的不动点。<br>因此，我们可以通过找不动点的方法来实现 sqrt。sqrt(x) 是方程 y =&gt; x / y 的不动点，但是这样计算不能够收敛于一点，于是我们通过与原值取平均的方法来使其收敛，并且可以将其抽取出一个函数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.math._</div><div class="line"></div><div class="line"><span class="keyword">val</span> tolerance = <span class="number">0.0001</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isCloseEnough</span></span>(x: <span class="type">Double</span>, y: <span class="type">Double</span>) =</div><div class="line">  abs((x - y) / x) / x &lt; tolerance</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixedPoint</span></span>(f: <span class="type">Double</span> =&gt; <span class="type">Double</span>)(firstGuess: <span class="type">Double</span>) = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">iterate</span></span>(guess: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</div><div class="line">    println(<span class="string">s"guess = <span class="subst">$guess</span>"</span>)</div><div class="line">    <span class="keyword">val</span> next = f(guess)</div><div class="line">    <span class="keyword">if</span> (isCloseEnough(guess, next)) next</div><div class="line">    <span class="keyword">else</span> iterate(next)</div><div class="line">  &#125;</div><div class="line">  iterate(firstGuess)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//fixedPoint(x =&gt; 1 + x/2)(1)</span></div><div class="line"><span class="comment">//fixedPoint(x =&gt; cos(x))(1)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">averageDamp</span></span>(f: <span class="type">Double</span> =&gt; <span class="type">Double</span>)(x: <span class="type">Double</span>) = (x + f(x)) / <span class="number">2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = fixedPoint(averageDamp(y =&gt; x / y))(<span class="number">1.0</span>)</div><div class="line"></div><div class="line">sqrt(<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<h3 id="Scala-Syntax-Summary-语法总结"><a href="#Scala-Syntax-Summary-语法总结" class="headerlink" title="Scala Syntax Summary 语法总结"></a>Scala Syntax Summary 语法总结</h3><p>扩展的巴科斯范式 <strong>EBNF(Extended Backus-Naur form)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- | 表示可选</div><div class="line">- [...] 表示选择（0 或 1）</div><div class="line">- &#123;...&#125; 表示反复（0 或更多）</div></pre></td></tr></table></figure></p>
<p>Types 类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Type			= SimpleType | FunctionType</div><div class="line">FunctionType	= SimpleType &apos;=&gt;&apos; Type</div><div class="line">				| &apos;(&apos; [Types] &apos;)&apos; &apos;=&gt;&apos; Type</div><div class="line">SimpleType		= Ident</div><div class="line">Types			= Type &#123;&apos;,&apos; Type&#125;</div></pre></td></tr></table></figure></p>
<p>A type can be:</p>
<ul>
<li>A <code>numeric</code> type: Int, Double (and Byte, Short, Char, Long, Float)</li>
<li>The <code>Boolean</code> type with the value true and false</li>
<li>The <code>String</code> type</li>
<li>A <code>function</code> type, like Int =&gt; Int, (Int, Int) =&gt; Int</li>
</ul>
<p>Expressions 类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Expr		= InfixExpr | FunctionExpr</div><div class="line">			| if &apos;(&apos; Expr &apos;)&apos; Expr else Expr</div><div class="line">InfixExpr 	= PrefixExpr | InfixExpr Operator InfixExpr</div><div class="line">Operator 	= ident</div><div class="line">PrefixExpr 	= [&apos;+&apos; | &apos;-&apos; | &apos;!&apos; | &apos;~&apos; ] SimpleExpr</div><div class="line">SimpleExpr 	= ident | literal | SimpleExpr &apos;.&apos; ident</div><div class="line">			| Block</div><div class="line">FunctionExpr = Bindings &apos;=&gt;&apos; Expr</div><div class="line">Bindings 	= ident [&apos;:&apos; SimpleType ]</div><div class="line">			| &apos;(&apos; [ Binding &#123;&apos;,&apos; Binding &#125;] &apos;)&apos;</div><div class="line">Binding 	= ident [&apos;:&apos; Type ]</div><div class="line">Block 		= &apos;&#123;&apos; &#123; Def &apos;;&apos;&#125; Expr &apos;&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>An expression can be:</p>
<ul>
<li>An <code>identifier</code> such as x, isGoodEnough</li>
<li>A <code>literal</code>, like 0, 1.0, “abc”</li>
<li>A <code>function application</code>, like sqrt(x)</li>
<li>An <code>operator application</code>, like -x, y + x</li>
<li>A <code>selection</code>, like math.abs</li>
<li>A <code>conditional expression</code>, like if (x &lt; 0) -x else x</li>
<li>A <code>block</code>, like { val x = math.abs(y) ; x * 2 }</li>
<li>An <code>anonymous function</code>, like x =&gt; x + 1</li>
</ul>
<p>Definitions<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Def			= FunDef | ValDef</div><div class="line">FunDef		= def ident &#123;‘(’ [ Parameters ] ‘)’&#125;</div><div class="line">			[‘:’ Type ] ‘=’ Expr</div><div class="line">ValDef 		= val ident [‘:’ Type ] ‘=’ Expr</div><div class="line">Parameter 	= ident ‘:’ [ ‘=&gt;’ ] Type</div><div class="line">Parameters 	= Parameter &#123;‘,’ Parameter &#125;</div></pre></td></tr></table></figure></p>
<p>A definition can be:</p>
<ul>
<li>A function definition, like def square(x: Int) = x * x</li>
<li>A value definition, like val y = square(2)</li>
</ul>
<p>A parameter can be:</p>
<ul>
<li>A call-by-value parameter, like (x: Int)</li>
<li>A call-by-name parameter, like (y: =&gt; Double)</li>
</ul>
<h3 id="Functions-and-Data-函数和数据"><a href="#Functions-and-Data-函数和数据" class="headerlink" title="Functions and Data 函数和数据"></a>Functions and Data 函数和数据</h3><p>类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样的语句定义了两个实体：</p>
<ul>
<li>一个新的<strong>类型</strong>，名字叫做 Rational</li>
<li>一个<strong>构造器</strong>Rational，用来创建这种类型的元素</li>
</ul>
<p>对象：<br>一个类型在程序中本质上是一系列的值，而属于一个类型的值称作对象，并且使用 <code>new</code> 操作符和类的构造器来创建一个对象。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>定义类中的函数称之为方法。</p>
<h3 id="More-Fun-With-Rationals-更多关于有理数的内容"><a href="#More-Fun-With-Rationals-更多关于有理数的内容" class="headerlink" title="More Fun With Rationals 更多关于有理数的内容"></a>More Fun With Rationals 更多关于有理数的内容</h3><p>通过选择不同的数据实现方式，但是使用者不会察觉到的这种能力，我们称之为<strong>数据抽象 data abstraction</strong>。<br><strong>自我引用 self reference</strong><br>在一个类的内部，this 关键字代表了当前方法正在执行的那个对象上。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> g = gcd(x, y)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x / g</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y / g</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">less</span></span>(another: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">this</span>.numer * another.denom &lt; <span class="keyword">this</span>.denom * another.numer</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(another: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.less(another)) another <span class="keyword">else</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(another: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">new</span> <span class="type">Rational</span>(</div><div class="line">      numer * another.denom + denom * another.numer,</div><div class="line">      denom * another.denom)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">neg</span> </span>= <span class="keyword">new</span> <span class="type">Rational</span>(-numer, denom)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sub</span></span>(another: <span class="type">Rational</span>) = add(another.neg)</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>=</div><div class="line">    numer + <span class="string">"/"</span> + denom</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以使用 <code>require</code> 来限定构建一个新的对象必须满足的条件，如果不满足这样的条件，提示错误信息，我们称为 <code>前提precondition</code>。<br>除了 require 之外，我们还有 <code>assert</code> 函数，assert 同样接收一个条件和一个可选的提示信息。但是不同的是，assert 抛出的是 AssertionError，而 require 抛出的是 IllegalArgumentException。<br>这表明，它们使用的目的不同：</p>
<ul>
<li>require 被用来强制规定一个函数调用者的先决条件</li>
<li>assert 被用来检验函数自身的代码</li>
</ul>
<p>在 Scala 中，类隐性地定义了一个构造器，称之为类的<strong>主构造器 primary constructor</strong>。主构造器取得类的所有参数，并且执行类体内的全部语句。<br>像 Java 一样，我们可以设置不同的构造器，实现如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(x: <span class="type">Int</span>) = <span class="keyword">this</span>(x, <span class="number">1</span>)</div><div class="line">  </div><div class="line">  ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>this 用作函数名的时候表示这是类的另一个构造器，并且后面调用了类的主构造器。</p>
<h3 id="Evaluation-and-Operators-求值与操作符"><a href="#Evaluation-and-Operators-求值与操作符" class="headerlink" title="Evaluation and Operators 求值与操作符"></a>Evaluation and Operators 求值与操作符</h3><p><code>求值evaluation</code><br>类的定义如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">x1, ..., xm</span>) </span>&#123; ... <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(y1, ..., yn) = b ... &#125;</div><div class="line"></div><div class="line"><span class="comment">// 下面表达式的值如何计算？</span></div><div class="line"><span class="keyword">new</span> <span class="type">C</span>(v1, ..., vm).f(w1, ..., wn)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/121747439.png" alt="答案" title="答案"><br><code>/</code> 代表，用左边的值替换表达式中右边的值。<br>Example:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>).numer</div><div class="line">→ [<span class="number">1</span>/x, <span class="number">2</span>/y][][<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)/<span class="keyword">this</span>] x</div><div class="line">= <span class="number">1</span> <span class="comment">// 1 for x</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>).less(<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">2</span>, <span class="number">3</span>))</div><div class="line">→ [<span class="number">1</span>/x, <span class="number">2</span>/y][<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">2</span>, <span class="number">3</span>)/that][<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)/<span class="keyword">this</span>] <span class="keyword">this</span>.numer * that.denom &lt; that.numer * <span class="keyword">this</span>.denom</div><div class="line">= <span class="keyword">new</span> <span class="type">Ration</span>(<span class="number">1</span>, <span class="number">2</span>).numer * <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">2</span>, <span class="number">3</span>).denom &lt; <span class="keyword">new</span> <span class="type">Ration</span>(<span class="number">2</span>, <span class="number">3</span>).numer * <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>).denom</div><div class="line">→→ <span class="number">1</span> * <span class="number">3</span> &lt; <span class="number">2</span> * <span class="number">2</span></div><div class="line">→→ <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p><code>操作符operator</code><br>任何接收一个参数的方法都可以想一个插入的操作符一样使用，例如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r add s							r.add(s)</div><div class="line">r less s	<span class="comment">/* in place of */</span>	r.less(s)</div><div class="line">r max s							r.max(s)</div></pre></td></tr></table></figure></p>
<p>在Scala中，操作符可以当做标识符，因此，标示符可以是：</p>
<ul>
<li>数字、字母组合：以字母开头，后面跟着一系列的字母或者数字</li>
<li>符号：以一个操作符开头，后面跟着其他的操作符</li>
<li>下划线符号 ‘_’ 被当做一个字母</li>
<li>数字、字母组合的标识符同样可以下划线加操作符结尾</li>
</ul>
<p>以下操作符都是合法的：<br>x1<br>*<br>+?%&amp;<br>vector<em>++<br>counter</em>=<br>由于在Scala中，前置的操作符，例如负数操作符 <code>-</code> 和中间的操作符，例如减号操作符 <code>-</code> 是不同的，因此需要进行特殊的转换，使用前缀 <code>unary_</code> 加上操作符来表示。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">&lt;</span> </span>(that: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">this</span>.numer * that.denom &lt; <span class="keyword">this</span>.denom * that.numer</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(that: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> &lt; that) that <span class="keyword">else</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">+</span> </span>(another: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">new</span> <span class="type">Rational</span>(</div><div class="line">      numer * another.denom + denom * another.numer,</div><div class="line">      denom * another.denom)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unary_-</span> </span>: <span class="type">Rational</span> = <span class="keyword">new</span> <span class="type">Rational</span>(-numer, denom)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">-</span> </span>(another: <span class="type">Rational</span>) = <span class="keyword">this</span> + -another</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是， 如果一个方法以符号结尾，那么它与返回值: 之间必须要有空格隔开，否则会报错，因为冒号也是一个合法的符号，编译器会把冒号也看成是方法名的一部分。<br>操作符的优先级：<br>取决于它的第一个字符，如下表优先级依次变大：<br>(all letters)<br>|<br>^<br>&amp;<br>&lt; &gt;<br>= !<br>:<br>+ -<br>* / %<br>(all other special characters)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a + b ^? c ?^ d less a ==&gt; b | c</div><div class="line">=&gt;</div><div class="line">a + b ^? (c ?^ d) less a ==&gt; b | c</div><div class="line">(a + b) ^? (c ?^ d) less a ==&gt; b | c</div><div class="line">(a + b) ^? (c ?^ d) less (a ==&gt; b) | c</div><div class="line">((a + b) ^? (c ?^ d)) less (a ==&gt; b) | c</div><div class="line">((a + b) ^? (c ?^ d)) less ((a ==&gt; b) | c)</div></pre></td></tr></table></figure></p>
<h3 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h3><p>自己编写 test 测试，内容的格式如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">test(<span class="string">"adding ints"</span>) &#123;</div><div class="line">	assert(<span class="number">1</span> + <span class="number">2</span> === <span class="number">4</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试名称叫做 add ints，asser t表示尝试进行 === 左边的操作，看是否与右边的结果相等，不相等则测试不通过，输出测试名称，以及测试没有通过的原因。如果使用 == 则只报错不输出原因。<br>如果暂时不需要对写好的某个测试犯法执行，那么将 test 改成 ignore，就不会执行。<br>我们可能需要给同样的测试对象实现不同的方法，一种办法是重复创建多次，更简便的方法是创建一个与测试分离的特征 trait 中，这样当我们创建 trait 实例的时候我们可以访问内部的所有变量。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TestSets</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> s1 = singletonSet(<span class="number">1</span>)</div><div class="line">    <span class="keyword">val</span> s2 = singletonSet(<span class="number">2</span>)</div><div class="line">    <span class="keyword">val</span> s3 = singletonSet(<span class="number">3</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="type">TestSets</span> &#123;</div><div class="line">    assert(contains(s1, <span class="number">2</span>), <span class="string">"Singleton"</span>) <span class="comment">// FunSets.contains($anon.this.s1, 2) was false Singleton</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>未完，接<a href="http://hijacking.cn/2016/12/23/Coursera-FP-in-Scala-Note-Part2/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/">http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此笔记是在学习 Coursera 上 &lt;a href=&quot;https://www.coursera.org/learn/progfun1/home&quot; title=&quot;课程链接&quot;&gt;&lt;em&gt;Functional Programming Principles in Scala&lt;/em&gt;&lt;/a&gt; 课程时所整理，方便今后查阅。&lt;/p&gt;
&lt;h2 id=&quot;Getting-Started&quot;&gt;&lt;a href=&quot;#Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;Getting Started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;h3 id=&quot;SBT-相关知识以及作业提交&quot;&gt;&lt;a href=&quot;#SBT-相关知识以及作业提交&quot; class=&quot;headerlink&quot; title=&quot;SBT 相关知识以及作业提交&quot;&gt;&lt;/a&gt;SBT 相关知识以及作业提交&lt;/h3&gt;&lt;p&gt;在 sbt 的术语中，基础目录或者是项目的根目录，指的是包含项目的目录。而 &lt;code&gt;build.sbt&lt;/code&gt; 就是基础目录。&lt;br&gt;src的目录结构：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;src/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  main/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resources/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;files to include in main jar here&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    scala/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;main Scala sources&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    java/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;main Java sources&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resources&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;files to include in test jar here&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    scala/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;test Scala sources&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    java/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;test Java sources&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Other directories in src/ will be ignored. Additionally, all hidden&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;directories will be ignored.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;project/&lt;/code&gt; 文件夹下也可能有 &lt;code&gt;.sbt&lt;/code&gt;文件，但是它们与基础目录的 sbt 文件作用不同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据处理" scheme="http://hijacking.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Scala" scheme="http://hijacking.cn/tags/Scala/"/>
    
      <category term="Coursera" scheme="http://hijacking.cn/tags/Coursera/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Blog 同步备份</title>
    <link href="http://hijacking.cn/2016/12/06/Hexo-Backup/"/>
    <id>http://hijacking.cn/2016/12/06/Hexo-Backup/</id>
    <published>2016-12-06T12:21:44.000Z</published>
    <updated>2016-12-18T04:23:20.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备份电脑A："><a href="#备份电脑A：" class="headerlink" title="备份电脑A："></a>备份电脑A：</h2><p>1.在 Github 上新建一个仓库，例如 blog。<br>2.上传电脑A本地Hexo博客的源文件到 Github 的 blog 仓库中：<br>1) 删除根目录和主题目录下的 <code>.git</code> 文件夹<br>2) 修改根目录下的 <code>.gitignore</code> 文件为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.deploy*/</div><div class="line">public/</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>3) 依次执行以下指令，同步源文件至 Github：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"创建Hexo"</span> <span class="comment"># 更新信息</span></div><div class="line">$ git git remote add origin git@github.com:Username/Reponame</div><div class="line">$ git push -u origin master</div><div class="line">$ git pull -rebase origin master <span class="comment"># 如果出现冲突先执行这条语句</span></div></pre></td></tr></table></figure>
<p>即可将博客源文件上传到 Github。</p>
<h2 id="同步电脑B："><a href="#同步电脑B：" class="headerlink" title="同步电脑B："></a>同步电脑B：</h2><p>1.安装 Git。<br>2.安装 Node.js。<br>3.安装 Hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>4.选择一个同步到本地的文件夹，执行 <code>git clone</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:Username/Reponame</div></pre></td></tr></table></figure>
<p>到这里，两台电脑的 Hexo 环境一致，Hexo 博客源文件也一样。</p>
<h2 id="两台电脑同步更新博客："><a href="#两台电脑同步更新博客：" class="headerlink" title="两台电脑同步更新博客："></a>两台电脑同步更新博客：</h2><p>1.先检查<code>git pull</code>，将本地博客源文件更新至最新版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure>
<p>2.新建或修改博客内容，进行本机预览等操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new &lt;新的博客&gt;</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>3.同步 Hexo 源文件至 Github：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"更新描述"</span></div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>4.最后生成 Hexo 静态博客文件并部署。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文参考<a href="http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/" title="原文链接" target="_blank" rel="external">原文</a>，并重新整理，转载请注明出处：<a href="http://hijacking.cn/2016/12/06/Hexo-Backup/">http://hijacking.cn/2016/12/06/Hexo-Backup/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;备份电脑A：&quot;&gt;&lt;a href=&quot;#备份电脑A：&quot; class=&quot;headerlink&quot; title=&quot;备份电脑A：&quot;&gt;&lt;/a&gt;备份电脑A：&lt;/h2&gt;&lt;p&gt;1.在 Github 上新建一个仓库，例如 blog。&lt;br&gt;2.上传电脑A本地Hexo博客的源文件到 Github 的 blog 仓库中：&lt;br&gt;1) 删除根目录和主题目录下的 &lt;code&gt;.git&lt;/code&gt; 文件夹&lt;br&gt;2) 修改根目录下的 &lt;code&gt;.gitignore&lt;/code&gt; 文件为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.deploy*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://hijacking.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0 - 读书笔记 (1)</title>
    <link href="http://hijacking.cn/2016/07/01/Effective-OC-Note-Part1/"/>
    <id>http://hijacking.cn/2016/07/01/Effective-OC-Note-Part1/</id>
    <published>2016-07-01T11:15:39.000Z</published>
    <updated>2016-12-18T07:25:58.850Z</updated>
    
    <content type="html"><![CDATA[<p>此笔记是在阅读<a href="http://item.jd.com/11402853.html" title="京东链接" target="_blank" rel="external"><em>《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》</em></a> 时所整理，方便今后查阅。</p>
<h2 id="熟悉OC"><a href="#熟悉OC" class="headerlink" title="熟悉OC"></a>熟悉OC</h2><h3 id="了解OC语言的起源"><a href="#了解OC语言的起源" class="headerlink" title="了解OC语言的起源"></a>了解OC语言的起源</h3><h3 id="在类的头文件中尽量少引入其他头文件"><a href="#在类的头文件中尽量少引入其他头文件" class="headerlink" title="在类的头文件中尽量少引入其他头文件"></a>在类的头文件中尽量少引入其他头文件</h3><p>尽量晚地#import需要的头文件，使用@class进行『向前声明』（forward declaring）。<br>如果两个类在各自头文件中引入对方的头文件，则会导致『循环引用』（chicken-and-egg situation）。虽然#import不会像#include导致死循环，但是两个类里有一个无法被正确编译。</p>
<p>最好将协议单独放在一个头文件中，如果把协议放在某个大的头文件里，那么只要引入此协议，就必定会引入那个头文件中的全部内容。<br>然有些协议，例如委托协议（delegate protocol）就不用单独写一个头文件。</p>
<h3 id="多用字面量语法，少用与之等价的方法"><a href="#多用字面量语法，少用与之等价的方法" class="headerlink" title="多用字面量语法，少用与之等价的方法"></a>多用字面量语法，少用与之等价的方法</h3><p>字面量语法（literal syntax），一种语法糖（syntactic sugar）</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSNumber</span> *someNumber = [<span class="built_in">NSNumber</span> numberWithInt:<span class="number">1</span>];</div></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSNumber</span> *someNumber = @<span class="number">1</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>还可以使用：<br><strong>字面量字符串</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *someString = @“Effective Objective-C <span class="number">2.0</span>”;</div></pre></td></tr></table></figure>
<p><strong>字面量数值</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSNumber</span> *floatNumber = @<span class="number">2.5</span>f;</div></pre></td></tr></table></figure>
<p><strong>字面量数组</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *animals = @[@“cat”, @“dog”, @“mouse”, @“badger”];</div><div class="line"><span class="built_in">NSString</span> *dog = animals[<span class="number">1</span>]; <span class="comment">// 取下标操作，subscripting</span></div></pre></td></tr></table></figure>
<p>使用字面量语法更加安全，因为一旦出现nil，便会抛出异常。<br><strong>字面量字典</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> *personData = @&#123;@“firstName” : @“Matt”, @“lastName” : @“Galloway”, @“age” : @<span class="number">28</span>&#125;;</div><div class="line"><span class="built_in">NSString</span> *lastName = personData[@“lastName”];</div></pre></td></tr></table></figure>
<p><strong>可变数组与字典</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mutableArray[<span class="number">1</span>] = @“dog”;</div><div class="line">mutableDictionary[@“lastName”] = @“Galloway”;</div></pre></td></tr></table></figure>
<p><strong>局限</strong><br>使用字面量语法创造出来的对象都是不可变的，若想变成可变版本，需要复制一份：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableArray</span> *<span class="keyword">mutable</span> = [@[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, @<span class="number">4</span>, @<span class="number">5</span>] mutableCopy];</div></pre></td></tr></table></figure>
<h3 id="多使用类型常量，少用-define-预处理指令"><a href="#多使用类型常量，少用-define-预处理指令" class="headerlink" title="多使用类型常量，少用#define 预处理指令"></a>多使用类型常量，少用#define 预处理指令</h3><p>将</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define ANIMATION_DERATION 0.3</span></div></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> kAnimationDuration = <span class="number">0.3</span>;</div></pre></td></tr></table></figure>
<p>此方法包含类型信息，清楚地描述了常量的含义。<br>并且注意命名方式，若常量局限于某个编译单元（.m文件）之内，则在前面加字母k；若常量在类之外可见，则通常以类名为前缀。<br>注意，变量一定要同时用static和const来声明。const用来保证变量不能被修改，而static意味着该变量仅在定义此变量的编译单元中可见。假如不加static，那么编译器会创建一个external symbol。</p>
<p>有时候需要对外公开某个常量。比如通知中心派发通知的时候，需要给通知一个名称。<br>此类常量需放在『全局符号表』（global symbol table）中，以便可以在编译单元之外使用。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In the header file</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant;</div><div class="line"></div><div class="line"><span class="comment">// In the implementation file</span></div><div class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant = <span class="string">@"VALUE"</span>;</div></pre></td></tr></table></figure>
<p>在头文件中声明，在实现文件中定义。并且，命名时应该用与之相关的类名做前缀。<br>如上例需要对可见的话</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// EOCAnimatedView.h</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> EOCAnimatedViewAnimationDuration;</div><div class="line"></div><div class="line"><span class="comment">// EOCAnimatedView.m</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> EOCAnimatedViewAnimationDuration = <span class="number">0.3</span>;</div></pre></td></tr></table></figure>
<h3 id="用枚举表示状态、选项、状态码"><a href="#用枚举表示状态、选项、状态码" class="headerlink" title="用枚举表示状态、选项、状态码"></a>用枚举表示状态、选项、状态码</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> EOCConnectionState &#123;</div><div class="line">	EOCConnectionStateDisconnected,</div><div class="line">	EOCConnectionStateConnecting,</div><div class="line">	EOCConnectionStateConnected,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> EOCConnectionState EOCConnectionState;</div></pre></td></tr></table></figure>
<p>可以指定底层数据类型（underlying type）来保存枚举类型，可以向前声明枚举变量。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> EOCConnectionStateConnectionState : <span class="built_in">NSInteger</span> &#123; <span class="comment">/* ... */</span> &#125;</div></pre></td></tr></table></figure>
<p>Foundation框架中定义了一些辅助的宏，可以用这些宏来定义枚举值。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUUnteger</span>, EOCConnectionState) &#123;</div><div class="line">	EOCConnectionStateDisconnected,</div><div class="line">	EOCConnectionStateConnecting,</div><div class="line">	EOCConnectionStateConnected,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, EOCPermittedDirection) &#123;</div><div class="line">	EOCPermittedDirectionUP    = <span class="number">1</span>  &lt;&lt;  <span class="number">0</span>,</div><div class="line">	EOCPermittedDirectionDown  = <span class="number">1</span>  &lt;&lt;  <span class="number">1</span>,</div><div class="line">	EOCPermittedDirectionLeft  = <span class="number">1</span>  &lt;&lt;  <span class="number">2</span>,</div><div class="line">	EOCPermittedDirectionRight = <span class="number">1</span>  &lt;&lt;  <span class="number">3</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>需要以按位或操作来组合枚举时使用NS_OPTIONS，不需要互相组合时，使用NS_ENUM定义。</p>
<h2 id="对象、消息、运行期"><a href="#对象、消息、运行期" class="headerlink" title="对象、消息、运行期"></a>对象、消息、运行期</h2><h3 id="理解『属性』这一概念"><a href="#理解『属性』这一概念" class="headerlink" title="理解『属性』这一概念"></a>理解『属性』这一概念</h3><p>OC对象通常会把所需的数据保存为各种实例变量，实例变量一般通过『存取方法』（access method）来访问。<br>如果使用属性，编译器会自动编写访问这些属性所需的方法（getter、setter），叫做『自动合成』（autosynthesis）。除此之外，还自动向类中添加适当类型的实例变量，并且在属性名前加下划线，作为实例变量的名字。<br>如果使用@dynamic关键字，会告诉编译器，不要自动创建属性所用的实例变量，也不要为其创建存取方法。<br><strong>属性特质</strong></p>
<ol>
<li>原子性<br>如果属性具备nonatomic特质，则不使用同步锁。</li>
<li>读/写权限</li>
</ol>
<ul>
<li>readwrite：拥有getter和setter</li>
<li>readonly：仅拥有getter</li>
</ul>
<ol>
<li>内存管理语义</li>
</ol>
<ul>
<li>assign：设置方法只会执行针对『纯量类型』（scalar type，例如CGFloat或NSInteger等）的简单赋值操作。</li>
<li>strong：定义一种『拥有关系』（owning relationship）。设置方法会先保留新值，并释放旧值，然后再将新值设置上去。</li>
<li>weak：定义一种『非拥有关系』（nonowning relationship）。设置方法既不保留新值，也不释放旧值。在属性所指的对象销毁时，属性值也会清空（nil out）。</li>
<li>unsafe_unretained：语义与assign相同，但是适用于『对象类型』，表达一种『非拥有关系』，当目标对象销毁时，属性值不会自动清空（不安全，unsafe）。</li>
<li>copy：所属关系与strong类似。但设置方法并不保留新值，而是将其『拷贝』。</li>
</ul>
<ol>
<li>方法名<br>可以通过getter\setter=&lt; name &gt;来设置获取方法或者设置方法的方法名。</li>
</ol>
<h3 id="在对象内部尽量直接访问实例变量"><a href="#在对象内部尽量直接访问实例变量" class="headerlink" title="在对象内部尽量直接访问实例变量"></a>在对象内部尽量直接访问实例变量</h3><p>在对象之外访问实例变量时，应该通过属性来做。在对象内部时，建议采用直接访问的形式读取，通过属性来设置。<br>特殊情况：</p>
<ol>
<li>在初始化方法中，应该直接访问实例变量。</li>
<li>在懒加载中，应该使用 『获取方法』来访问属性。</li>
</ol>
<h3 id="理解『对象等同性』这一概念"><a href="#理解『对象等同性』这一概念" class="headerlink" title="理解『对象等同性』这一概念"></a>理解『对象等同性』这一概念</h3><p>某些对象提供了特殊的『等同性判定方法』（equality-checking method）。如isEqualToString，isEqual等。<br>自己创建等同性判定方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)isEqualToPerson:（EOCPerson *）otherPerson &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> == object) <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (![_firstName isEqualToString: otherPerson.firstName])</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">if</span> (![_lastName isEqualToString: otherPerson.lastName])</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">if</span> (_age != otherPerson.age)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] == [object <span class="keyword">class</span>]) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> isEqualToPerson:(EOCPerson *)object];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> isEqual:object];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相同的对象必须具有相同的哈希码，但是两个哈希码相同的对象却未被相同（isEqual 与 hash 方法）。</p>
<h3 id="以『类族模式』隐藏实现细节"><a href="#以『类族模式』隐藏实现细节" class="headerlink" title="以『类族模式』隐藏实现细节"></a>以『类族模式』隐藏实现细节</h3><p>『类族』（class cluster）是一种很有用的模式（pattern），可以隐藏『抽象基类』（abstract base class）背后的实现细节，对外提供一套简单的公共接口。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)isKindOfClass: classObj  <span class="comment">// 判断是否是这个类或者这个类的子类的实例</span></div><div class="line">- (<span class="built_in">BOOL</span>)isMemberOfClass: classObj  <span class="comment">// 判断是否是这个类的实例</span></div></pre></td></tr></table></figure>
<h3 id="在既有类中使用关联对象存放自定义数据"><a href="#在既有类中使用关联对象存放自定义数据" class="headerlink" title="在既有类中使用关联对象存放自定义数据"></a>在既有类中使用关联对象存放自定义数据</h3><p>从对象所属的类中继承一个子类，然后改用子类对象。然而，并非所有情况都可以那么做，有时候类的实例可能由某种机制所创建，而开发者无法令这种机制创建出自己所写的子类实例。这时候可以采用『关联对象』（Associated Object）。<br>例如，想在一个类里同时处理多个警告信息视图，如果能在创建警告视图的时候直接把处理每个按钮的逻辑都写好，那么代码就简洁而清晰多了。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> *EOCMyAlertViewKey = <span class="string">@"EOCMyAlertViewKey"</span>;</div><div class="line">- (<span class="keyword">void</span>)askUserQuestion &#123;</div><div class="line">  <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"Question"</span>   message:<span class="string">@"what do you want to do"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"取消"</span> otherButtonTitles:<span class="string">@"继续"</span>, <span class="literal">nil</span>];</div><div class="line"> <span class="keyword">void</span> (^block)(<span class="built_in">NSInteger</span>) = ^(<span class="built_in">NSInteger</span> buttonIndex) &#123;</div><div class="line">  <span class="keyword">if</span> (buttonIndex == <span class="number">0</span>) &#123;</div><div class="line">     [<span class="keyword">self</span> doCancel];</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">     [<span class="keyword">self</span> doContinue];</div><div class="line">  &#125;</div><div class="line"> &#125;;</div><div class="line">  objc_setAssociatedObject(alter, EOCMyAlertViewKey, block, OBJC_ASSOCIATION_COPY);</div><div class="line">[alter show];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex &#123;</div><div class="line">   <span class="keyword">void</span> (^block)(<span class="built_in">NSInteger</span>) = objc_getAssociatedObject(alertView, EOCMyAlertViewKey);</div><div class="line">  block(buttonIndex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，采用该方法的时候块可能要捕捉某些变量，会造成『保留环』（retain cycle）。<br>这种做法只有在其他办法行不通的时候才考虑使用。取代方法是从中继承子类，把块保存为子类中的属性。</p>
<h3 id="理解objc-msgSend的作用"><a href="#理解objc-msgSend的作用" class="headerlink" title="理解objc_msgSend的作用"></a>理解objc_msgSend的作用</h3><p>对象上调用方法在OC中叫做『传递消息』（pass a message）。消息有 名称 和 选择子（selector）。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OC中给对象发送消息</span></div><div class="line"><span class="keyword">id</span> returnValue = [someObject messageName: parameter];</div><div class="line"><span class="comment">// 转化为一条标准的C语言函数调用</span></div><div class="line"><span class="keyword">id</span> returnValue = objc_msgSend(someObject, <span class="keyword">@selector</span>(messageName:), parameter);</div></pre></td></tr></table></figure>
<p>消息由接受者、选择子及参数构成。给某对象『发送消息』（invoke a message）也就相当于在该对象上『调用方法』（call a method）。<br>发送给某对象的全部消息都要由『动态消息派发系统』（dynamic message dispatch system）来处理，该系统会查出对应的方法，并执行其代码。</p>
<h3 id="理解消息转发机制"><a href="#理解消息转发机制" class="headerlink" title="理解消息转发机制"></a>理解消息转发机制</h3><p>当对象接收到无法解读的消息后，就会启动『消息转发』（message forwarding）机制，由此过程告诉对象应该如何处理未知消息。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 控制台如下信息说明 曾向某个对象发送了一条其无法解读的消息，从而启动了消息转发机制，并将此消息发给了NSObject的默认实现</span></div><div class="line">unrecognized selector sent to instance <span class="number">0x87</span>...</div></pre></td></tr></table></figure>
<p>开发者在编写自己的类时，可于转发过程中设置挂钩，用以执行预定的逻辑，而不使应用程序崩溃。</p>
<ul>
<li>消息转发分为两大阶段，第一阶段先征询接收者，所属的类，看其是否能动态添加方法，以处理当前这个『未知的选择子』（unknown selector），叫做『动态方法解析』（dynamic method resolution）。</li>
<li>第二阶段设计『完整的消息转发机制』（full forwarding mechanism）。首先，接收者看看有没有其他对象能处理这条消息，若有，则运行期系统会把消息转给那个对象，消息转发过程结束。若没有『备援的接收者』（replacement receiver），则启动完整的消息转发机制，runtime会把与消息有关的全部细节封装到NSInvocation对象中，再给接收者最后一次机会，令其设法解决当前还未处理的这条消息。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动态方法解析</span></div><div class="line"><span class="comment">// 对象收到无法解读的消息后，首先将调用其所属类的下列类方法</span></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)selector;</div><div class="line"></div><div class="line"><span class="comment">// 备援接收者</span></div><div class="line"><span class="comment">// runtime问接收者，能不能把这条消息转发给其他接收者来处理</span></div><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)selector;</div><div class="line"></div><div class="line"><span class="comment">// 完整的消息转发</span></div><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)invocation;</div></pre></td></tr></table></figure>
<h3 id="用『方法调配技术』测试『黑盒方法』"><a href="#用『方法调配技术』测试『黑盒方法』" class="headerlink" title="用『方法调配技术』测试『黑盒方法』"></a>用『方法调配技术』测试『黑盒方法』</h3><p>方法调配（method swizzling）：与给定选择子名称对应的方法可以在运行期改变。既不需要源代码，也不需要通过继承子类来覆写方法就能改变这个类本身的功能。新功能将在本类的所有实例中生效。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 交换方法实现</span></div><div class="line"><span class="keyword">void</span> method_exchangeImplementations(Method m1, Method m2)</div><div class="line"><span class="comment">// 获取方法实现</span></div><div class="line">Method class_getInstanceMethod(Class aClass, SEL aSelector)</div></pre></td></tr></table></figure>
<p>通过此方案，可以为那些『完全不知道其具体实现的』（complete opaque）黑盒方法增加日志记录功能。</p>
<h3 id="理解『类对象』的用意"><a href="#理解『类对象』的用意" class="headerlink" title="理解『类对象』的用意"></a>理解『类对象』的用意</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// id类型定义</div><div class="line">typedef struct objc_object &#123;</div><div class="line">	Class isa;</div><div class="line">&#125; *id;</div><div class="line"></div><div class="line">// Class类型定义</div><div class="line">typedef struct objc_class *Class;</div><div class="line">struct objc_Class &#123;</div><div class="line">	Class *isa;</div><div class="line">	Class super_class;</div><div class="line">	const char *name;</div><div class="line">	long version;</div><div class="line">	long info;</div><div class="line">	long instance_size;</div><div class="line">	struct objc_ivar_list *ivars;</div><div class="line">	struct objc_method_list **methodLists;</div><div class="line">	struct objc_cache *cache;</div><div class="line">	struct objc_protocol_list *protocols;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在类继承体系中查询类型信息：<br><code>isMemberOfClass</code>判断对象是否为某个特定类的实例，<code>isKindOfClass</code>判断对象是否为某类或其派生类的实例。<br>每个实例都有一个指向Class对象的指针，用以表明其类型。</p>
<h2 id="接口与API设计"><a href="#接口与API设计" class="headerlink" title="接口与API设计"></a>接口与API设计</h2><h3 id="用前缀避免命名空间冲突"><a href="#用前缀避免命名空间冲突" class="headerlink" title="用前缀避免命名空间冲突"></a>用前缀避免命名空间冲突</h3><p>OC没有其他语言内置的『命名空间』（namespace）机制。<br>选择与公司或应用程序或二者皆有关联之名称作为类名的前缀，并在所有代码中均使用这一前缀。<br>若自己所开发的程序库中使用到了第三方库，则应为其中的名称加上前缀。</p>
<h3 id="提供『全能初始化方法』"><a href="#提供『全能初始化方法』" class="headerlink" title="提供『全能初始化方法』"></a>提供『全能初始化方法』</h3><p>把这种可为对象提供必要信息以便其能完成工作的初始化方法叫做『全能/指定初始化方法』（designated initializer）。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Rectangle.m</span></div><div class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height &#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">		_width = width;</div><div class="line">		_height = height;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果有人调用[[Rectangle alloc]init]来创建，所有的实例变量都会设为0（或是与0等价的值）</span></div><div class="line"><span class="comment">// 不过我们一般希望自己能设置默认的宽度和高度，或者抛出异常</span></div><div class="line"><span class="comment">// 使用下面任意一种方法来覆写init方法</span></div><div class="line"></div><div class="line"><span class="comment">// Using default values</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">self</span> initWithWidth:<span class="number">5.0</span>f andHeight:<span class="number">10.0</span>f];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Throwing an exception</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">	<span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInternalInconsistentcyException</span> reason:<span class="string">@"Must use initWithWidth:andHeight: instead."</span> useInfo:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>全能初始化方法的调用链一定要维系。并且，如果子类的全能初始化方法与超类方法的名称不同，那么总应覆写超类的全能初始化方法（调用本类的全能初始化方法）。<br>如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。<br>有时候，可能需要编写多个全能初始化方法，因为对象的实例可能有两种完全不同的创建方式。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Rectangle.m</span></div><div class="line"><span class="comment">// Designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height &#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">		_width = width;</div><div class="line">		_height = height;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Superclass's designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">self</span> initWithWidth:<span class="number">5.0</span>f andHeight:<span class="number">10.0</span>f];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Initializer from NSCoding</span></div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder &#123;</div><div class="line">	<span class="comment">// call through to super's designated initializer</span></div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">		_width = [decoder decodeFloatForKey:<span class="string">@"width"</span>];</div><div class="line">		_height = [decoder decodeFloatForKey:<span class="string">@"height"</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Square.m</span></div><div class="line"><span class="comment">// Designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)initWithDimension:(<span class="keyword">float</span>)dimension &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">super</span> initWidth:dimension andHeight:dimension];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Superclass's designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height &#123;</div><div class="line">	<span class="keyword">float</span> dimension = MAX(width, height);</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">self</span> initWithDimension:dimension];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NSCoding designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder &#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:decoder])) &#123;</div><div class="line">		<span class="comment">// Square's specific initializer</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个子类的全能初始化方法都应该调用其超类的对应方法，并逐层向上。</p>
<h3 id="实现descripiton方法"><a href="#实现descripiton方法" class="headerlink" title="实现descripiton方法"></a>实现descripiton方法</h3><p>自定义类时可以覆写description方法并将描述此对象的字符串返回。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.m</span></div><div class="line">- (<span class="built_in">NSString</span> *)description &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p, \"%@ %@\"&gt;"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>, _firstName, _lastName];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有个简单的方法，可以借助NSDictionary类的description方法，可以在description中输出很多互不相同的信息。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)description &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p, %@&gt;"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>, @&#123;<span class="string">@"title"</span>:_title, <span class="string">@"latitude"</span>:@(_latitude), <span class="string">@"longitude"</span>:@(_longitude)&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>debugDescription是开发者在调试器（debugger）中以控制台命令打印对象时才调用的。在NSObject类的默认实现中，此方法直接调用description。<br>实现description方法返回一个有意义的字符串，用以描述该实例。但若想在调试时打印出更详尽的对象描述信息，则应该实现debugDescription方法。</p>
<h3 id="尽量使用不可变对象"><a href="#尽量使用不可变对象" class="headerlink" title="尽量使用不可变对象"></a>尽量使用不可变对象</h3><p>设计类的时候，应该充分运用属性来封装数据。而在使用属性时，可将其声明为『只读』（read-only）。<br>但是设置为<code>read-only</code>的属性在对象外部仍然可以通过『键值编码』（Key-Value Coding, KVC）技术<code>setValue:forKey:</code>设置这些属性值。不过这么做等于违规地绕过了本类所提供的API，使用这种『杂技代码』（hack）的话，得自己来应对可能出现的问题。<br>尽量创建不可变的对象。若某属性仅可用于对象内部修改，则在『class-continuation分类』中将其由readonly属性扩展为readwrite属性。不要把可变的collection作为属性公开，而应提供相关方法，以此修改对象中的可变collection。</p>
<h3 id="使用清晰而协调的命名方式"><a href="#使用清晰而协调的命名方式" class="headerlink" title="使用清晰而协调的命名方式"></a>使用清晰而协调的命名方式</h3><p><strong>方法命名：</strong></p>
<ul>
<li>如果方法的返回值是新创建的，那么方法名的首个词应该是返回值的类型，除非前面还有修饰语</li>
<li>应该把表示参数类型的名词放在参数前面</li>
<li>如果方法要在当前对象上执行操作，那么就应该包括动词；若执行操作时还需要参数，则应该在动词后面加上一个或多个名词</li>
<li>将get这个前缀留给那些借由『输出参数』来保存返回值的方法，比如<code>getCharacters:range</code>，调用此方法时，要在首个参数中传入数组，该方法所获取的字符正是要放到这个数组里面。</li>
</ul>
<h3 id="为私有方法名添加前缀"><a href="#为私有方法名添加前缀" class="headerlink" title="为私有方法名添加前缀"></a>为私有方法名添加前缀</h3><p>可以使用<code>p_</code>或者类名前缀作为前缀。</p>
<h3 id="理解Objective-C错误模型"><a href="#理解Objective-C错误模型" class="headerlink" title="理解Objective-C错误模型"></a>理解Objective-C错误模型</h3><p>OC中的异常只用于处理致命错误（fatal error），在非致命错误（nonfatal error）时，OC所用的编程范式为：令方法返回nil/0，或者是使用NSError，以表明其中有错误发生。<br>NSError对象里封装了三条信息：</p>
<ul>
<li>Error domain（错误范围，类型为字符串）：发生错误的范围，也就是产生错误的根源，通常用一个特有的全局变量来定义。</li>
<li>Error code（错误码，类型为整数）：独特的错误代码，指明在某个范围内具体发生了何种错误。</li>
<li>User info（用户信息，类型为字典）：有关此错误的额外信息，其中或许包含一段『本地化的描述』，或许还有含有导致该错误发生的另外一个错误。<br>NSError经由方法的『输出参数』返回给调用者。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)doSomething:(<span class="built_in">NSError</span> **)error</div></pre></td></tr></table></figure>
<p>这样，此方法不仅能有普通的返回值，而且还能经由『输出参数』把NSError对象回传给调用者。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line"><span class="built_in">BOOL</span> ret = [object doSomething:&amp;error];</div><div class="line"><span class="keyword">if</span> (error) &#123;</div><div class="line">	<span class="comment">// There was an error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像这样的方法一般都会返回Boolean值，用来表示成功了还是失败了。如果不关注具体的错误信息，那么直接判断这个Boolean值就好。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> ret = [object doSomething:<span class="literal">nil</span>];</div><div class="line"><span class="keyword">if</span> (ret) &#123;</div><div class="line">	<span class="comment">// There was an error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有发生了可使整个应用程序崩溃的严重错误时，才应使用异常。<br>在错误不那么严重的情况下，可以指派『委托方法』（delegate method）来处理错误，也可以把错误信息放在NSError对象里，经由『输出参数』返回给调用者。</p>
<h3 id="理解NSCopying协议"><a href="#理解NSCopying协议" class="headerlink" title="理解NSCopying协议"></a>理解NSCopying协议</h3><p>OC中，使用copy方法来进行拷贝。如果想令自己的类支持拷贝操作，那么就要实现NSCopying协议，该协议只有一个方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone</div></pre></td></tr></table></figure>
<p>以前开发程序时，需要把内存分成不同的区（zone），而对象会创建在某个区里。而现在每个程序只有一个区：『默认区』（default zone）。因此不必担心zone参数。<br>NSMutableCopying协议定义了：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="built_in">NSZone</span> *)zone</div></pre></td></tr></table></figure>
<p>无论当前实例是否可变，若需获取其可变版本的拷贝，均应调用mutableCopy方法。同理，若需要不可变的拷贝，则总应通过copy方法来获取。<br>深拷贝（deep copy）：在拷贝对象自身时，将其底层数据也一并复制过去。<br>浅拷贝（shallow copy）：只拷贝容器对象本身，而不复制其中数据。一般情况下会使用浅拷贝。<br>如果所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)deepCopy &#123;</div><div class="line">	Person *<span class="keyword">copy</span> = [[[<span class="keyword">self</span> <span class="keyword">class</span>] alloc] initWithFirstName:_firstName andLastName:_lastName];</div><div class="line">	<span class="keyword">copy</span>-&gt;_friends = [[<span class="built_in">NSMutableSet</span> alloc] initWithSet:_friends copyItems:<span class="literal">YES</span>];</div><div class="line">	<span class="keyword">return</span> <span class="keyword">copy</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>未完，不定期更新，接<a href="http://hijacking.cn/2016/07/01/Effective-OC-Note-Part2/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/07/01/Effective-OC-Note-Part1/">http://hijacking.cn/2016/07/01/Effective-OC-Note-Part1/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此笔记是在阅读&lt;a href=&quot;http://item.jd.com/11402853.html&quot; title=&quot;京东链接&quot;&gt;&lt;em&gt;《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》&lt;/em&gt;&lt;/a&gt; 时所整理，方便今后查阅。&lt;/p&gt;
&lt;h2 id=&quot;熟悉OC&quot;&gt;&lt;a href=&quot;#熟悉OC&quot; class=&quot;headerlink&quot; title=&quot;熟悉OC&quot;&gt;&lt;/a&gt;熟悉OC&lt;/h2&gt;&lt;h3 id=&quot;了解OC语言的起源&quot;&gt;&lt;a href=&quot;#了解OC语言的起源&quot; class=&quot;headerlink&quot; title=&quot;了解OC语言的起源&quot;&gt;&lt;/a&gt;了解OC语言的起源&lt;/h3&gt;&lt;h3 id=&quot;在类的头文件中尽量少引入其他头文件&quot;&gt;&lt;a href=&quot;#在类的头文件中尽量少引入其他头文件&quot; class=&quot;headerlink&quot; title=&quot;在类的头文件中尽量少引入其他头文件&quot;&gt;&lt;/a&gt;在类的头文件中尽量少引入其他头文件&lt;/h3&gt;&lt;p&gt;尽量晚地#import需要的头文件，使用@class进行『向前声明』（forward declaring）。&lt;br&gt;如果两个类在各自头文件中引入对方的头文件，则会导致『循环引用』（chicken-and-egg situation）。虽然#import不会像#include导致死循环，但是两个类里有一个无法被正确编译。&lt;/p&gt;
&lt;p&gt;最好将协议单独放在一个头文件中，如果把协议放在某个大的头文件里，那么只要引入此协议，就必定会引入那个头文件中的全部内容。&lt;br&gt;然有些协议，例如委托协议（delegate protocol）就不用单独写一个头文件。&lt;/p&gt;
&lt;h3 id=&quot;多用字面量语法，少用与之等价的方法&quot;&gt;&lt;a href=&quot;#多用字面量语法，少用与之等价的方法&quot; class=&quot;headerlink&quot; title=&quot;多用字面量语法，少用与之等价的方法&quot;&gt;&lt;/a&gt;多用字面量语法，少用与之等价的方法&lt;/h3&gt;&lt;p&gt;字面量语法（literal syntax），一种语法糖（syntactic sugar）&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *someNumber = [&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithInt:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等价于：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *someNumber = @&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://hijacking.cn/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://hijacking.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 去除优酷视频广告</title>
    <link href="http://hijacking.cn/2016/06/27/MacOS-Block-Youku-Ad/"/>
    <id>http://hijacking.cn/2016/06/27/MacOS-Block-Youku-Ad/</id>
    <published>2016-06-27T02:14:13.000Z</published>
    <updated>2016-12-18T04:23:35.237Z</updated>
    
    <content type="html"><![CDATA[<p>教程最早发表于威锋网，<a href="http://bbs.feng.com/read-htm-tid-8304000.html" target="_blank" rel="external">原帖地址</a>。未经允许，不得转载。</p>
<h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><p>1.打开 Finder，同时按住 Shift + Command + G ，输入 /private/etc/ ，然后前往，找到 hosts 文件。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/101621073.png" alt="前往文件夹" title="前往文件夹"></p>
<p>2.将 hosts 文件拷贝一份到桌面上，然后使用文本编辑器添加如下字段：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 atm.youku.com</div><div class="line">127.0.0.1 fvid.atm.youku.com</div><div class="line">127.0.0.1 html.atm.youku.com</div><div class="line">127.0.0.1 valb.atm.youku.com</div><div class="line">127.0.0.1 valf.atm.youku.com</div><div class="line">127.0.0.1 valo.atm.youku.com</div><div class="line">127.0.0.1 valp.atm.youku.com</div><div class="line">127.0.0.1 lstat.youku.com</div><div class="line">127.0.0.1 speed.lstat.youku.com</div><div class="line">127.0.0.1 urchin.lstat.youku.com</div><div class="line">127.0.0.1 stat.youku.com</div><div class="line">127.0.0.1 static.lstat.youku.com</div><div class="line">127.0.0.1 valc.atm.youku.com</div><div class="line">127.0.0.1 vid.atm.youku.com</div><div class="line">127.0.0.1 walp.atm.youku.com</div></pre></td></tr></table></figure>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/102014249.png" alt="修改hosts文件" title="修改hosts文件"></p>
<p>3.保存并退出，将修改好的 hosts 文件替换原来的 hosts 文件，有密码会提示输入密码。</p>
<h2 id="删除优酷缓存文件夹"><a href="#删除优酷缓存文件夹" class="headerlink" title="删除优酷缓存文件夹"></a>删除优酷缓存文件夹</h2><p>打开 Finder，同时按住 <code>Shift + Command + G</code> ，输入 <code>~/Library/Preferences/Macromedia/Flash Player/#SharedObjects/</code> ，看到一个字母数字组成的文件夹，例如 <code>479H5MNT</code>（名字随机生成），将文件夹内的 <code>static.youku.com</code> 文件夹删除。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/102146464.png" alt="删除缓存文件" title="删除缓存文件"></p>
<h2 id="网页设置"><a href="#网页设置" class="headerlink" title="网页设置"></a>网页设置</h2><p>随便打开一个优酷视频网页，此时应该没有广告了，点击右下角的设置按钮，优先画质选择超清或高清，确定。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/102215628.png" alt="网页设置" title="网页设置"></p>
<h2 id="设置文件权限"><a href="#设置文件权限" class="headerlink" title="设置文件权限"></a>设置文件权限</h2><p>再次进入 <code>~/Library/Preferences/Macromedia/Flash Player/#SharedObjects/</code> 位置，一直进入里面的文件夹，找到 <code>YOUKU_FSO_PROXY.sol</code> 文件。右键点击选择“显示简介”，在最后共享与权限中将所有账户权限改成只读（不能修改点击右下角的锁解锁），最后点击通用中的已锁定。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/102253967.png" alt="设置权限" title="设置权限"></p>
<p>对于极少部分人，如果按照上面步骤出现优酷黑屏，提示广告被屏蔽的话，试着将第二步中那个数字和字母随即生成的文件夹，如 <code>479H5MNT</code> ，整个删除，再按照上面的方法试一遍。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/06/27/MacOS-Block-Youku-Ad/">http://hijacking.cn/2016/06/27/MacOS-Block-Youku-Ad/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教程最早发表于威锋网，&lt;a href=&quot;http://bbs.feng.com/read-htm-tid-8304000.html&quot;&gt;原帖地址&lt;/a&gt;。未经允许，不得转载。&lt;/p&gt;
&lt;h2 id=&quot;修改hosts文件&quot;&gt;&lt;a href=&quot;#修改hosts文件&quot; class=&quot;headerlink&quot; title=&quot;修改hosts文件&quot;&gt;&lt;/a&gt;修改hosts文件&lt;/h2&gt;&lt;p&gt;1.打开 Finder，同时按住 Shift + Command + G ，输入 /private/etc/ ，然后前往，找到 hosts 文件。&lt;br&gt;&lt;img src=&quot;http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/101621073.png&quot; alt=&quot;前往文件夹&quot; title=&quot;前往文件夹&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.将 hosts 文件拷贝一份到桌面上，然后使用文本编辑器添加如下字段：&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://hijacking.cn/tags/macOS/"/>
    
  </entry>
  
</feed>
