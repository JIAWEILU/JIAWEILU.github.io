<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Giraffe.ME</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hijacking.cn/"/>
  <updated>2016-12-18T07:11:37.655Z</updated>
  <id>http://hijacking.cn/</id>
  
  <author>
    <name>Jiawei LU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HDFS 常用操作</title>
    <link href="http://hijacking.cn/2016/12/15/HDFS-Commands/"/>
    <id>http://hijacking.cn/2016/12/15/HDFS-Commands/</id>
    <published>2016-12-15T03:06:27.000Z</published>
    <updated>2016-12-18T07:11:37.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="几种指令区别"><a href="#几种指令区别" class="headerlink" title="几种指令区别"></a>几种指令区别</h2><p>在操作HDFS上的文件的时候，Hadoop给我们提供了以下三种（其中一种已被废弃）指令，它们分别是：</p>
<ul>
<li><code>hadoop fs</code>: 适用范围最广，操作通用文件系统，例如Local FS、HDFS、HFTP FS、S3 FS等。</li>
<li><code>hadoop dfs</code>: 进行与HDFS相关的操作，但是该方法已经被<strong>废弃</strong>，使用<code>hdfs dfs</code>代替。</li>
<li><code>hdfs dfs</code>: 进行HDFS的相关操作。</li>
</ul>
<p><strong>值得注意</strong>，如果<code>hadoop fs</code>指令后未指明是何种文件系统，那么默认是HDFS，也就是说<code>hadoop fs -ls /</code>相当于<code>hadoop fs -ls hdfs:///</code>。<br><strong>还有一点</strong>，<code>/path</code>路径和<code>path</code>并不指向同一个目录，后者其实是<code>/user/username/path</code>的简写形式。这一点与Linux本地文件系统类似。</p>
<p>几种指令操作类似，下面以<code>hadoop fs</code>为例，介绍常用的几种操作。</p>
<a id="more"></a>
<h2 id="FS-Shell"><a href="#FS-Shell" class="headerlink" title="FS Shell"></a>FS Shell</h2><p>调用FS Shell指令为：<code>bin/hadoop fs &lt;args&gt;</code>的形式，如果在系统的环境变量的路径中添加了<code>$Hadoop_HOME/bin</code>，那么可以直接使用<code>hadoop fs &lt;args&gt;</code>指令。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161215/110801595.png" alt="环境变量" title="环境变量"></p>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p><code>hadoop fs -mkdir &lt;paths&gt;</code>：在HDFS上创建指令路径的目录。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 在HDFS上新建一个data目录</span></div><div class="line">hadoop fs -mkdir /<span class="keyword">data</span></div></pre></td></tr></table></figure></p>
<h3 id="上载文件"><a href="#上载文件" class="headerlink" title="上载文件"></a>上载文件</h3><p><code>hadoop fs -put &lt;localsrc&gt; ... &lt;dst&gt;</code>：将一个或多个本地文件上载到HDFS目录中。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将本地的u1.base和u1.test文件写入到HDFS中的data目录</span></div><div class="line">hadoop fs -put /home/linux/Documents/u1.base home/linux/Documents/u1.test /<span class="keyword">data</span></div></pre></td></tr></table></figure></p>
<h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><p><code>hadoop fs -get &lt;src&gt; &lt;localdst&gt;</code>：复制文件到本地文件系统。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将HDFS中u1.base和u1.test复制到本地</span></div><div class="line">hadoop fs -get /<span class="keyword">data</span>/u1.base /home/linux/Documents</div><div class="line">hadoop fs -get /<span class="keyword">data</span>/u1.test /home/linux/Documents</div></pre></td></tr></table></figure></p>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p><code>hadoop fs -cp URI [URI …] &lt;dest&gt;</code>：将文件从源路径复制到目的路径。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将data目录下的u1.base和u1.test文件复制到/data/ml100k文件夹下</span></div><div class="line">hadoop fs -cp /<span class="keyword">data</span>/u1.base /<span class="keyword">data</span>/u1.test /<span class="keyword">data</span>/ml100k</div></pre></td></tr></table></figure></p>
<h3 id="移动文件"><a href="#移动文件" class="headerlink" title="移动文件"></a>移动文件</h3><p><code>hadoop fs -mv URI [URI …] &lt;dest&gt;</code>：将文件从源路径移动到目的路径。不允许不同文件系统间移动文件。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将data目录下的u1.base和u1.test文件移动到/data/ml100k文件夹下</span></div><div class="line">hadoop fs -mv /<span class="keyword">data</span>/u1.base /<span class="keyword">data</span>/u1.test /<span class="keyword">data</span>/ml100k</div></pre></td></tr></table></figure></p>
<h3 id="查看目录结构"><a href="#查看目录结构" class="headerlink" title="查看目录结构"></a>查看目录结构</h3><p><code>hadoop fs -ls &lt;args&gt;</code>：</p>
<ul>
<li>如果是文件：返回<code>文件名 &lt;副本数&gt; 文件大小 修改日期 修改时间 权限 用户ID 组ID</code></li>
<li>如果是目录：返回<code>目录名 &lt;dir&gt; 修改日期 修改时间 权限 用户ID 组ID</code></li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看data目录下的直接子文件</span></div><div class="line">hadoop fs -ls /<span class="keyword">data</span></div></pre></td></tr></table></figure>
<h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><p><code>hadoop fs -cat URI [URI …]</code>：将路径指定文件的内容输出到stdout。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看u1.test文件的内容</span></div><div class="line">hadoop fs -cat /<span class="keyword">data</span>/u1.test</div></pre></td></tr></table></figure></p>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p><code>hadoop fs -rm [-R] URI [URI …]</code>：删除指定文件。<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 将data目录下u1.base、u1.test</span></div><div class="line">hadoop fs -rm /<span class="keyword">data</span>/u1.base /<span class="keyword">data</span>/u1.test</div></pre></td></tr></table></figure></p>
<p>若想要删除文件夹及其路径内所有文件，则使用下面指令：<br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 删除/data/ml100k目录下所有文件</span></div><div class="line">hadoop fs -rm -R /<span class="keyword">data</span>/ml100k</div></pre></td></tr></table></figure></p>
<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>对于不同的文件系统，有不同的scheme，读取本地文件系统时候，应该使用<code>file:///localpath</code>；而对于HDFS，应该使用<code>hdfs:///hdfspath</code>。<br>HDFS所有节点都可以读取，但是本地文件系统只能够读取本地文件，如果程序需要读本地文件，应该在所有节点的相同目录下都有该文件的备份。</p>
<hr>
<p>阅读参考：</p>
<p>关于三种指令的区别，参考<a href="http://stackoverflow.com/questions/18142960/whats-the-difference-between-hadoop-fs-shell-commands-and-hdfs-dfs-shell-co" target="_blank" rel="external">stackoverflow</a>。</p>
<p>更多指令，参考Hadoop文档<a href="https://hadoop.apache.org/docs/r1.0.4/cn/hdfs_shell.html" target="_blank" rel="external">ch</a>或<a href="https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/FileSystemShell.html" target="_blank" rel="external">en</a><em>(最新稳定版)</em>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/12/15/HDFS-Commands/">http://hijacking.cn/2016/12/15/HDFS-Commands/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;几种指令区别&quot;&gt;&lt;a href=&quot;#几种指令区别&quot; class=&quot;headerlink&quot; title=&quot;几种指令区别&quot;&gt;&lt;/a&gt;几种指令区别&lt;/h2&gt;&lt;p&gt;在操作HDFS上的文件的时候，Hadoop给我们提供了以下三种（其中一种已被废弃）指令，它们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hadoop fs&lt;/code&gt;: 适用范围最广，操作通用文件系统，例如Local FS、HDFS、HFTP FS、S3 FS等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hadoop dfs&lt;/code&gt;: 进行与HDFS相关的操作，但是该方法已经被&lt;strong&gt;废弃&lt;/strong&gt;，使用&lt;code&gt;hdfs dfs&lt;/code&gt;代替。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hdfs dfs&lt;/code&gt;: 进行HDFS的相关操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;值得注意&lt;/strong&gt;，如果&lt;code&gt;hadoop fs&lt;/code&gt;指令后未指明是何种文件系统，那么默认是HDFS，也就是说&lt;code&gt;hadoop fs -ls /&lt;/code&gt;相当于&lt;code&gt;hadoop fs -ls hdfs:///&lt;/code&gt;。&lt;br&gt;&lt;strong&gt;还有一点&lt;/strong&gt;，&lt;code&gt;/path&lt;/code&gt;路径和&lt;code&gt;path&lt;/code&gt;并不指向同一个目录，后者其实是&lt;code&gt;/user/username/path&lt;/code&gt;的简写形式。这一点与Linux本地文件系统类似。&lt;/p&gt;
&lt;p&gt;几种指令操作类似，下面以&lt;code&gt;hadoop fs&lt;/code&gt;为例，介绍常用的几种操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据处理" scheme="http://hijacking.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Hadoop" scheme="http://hijacking.cn/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>协同过滤推荐之 矩阵分解模型</title>
    <link href="http://hijacking.cn/2016/12/12/CF-MF/"/>
    <id>http://hijacking.cn/2016/12/12/CF-MF/</id>
    <published>2016-12-12T03:08:25.000Z</published>
    <updated>2016-12-18T04:24:27.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111006385.png" alt="推荐算法分类" title="推荐算法分类"></p>
<h2 id="SVD"><a href="#SVD" class="headerlink" title="SVD"></a>SVD</h2><p>Singular Value Decomposition, 奇异值分解</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3>
假设${\bf{M}}$是一个$m \times n$矩阵，其中的元素全部属于实数域或复数域。那么存在一个分解使得：
$${{\bf{M}}_{m \times n}} = {{\bf{U}}_{m \times m}}{{\bf{\Sigma }}_{m \times n}}{\bf{V}}_{n \times n}^*$$
其中，${\bf{U}}$、${\bf{V}}$分别称为左、右奇异向量，$*$表示共轭转置，${\bf{\Sigma}}$对角线上的值是奇异值，其值按从大到小排列，且下降迅速。因此我们可以用前$r$个奇异值来近似描述原矩阵：
$${{\bf{M}}_{m \times n}} \approx {{\bf{U}}_{m \times r}}{{\bf{\Sigma }}_{r \times r}}{\bf{V}}_{n \times r}^*$$
其中，$r$是一个远小于$m$和$n$的数。

<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111041846.png" alt="SVD 近似" title="SVD 近似"></p>
<a id="more"></a>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p><a href="http://www.d.umn.edu/~mhampton/m4326svd_example.pdf" target="_blank" rel="external">SVD computation example</a></p>
<h3 id="评分预测"><a href="#评分预测" class="headerlink" title="评分预测"></a>评分预测</h3><ol>
<li>利用SVD将评分矩阵${\bf{R}}$分解为${\bf{U}}$、${\bf{\Sigma }}$、${\bf{V}}$；</li>
<li>将${\bf{\Sigma }}$简化为维数是$r$的矩阵，得到${{\bf{\Sigma }}_r}$；</li>
<li>相应地简化${\bf{U}}$、${\bf{V}}$得到矩阵${{\bf{U}}_r}$与${{\bf{V}}_r}$；</li>
<li>计算两个相关矩阵${{\bf{U}}_k} = {{\bf{U}}_r} \cdot \sqrt {{{\bf{\Sigma }}_r}} $与${{\bf{V}}_k} = \sqrt {{{\bf{\Sigma }}_r}}  \cdot {\bf{V}}_r^T$；</li>
<li>计算用户$u$对未评分项目$i$的预测评分：${\hat r_{ui}} = {{\bf{U}}_k}\left( u \right) \cdot {{\bf{V}}_k}\left( i \right)$。
</li>
</ol>
<p>优点：</p>
<ul>
<li>提取评分矩阵关键特征，简化数据，去除噪声和冗余数据</li>
</ul>
<p>缺点：</p>
<ul>
<li>需要将稀疏评分矩阵补全成稠密矩阵，而实践中评分矩阵往往非常庞大且稀疏，一旦补全成稠密的，将会占用非常大的空间</li>
<li>算法复杂度严重依赖SVD方法，在稠密大规模矩阵上分解时，速度非常慢</li>
</ul>
<h3 id="Funk-SVD"><a href="#Funk-SVD" class="headerlink" title="Funk-SVD"></a>Funk-SVD</h3><p>Netflix Prize开始后，Simon Funk在其个人博客中公布了一个基于SVD的改进算法(Funk-SVD)，一下子引爆了推荐系统研究者对于矩阵分解的关注。这种改进算法称为隐语义模型或潜在因素模型。</p>
<h2 id="LFM"><a href="#LFM" class="headerlink" title="LFM"></a>LFM</h2><p>Latent Factor Model, 潜在因素模型</p>
<h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3>
将评分矩阵分解为用户隐含特征组成的矩阵和项目隐含特征组成的矩阵，类似于SVD算法中的${{\bf{U}}_r}$与${{\bf{V}}_r}$：
$${\bf{R}} \approx {{\bf{P}}^T}{\bf{Q}}$$
${\bf{P}}$为$k \times m$矩阵，表示用户特征向量；${\bf{Q}}$为$k \times n$矩阵，表示物品特征向量。那么$u$对$i$预测评分为：
$${\hat r_{ui}} = {\bf{p}}_u^T{{\bf{q}}_i}$$

<h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3>
采用最小化误差函数的方法来求解，转化为最优化问题。
定义损失函数：
$$C = \sum\limits_{(u,i) \in R} {{{\left( {{r_{u,i}} - {\bf{p}}_u^T{{\bf{q}}_i}} \right)}^2}} {\rm{ + }}\lambda \left( {{{\left\| {{{\bf{p}}_u}} \right\|}^2} + {{\left\| {{{\bf{q}}_i}} \right\|}^2}} \right)$$
目标：
$$\mathop {\min }\limits_{{{\bf{p}}_u},{{\bf{q}}_i}} C$$

<h3 id="最优化算法"><a href="#最优化算法" class="headerlink" title="最优化算法"></a>最优化算法</h3><p>两种常用的算法：</p>
<ul>
<li>梯度下降法<br>Simon Funk所采用的方法，为了减少计算量，采用随机梯度下降SDG(Stochastic Gradient Descent)</li>
<li>交替最小二乘法<br>通常SGD比ALS(Alternating Least Squares)简单而且快速，但是ALS的并行性能比较好，而且可以较好地处理稀疏数据</li>
</ul>
<h3 id="ALS"><a href="#ALS" class="headerlink" title="ALS"></a>ALS</h3>
目标：
$$\mathop {\min }\limits_{{{\bf{p}}_u},{{\bf{q}}_i}} \sum\limits_{(u,i) \in R} {{{\left( {{r_{u,i}} - {\bf{p}}_u^T{{\bf{q}}_i}} \right)}^2}} {\rm{ + }}\lambda \left( {{{\left\| {{{\bf{p}}_u}} \right\|}^2} + {{\left\| {{{\bf{q}}_i}} \right\|}^2}} \right)$$
因为变量${{{\bf{p}}_u}}$和${{{\bf{q}}_i}}$耦合到一起，不好求解，因此可以先固定${\bf{Q}}$，求解${\bf{P}}$；再固定${\bf{P}}$，求解${\bf{Q}}$，如此交替反复，直至收敛。

<ul>
<li>先固定${\bf{Q}}$，将损失函数$C$对${{{\bf{p}}_u}}$求偏导，并令导数等于0，得到：
<center>${{\bf{p}}_u} = {\left( {{{\bf{Q}}^T}{\bf{Q}} + \lambda {\bf{E}}} \right)^{ - 1}}{{\bf{Q}}^T}{{\bf{r}}_u}$&nbsp;&nbsp;&nbsp;&nbsp;(1)</center>
</li>
<li>同理固定${\bf{P}}$，可得：
<center>${{\bf{q}}_i} = {\left( {{{\bf{P}}^T}{\bf{P}} + \lambda {\bf{E}}} \right)^{ - 1}}{{\bf{P}}^T}{{\bf{r}}_i}$&nbsp;&nbsp;&nbsp;&nbsp;(2)</center>

</li>
</ul>
<p><a href="http://blog.csdn.net/oucpowerman/article/details/49847979" target="_blank" rel="external">证明</a><br>
具体步骤：
随机初始化${\bf{Q}}$，利用公式(1)更新得到${\bf{P}}$，然后利用公式(2)更新${\bf{Q}}$，直到误差值变化很小或者达到最大迭代次数。
</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>Spark MLlib</p>
<h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><p>ALS伴生对象是建立ALS模型的入口，主要方法：</p>
<ul>
<li>train(ratings, rank, iterations, lambda)：训练模型，返回MatrixFactorizationModel</li>
</ul>
<p>传入参数：</p>
<ul>
<li>ratings：评分RDD格式(userID, productID, rating)对</li>
<li>rank：特征数量</li>
<li>iterations：迭代数量</li>
<li>lambda：正则因子</li>
</ul>
<h4 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h4><p>MatrixFactorizationModel是用来预测评分的模型，主要方法：</p>
<ul>
<li>predict(user: Int, product: Int)：返回user用户对product物品的预测评分</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 建立模型</span></div><div class="line"><span class="keyword">val</span> rank = <span class="number">10</span></div><div class="line"><span class="keyword">val</span> numIterations = <span class="number">20</span></div><div class="line"><span class="keyword">val</span> model = <span class="type">ALS</span>.train(trainRatings, rank, numIterations, <span class="number">0.01</span>)</div><div class="line"></div><div class="line"><span class="comment">// 预测结果</span></div><div class="line"><span class="keyword">val</span> predictions = model.predict(usersProducts).map &#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">Rating</span>(user, product, rate) =&gt;</div><div class="line">    ((user, product), rate)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111105522.png" alt="输出结果" title="输出结果"><br>误差：</p>
<ul>
<li>MAE = 0.9112771540040457</li>
<li>RMSE = 1.2129820340745725</li>
</ul>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><h3 id="带有偏置的MF"><a href="#带有偏置的MF" class="headerlink" title="带有偏置的MF"></a>带有偏置的MF</h3>
不同的人打分的偏好不同，有的人愿意都给高分，有的人打分则比较保守。修改评分预测公式：
$${\hat r_{ui}} = \mu  + {b_u} + {b_i} + {\bf{p}}_u^T{{\bf{q}}_i}$$
加入$\mu $全部评分的总体平均分，${b_u}$是用户$u$打分行为的偏差，${b_i}$是物品$i$收到打分的偏差，选取一种最优化算法训练出${b_u}$、${b_i}$、${{{\bf{p}}_u}}$和${{{\bf{q}}_i}}$。

<h3 id="带有隐反馈的MF-SVD"><a href="#带有隐反馈的MF-SVD" class="headerlink" title="带有隐反馈的MF(SVD++)"></a>带有隐反馈的MF(SVD++)</h3>
用户评分的物品只占很少一部分，但是用户的浏览、点击行为从一定程度上也反应了他对物品的兴趣，而这些都是隐性的反馈因素。因此，考虑修改评分预测公式：
$${\hat r_{ui}} = \mu  + {b_u} + {b_i} + \left( {{\bf{p}}_u^T{\rm{ + }}{1 \over {\sqrt {\left| {N\left( u \right)} \right|} }}\sum\limits_{j \in N\left( u \right)} {{{\bf{y}}_{\bf{j}}}} } \right){{\bf{q}}_i}$$
${N\left( u \right)}$是用户$u$浏览或评论过的物品集合，${{\bf{y}}_j}$表示历史行为表现出来的偏好，和前面向量的维度相同。

<h3 id="非负矩阵分解-NMF"><a href="#非负矩阵分解-NMF" class="headerlink" title="非负矩阵分解(NMF)"></a>非负矩阵分解(NMF)</h3>
在矩阵分解的过程中增添一些限制，如分解出来的矩阵${\bf{P}}$和${\bf{Q}}$的元素不允许出现负值。

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><p>ALS-WR<br>增加置信度权重来权衡显性和隐性反馈的比重。</p>
</li>
<li><p>考虑时间因素<br>用户的兴趣度会随时间的推移而变化，因此将会随时间变化的因素表示为时间的函数。</p>
</li>
<li><p>带标签的MF<br>加入用户的标签（比如年龄、性别、职业）来推测对每个因素的喜爱程度。</p>
</li>
</ul>
<hr>
<p>阅读参考：</p>
<ol>
<li><a href="http://www.flickering.cn/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/2015/01/%E5%A5%87%E5%BC%82%E5%80%BC%E5%88%86%E8%A7%A3%EF%BC%88we-recommend-a-singular-value-decomposition%EF%BC%89/" target="_blank" rel="external">几何角度解释SVD</a></li>
<li><a href="http://sifter.org/~simon/journal/20061211.html" target="_blank" rel="external">Simon Funk’s Blog</a></li>
<li><a href="https://datajobs.com/data-science-repo/Recommender-Systems-[Netflix].pdf" target="_blank" rel="external">Recommender Systems [Netflix]</a></li>
<li><a href="http://papers.nips.cc/paper/1861-algorithms-for-non-negative-matrix-factorization.pdf" target="_blank" rel="external">Non-negative matrix factorization</a></li>
</ol>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/12/12/CF-MF/">http://hijacking.cn/2016/12/12/CF-MF/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;推荐&quot;&gt;&lt;a href=&quot;#推荐&quot; class=&quot;headerlink&quot; title=&quot;推荐&quot;&gt;&lt;/a&gt;推荐&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111006385.png&quot; alt=&quot;推荐算法分类&quot; title=&quot;推荐算法分类&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;SVD&quot;&gt;&lt;a href=&quot;#SVD&quot; class=&quot;headerlink&quot; title=&quot;SVD&quot;&gt;&lt;/a&gt;SVD&lt;/h2&gt;&lt;p&gt;Singular Value Decomposition, 奇异值分解&lt;/p&gt;
&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;
假设${\bf{M}}$是一个$m \times n$矩阵，其中的元素全部属于实数域或复数域。那么存在一个分解使得：
$${{\bf{M}}_{m \times n}} = {{\bf{U}}_{m \times m}}{{\bf{\Sigma }}_{m \times n}}{\bf{V}}_{n \times n}^*$$
其中，${\bf{U}}$、${\bf{V}}$分别称为左、右奇异向量，$*$表示共轭转置，${\bf{\Sigma}}$对角线上的值是奇异值，其值按从大到小排列，且下降迅速。因此我们可以用前$r$个奇异值来近似描述原矩阵：
$${{\bf{M}}_{m \times n}} \approx {{\bf{U}}_{m \times r}}{{\bf{\Sigma }}_{r \times r}}{\bf{V}}_{n \times r}^*$$
其中，$r$是一个远小于$m$和$n$的数。

&lt;p&gt;&lt;img src=&quot;http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161212/111041846.png&quot; alt=&quot;SVD 近似&quot; title=&quot;SVD 近似&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据处理" scheme="http://hijacking.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="推荐" scheme="http://hijacking.cn/tags/%E6%8E%A8%E8%8D%90/"/>
    
      <category term="矩阵分解" scheme="http://hijacking.cn/tags/%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3/"/>
    
      <category term="SVD" scheme="http://hijacking.cn/tags/SVD/"/>
    
      <category term="Spark" scheme="http://hijacking.cn/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>Coursera - Scala 函数式程序设计原理 - 学习笔记 (1)</title>
    <link href="http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/"/>
    <id>http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/</id>
    <published>2016-12-07T03:00:01.000Z</published>
    <updated>2016-12-18T04:21:30.599Z</updated>
    
    <content type="html"><![CDATA[<p>此笔记是在学习 Coursera 上 <a href="https://www.coursera.org/learn/progfun1/home" title="课程链接" target="_blank" rel="external"><em>Functional Programming Principles in Scala</em></a> 课程时所整理，方便今后查阅。</p>
<h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="SBT-相关知识以及作业提交"><a href="#SBT-相关知识以及作业提交" class="headerlink" title="SBT 相关知识以及作业提交"></a>SBT 相关知识以及作业提交</h3><p>在 sbt 的术语中，基础目录或者是项目的根目录，指的是包含项目的目录。而 <code>build.sbt</code> 就是基础目录。<br>src的目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">src/</div><div class="line">  main/</div><div class="line">    resources/</div><div class="line">       &lt;files to include in main jar here&gt;</div><div class="line">    scala/</div><div class="line">       &lt;main Scala sources&gt;</div><div class="line">    java/</div><div class="line">       &lt;main Java sources&gt;</div><div class="line">  test/</div><div class="line">    resources</div><div class="line">       &lt;files to include in test jar here&gt;</div><div class="line">    scala/</div><div class="line">       &lt;test Scala sources&gt;</div><div class="line">    java/</div><div class="line">       &lt;test Java sources&gt;</div><div class="line">Other directories in src/ will be ignored. Additionally, all hidden</div><div class="line">directories will be ignored.</div></pre></td></tr></table></figure></p>
<p><code>project/</code> 文件夹下也可能有 <code>.sbt</code>文件，但是它们与基础目录的 sbt 文件作用不同。</p>
<a id="more"></a>
<p>在 sbt 文件所在处打开 CMD，键入<code>sbt</code>指令。sbt 指令只能在 sbt shell 中使用，不能在 Scala REPL 中使用。<br>但是，可以在 sbt shell 中开启Scala解释器，输入<code>console</code>指令。当从sbt中启动解释器的时候，项目中的所有代码会被加载，并且可以直接访问。因此，Scala REPL 只能在项目没有错误的时候才能启动成功。<code>ctrl + D</code>退出。<br>使用 <code>compile</code> 指令编译代码。<br><code>src/test/scala</code> 目录中包含的是测试代码，使用 <code>test</code> 指令进行测试。<br>当项目中有一个 object 对象，并且含有 main 函数（或者是继承自 App），那么可以使用 <code>run</code> 指令运行程序。如果有多个 main 函数，那么会询问执行哪一个。</p>
<h3 id="Scala-Tutorial"><a href="#Scala-Tutorial" class="headerlink" title="Scala Tutorial"></a>Scala Tutorial</h3><p>两种方式实现 HelloWorld：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// #1</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">App</span> </span>&#123;</div><div class="line">  println(<span class="string">"Hello, World!"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// #2</span></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">    println(<span class="string">"Hello, World!"</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>官方文档建议<strong>使用定义 main 函数</strong>的方法来实现，前者有可能出现各种问题。</p>
<h2 id="Functions-amp-Evaluation"><a href="#Functions-amp-Evaluation" class="headerlink" title="Functions &amp; Evaluation"></a>Functions &amp; Evaluation</h2><h3 id="Programming-Paradigms-编程范型"><a href="#Programming-Paradigms-编程范型" class="headerlink" title="Programming Paradigms 编程范型"></a>Programming Paradigms 编程范型</h3><p>函数式编程意味着避免<strong>变化 mutation</strong>。<br>狭义上说，函数式编程FP意味着不使用<strong>变量 mutable variable</strong>、<strong>分配 assignment</strong>、<strong>循环 loop</strong>以及其他<strong>必要的控制结构 imperative control structure</strong>。<br>广义上说，集中注意在程序中的函数上。<br>函数在 FP 语言中是第一等公民：</p>
<ul>
<li>可以在任何地方定义，包括其他函数的内部</li>
<li>可以被当做参数传入以及返回</li>
</ul>
<h3 id="Elements-of-Programming-编程元素"><a href="#Elements-of-Programming-编程元素" class="headerlink" title="Elements of Programming 编程元素"></a>Elements of Programming 编程元素</h3><p>交互式 shell，也被称作 <strong>RELP(Read-Eval-Print-Loop)</strong>，通过输入 scala 开启。<br>Scala 参数与返回值类型：</p>
<ul>
<li>Int：32位整数</li>
<li>Double：64位浮点数</li>
<li>Boolean：布尔值 true 或者 false</li>
</ul>
<p>计算步骤：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 表达式计算：</span></div><div class="line">(<span class="number">2</span> * pi) * radius</div><div class="line">(<span class="number">2</span> * <span class="number">3.14159</span>) * radius</div><div class="line"><span class="number">6.28318</span> * radius</div><div class="line"><span class="number">6.28318</span> * <span class="number">10</span></div><div class="line"><span class="number">62.8318</span></div><div class="line"></div><div class="line"><span class="comment">// 函数计算：</span></div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">2</span>+<span class="number">2</span>)</div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">square(<span class="number">3</span>) + square(<span class="number">4</span>)</div><div class="line"><span class="number">3</span> * <span class="number">3</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * <span class="number">4</span></div><div class="line"><span class="number">9</span> + <span class="number">16</span></div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p>
<p>替代模型 substitution model：<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/121542116.png" alt="替代模型" title="替代模型"></p>
<p>只要没有副作用，所有的表示式都可以用替代模型表示。C++ 这个表达式就具有副作用，因为每次计算后C的值都会改变，并不是所有的表达式最后都会计算出一个值（在有限的步骤内），例如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span></span>: <span class="type">Int</span> = loop</div><div class="line"><span class="comment">// 调用</span></div><div class="line">loop</div></pre></td></tr></table></figure></p>
<p>Call-by-name and Call-by-value：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// call-by-value</span></div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">2</span>+<span class="number">2</span>)</div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">4</span>)</div><div class="line">square(<span class="number">3</span>) + square(<span class="number">4</span>)</div><div class="line"><span class="number">3</span> * <span class="number">3</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + square(<span class="number">4</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * <span class="number">4</span></div><div class="line"><span class="number">9</span> + <span class="number">16</span></div><div class="line"><span class="number">25</span></div><div class="line"></div><div class="line"><span class="comment">// call-by-name</span></div><div class="line">sumOfSquares(<span class="number">3</span>, <span class="number">2</span>+<span class="number">2</span>)</div><div class="line">square(<span class="number">3</span>) + square(<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">3</span> * <span class="number">3</span> + square(<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">9</span> + square(<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">9</span> + (<span class="number">2</span>+<span class="number">2</span>) * (<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * (<span class="number">2</span>+<span class="number">2</span>)</div><div class="line"><span class="number">9</span> + <span class="number">4</span> * <span class="number">4</span></div><div class="line"><span class="number">9</span> + <span class="number">16</span></div><div class="line"><span class="number">25</span></div></pre></td></tr></table></figure></p>
<p>call-by-value：每个函数参数都只计算一次<br>call-by-name：当对应该的参数在函数计算体内没有被时用到的话，就不会被计算<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// which strategy is fastest?</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = x * x</div><div class="line"></div><div class="line">test(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">// same</span></div><div class="line">test(<span class="number">3</span>+<span class="number">4</span>, <span class="number">8</span>) <span class="comment">// CBV</span></div><div class="line">test(<span class="number">7</span>, <span class="number">2</span>*<span class="number">4</span>) <span class="comment">// CBN</span></div><div class="line">test(<span class="number">3</span>+<span class="number">4</span>, <span class="number">2</span>*<span class="number">4</span>) <span class="comment">//same</span></div></pre></td></tr></table></figure></p>
<h3 id="Evaluation-Strategies-and-Termination-计算策略与终止"><a href="#Evaluation-Strategies-and-Termination-计算策略与终止" class="headerlink" title="Evaluation Strategies and Termination 计算策略与终止"></a>Evaluation Strategies and Termination 计算策略与终止</h3><p>如果表达式 e 的 CBV 计算终止了，那么 CBN 的计算也会终止；反过来则不一定是正确的。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span></span>(x: <span class="type">Int</span>, y: <span class="type">Int</span>) = x</div><div class="line"></div><div class="line"><span class="comment">// CBN</span></div><div class="line">first(<span class="number">1</span>, loop)</div><div class="line"></div><div class="line"><span class="comment">// CBV</span></div><div class="line">first(<span class="number">1</span>, loop)</div></pre></td></tr></table></figure></p>
<p>Scala 通常使用上的计算策略是 call-by-value ，但是如果一个参数类型以 <code>=&gt;</code>开头，那么它使用的策略是 call-by-name：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">constOne</span></span>(x: <span class="type">Int</span>, y: =&gt; <span class="type">Int</span>) = <span class="number">1</span></div><div class="line"></div><div class="line">constOne(<span class="number">1</span>+<span class="number">2</span>, loop) <span class="comment">// 1</span></div><div class="line"></div><div class="line">constOne(loop, <span class="number">1</span>+<span class="number">2</span>) <span class="comment">// loop</span></div></pre></td></tr></table></figure></p>
<h3 id="Conditionals-and-Value-Definitions-条件语句与值定义"><a href="#Conditionals-and-Value-Definitions-条件语句与值定义" class="headerlink" title="Conditionals and Value Definitions 条件语句与值定义"></a>Conditionals and Value Definitions 条件语句与值定义</h3><p><code>if-else</code>在 Scala 中用作表达式，而不是声明：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span></span>(x: <span class="type">Int</span>) = <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) x <span class="keyword">else</span> -x</div></pre></td></tr></table></figure></p>
<p>值定义也没有 by-name 与 by-value，<code>def</code>用来定义 by-name,每一次时候都会重新进行计算；而 <code>val</code> 用来定义 by-value，val 的值只会计算一次：<br>def 和 val 的区别在等式右边的表达式不会终止的时候很明显：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span></span>: <span class="type">Boolean</span> = loop</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span> </span>= loop <span class="comment">// OK</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> x = loop <span class="comment">// lead to an infinite loop</span></div></pre></td></tr></table></figure></p>
<p><code>&amp;&amp;</code> 和 <code>||</code> 可以写成：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// and</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">and</span></span>(x:<span class="type">Boolean</span>,y:=&gt;<span class="type">Boolean</span>) = <span class="keyword">if</span>(x) y <span class="keyword">else</span> <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">or</span></span>(x:<span class="type">Boolean</span>,y:=&gt;<span class="type">Boolean</span>) = <span class="keyword">if</span>(x) <span class="literal">true</span> <span class="keyword">else</span> y</div></pre></td></tr></table></figure></p>
<h3 id="Example-square-roots-with-Newton’s-method-使用牛顿方法实现平方根"><a href="#Example-square-roots-with-Newton’s-method-使用牛顿方法实现平方根" class="headerlink" title="Example square roots with Newton’s method 使用牛顿方法实现平方根"></a>Example square roots with Newton’s method 使用牛顿方法实现平方根</h3><p>实现平方根算法：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">abs</span></span>(x: <span class="type">Double</span>) = <span class="keyword">if</span> (x &lt; <span class="number">0</span>) -x <span class="keyword">else</span> x</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrtIter</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>): <span class="type">Double</span> =</div><div class="line">  <span class="keyword">if</span> (isGoodEnough(guess, x)) guess</div><div class="line">  <span class="keyword">else</span> sqrtIter(improve(guess, x), x)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isGoodEnough</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) =</div><div class="line">  abs(guess * guess - x) / x &lt; <span class="number">0.001</span> <span class="comment">// instead of abs(guess * guess - x) &lt; 0.001</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">improve</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) =</div><div class="line">  (guess + x / guess) / <span class="number">2</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = sqrtIter(<span class="number">1.0</span>, x)</div><div class="line"></div><div class="line">sqrt(<span class="number">2</span>)</div><div class="line">sqrt(<span class="number">4</span>)</div><div class="line">sqrt(<span class="number">1e-6</span>)</div><div class="line">sqrt(<span class="number">1e60</span>)</div></pre></td></tr></table></figure></p>
<h3 id="Blocks-and-Lexical-Scope-块代码以及词法作用域"><a href="#Blocks-and-Lexical-Scope-块代码以及词法作用域" class="headerlink" title="Blocks and Lexical Scope 块代码以及词法作用域"></a>Blocks and Lexical Scope 块代码以及词法作用域</h3><p>将一个任务分解成若干个函数实现是很好的编程风格，但是 sqrtIter, improve, isGoodEnough 这个方法知识 sqrt 的实现，而不是使用。<br>因此，我们可以将这个函数放到另外一个函数的内部，这样还可以有效避免<strong>命名空间污染 name-space pollution</strong>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sqrtIter</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>): <span class="type">Double</span> =</div><div class="line">    <span class="keyword">if</span> (isGoodEnough(guess, x)) guess</div><div class="line">    <span class="keyword">else</span> sqrtIter(improve(guess, x), x)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isGoodEnough</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) =</div><div class="line">    abs(guess * guess - x) / x &lt; <span class="number">0.001</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">improve</span></span>(guess: <span class="type">Double</span>, x: <span class="type">Double</span>) =</div><div class="line">    (guess + x / guess) / <span class="number">2</span></div><div class="line"></div><div class="line">  sqrtIter(<span class="number">1.0</span>, x)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Scala 中的 Block：<br>block 定义在一堆花括号中<code>{...}</code>，内部包含了一系列的定义和表达式，block 的最后一个元素代表了它的值，block 自身是表达式，表达式可以出现在哪儿，block 就能出现在哪儿。<br>block 内部的定义只有在 block 内部是可见的，外部不可见。而外部的定义只要没有在内部重新被定义，那么内部可以直接使用外部的定义。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> x = <span class="number">0</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(y: <span class="type">Int</span>) = y + <span class="number">1</span></div><div class="line"><span class="keyword">val</span> result = &#123;</div><div class="line">  <span class="keyword">val</span> x = f(<span class="number">3</span>)</div><div class="line">  x * x</div><div class="line">&#125; + x <span class="comment">// result = 16</span></div></pre></td></tr></table></figure></p>
<p>除非定义在 block 内部被遮蔽 shadow 了，它都是可见的。因此，可以通过清除多余的变量来使程序变得简洁，sqrt 可以简化如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sqrtIter</span></span>(guess: <span class="type">Double</span>): <span class="type">Double</span> =</div><div class="line">    <span class="keyword">if</span> (isGoodEnough(guess)) guess</div><div class="line">    <span class="keyword">else</span> sqrtIter(improve(guess))</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">isGoodEnough</span></span>(guess: <span class="type">Double</span>) =</div><div class="line">    abs(guess * guess - x) / x &lt; <span class="number">0.001</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">improve</span></span>(guess: <span class="type">Double</span>) =</div><div class="line">    (guess + x / guess) / <span class="number">2</span></div><div class="line"></div><div class="line">  sqrtIter(<span class="number">1.0</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果一个表达式太长，通常会将表达式写成多行，但是：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">someLongExpression</div><div class="line">+ someOtherExpression</div><div class="line"></div><div class="line"><span class="comment">// 相当于</span></div><div class="line">someLongExpression;</div><div class="line">+ someOtherExpression</div></pre></td></tr></table></figure></p>
<p>通常会被当做是两个表达式，可以通过加小括号或者使+放在第一行来告诉 Scala，这个表达式还没有结束，如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(someLongExpression</div><div class="line">+ someOtherExpression)</div><div class="line"></div><div class="line">someLongExpression +</div><div class="line">someOtherExpression</div></pre></td></tr></table></figure></p>
<h3 id="Tail-Recursion-尾递归"><a href="#Tail-Recursion-尾递归" class="headerlink" title="Tail Recursion 尾递归"></a>Tail Recursion 尾递归</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">	<span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line"><span class="comment">// rewrite</span></div><div class="line">gcd(<span class="number">14</span>, <span class="number">21</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="number">21</span> == <span class="number">0</span>) <span class="number">14</span> <span class="keyword">else</span> gcd(<span class="number">21</span>, <span class="number">14</span> % <span class="number">21</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="literal">false</span>) <span class="number">14</span> <span class="keyword">else</span> gcd(<span class="number">21</span>, <span class="number">14</span> % <span class="number">21</span>)</div><div class="line">→ gcd(<span class="number">21</span>, <span class="number">14</span> % <span class="number">21</span>)</div><div class="line">→ gcd(<span class="number">21</span>, <span class="number">14</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="number">14</span> == <span class="number">0</span>) <span class="number">21</span> <span class="keyword">else</span> gcd(<span class="number">14</span>, <span class="number">21</span> % <span class="number">14</span>)</div><div class="line">→→ gcd(<span class="number">14</span>, <span class="number">7</span>)</div><div class="line">→→ gcd(<span class="number">7</span>, <span class="number">0</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="number">0</span> == <span class="number">0</span>) <span class="number">7</span> <span class="keyword">else</span> gcd(<span class="number">0</span>, <span class="number">7</span> % <span class="number">0</span>)</div><div class="line">→ <span class="number">7</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">	<span class="keyword">if</span> (n == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</div><div class="line"><span class="comment">// rewrite</span></div><div class="line">factorial(<span class="number">4</span>)</div><div class="line">→ <span class="keyword">if</span> (<span class="number">4</span> == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">4</span> * factorial(<span class="number">4</span> - <span class="number">1</span>)</div><div class="line">→→ <span class="number">4</span> * factorial(<span class="number">3</span>)</div><div class="line">→→ <span class="number">4</span> * (<span class="number">3</span> * factorial(<span class="number">2</span>))</div><div class="line">→→ <span class="number">4</span> * (<span class="number">3</span> * (<span class="number">2</span> * factorial(<span class="number">1</span>)))</div><div class="line">→→ <span class="number">4</span> * (<span class="number">3</span> * (<span class="number">2</span> * (<span class="number">1</span> * factorial(<span class="number">0</span>)))</div><div class="line">→→ <span class="number">4</span> * (<span class="number">3</span> * (<span class="number">2</span> * (<span class="number">1</span> * <span class="number">1</span>)))</div><div class="line">→→ <span class="number">120</span></div></pre></td></tr></table></figure>
<p>两个函数的区别，前者不停地摆动，<code>gcd(14,21) -&gt; gcd(21,14) -&gt; gcd(14,7) -&gt; gcd(7,0)</code>,但是总会重新变成对gcd的调用；后者中，每隔几步，我们都会增加一个新的元素到表达式中，表达式越来越长，直到简化到最后的结果。<br><strong>尾递归tail recursion</strong><br>一个函数在最后一步的时候调用它<strong>自己</strong>，而不能是自己去其他操作的混合操作，这样，这个函数的栈帧 stack frame 可以被重用，被称为尾递归。gcd 函数属于尾递归，而 factorial 函数不属于尾递归。<em>尾递归的判断标准是函数运行最后一步是否调用自身，而不是是否在函数的最后一行调用自身。</em></p>
<blockquote>
<p>function story() {<br>从前有座山，山上有座庙，庙里有个老和尚，一天老和尚对小和尚讲故事：story() // 尾递归，进入下一个函数不再需要上一个函数的环境了，得出结果以后直接返回。<br>}<br>function story() {<br>从前有座山，山上有座庙，庙里有个老和尚，一天老和尚对小和尚讲故事：story()，小和尚听了，找了块豆腐撞死了 // 非尾递归，下一个函数结束以后此函数还有后续，所以必须保存本身的环境以供处理返回值。<br>}</p>
<p>来源<br>作者：酿泉<br>链接：<a href="http://www.zhihu.com/question/20761771/answer/23254340" target="_blank" rel="external">http://www.zhihu.com/question/20761771/answer/23254340</a></p>
</blockquote>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通递归调用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial</span></span>(n: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> n * factorial(n - <span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="comment">// 尾递归调用</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorial2</span></span>(n:<span class="type">Int</span>, result:<span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) result <span class="keyword">else</span> factorial2(n<span class="number">-1</span>, result * n)</div><div class="line"></div><div class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></div><div class="line">factorial2(<span class="number">5</span>,<span class="number">1</span>) <span class="comment">// 120</span></div><div class="line"></div><div class="line"><span class="comment">// 普通递归调用</span></div><div class="line">function f(x) &#123;</div><div class="line">   <span class="keyword">if</span> (x === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   <span class="keyword">return</span> <span class="number">1</span> + f(x<span class="number">-1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 尾递归调用</span></div><div class="line">function f(x) &#123;</div><div class="line">   <span class="keyword">if</span> (x === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">   <span class="keyword">return</span> f(x<span class="number">-1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><h3 id="Higher-Order-Functions-高阶函数"><a href="#Higher-Order-Functions-高阶函数" class="headerlink" title="Higher-Order Functions 高阶函数"></a>Higher-Order Functions 高阶函数</h3><p>函数式编程语言把函数看成是 <strong>第一等值first-class value</strong>，也就是说，函数可以被当成参数传递给一个函数或者当成一个结果返回。而将函数当成参数传给另一个函数，或者将函数当做结果返回被称之为高阶函数。<br>函数类型：<br>使用<code>A =&gt; B</code>来表示函数类型，它表示，这个函数接受一个参数类型 A，并且返回结果是类型 B。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (a &gt; b) <span class="number">0</span></div><div class="line">  <span class="keyword">else</span> f(a) + sum(f, a+<span class="number">1</span>, b)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumInt</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(id, a, b)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumCube</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(cube, a, b)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumFact</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) = sum(fact, a, b)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">id</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = x</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = x * x * x</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> x * fact(x<span class="number">-1</span>)</div><div class="line"></div><div class="line">sumInt(<span class="number">0</span>,<span class="number">2</span>)</div><div class="line">sumCube(<span class="number">0</span>,<span class="number">2</span>)</div><div class="line">sumFact(<span class="number">0</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>但是，这样会有一个问题，我们创建了很多小的函数，如 id、cube、fact，这样会显得程序很臃肿，因此介绍函数字面量 function literal，又被称为<strong>匿名函数 anonymous function</strong>。例如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// (x: Int)是函数的参数，x*x*x是函数体</span></div><div class="line"><span class="comment">// 其中，参数的类型可以省略，因为编辑器可以根据上下文自动推断出类型</span></div><div class="line">(x: <span class="type">Int</span>) =&gt; x * x * x</div><div class="line"><span class="comment">// same as</span></div><div class="line">x =&gt; x * x * x</div><div class="line"><span class="comment">// 接收多个参数的函数</span></div><div class="line">(x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y</div><div class="line"><span class="comment">// same as</span></div><div class="line">(x, y) =&gt; x + y</div></pre></td></tr></table></figure></p>
<p>匿名函数是一种语法糖，可以让程序更加好写，<code>(x1: T1, …, xn: Tn) =&gt; E</code> 可以使用def来定义：<br><code>{ def f(x1: T1, …, xn: Tn) = E; f }</code>。</p>
<h3 id="Currying-柯西里化"><a href="#Currying-柯西里化" class="headerlink" title="Currying 柯西里化"></a>Currying 柯西里化</h3><p>函数返回值为函数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 接收参数是一个函数，返回值也是一个函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>) : (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span> = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sumF</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>) : <span class="type">Int</span> =</div><div class="line">    <span class="keyword">if</span> (a &gt; b) <span class="number">0</span></div><div class="line">    <span class="keyword">else</span> f(a) + sumF(a + <span class="number">1</span>, b)</div><div class="line">  sumF</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 上面代码可以改写</span></div><div class="line"><span class="comment">// 这里就没有了重复的参数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumInts</span> </span>= sum(x =&gt; x)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumCubes</span> </span>= sum(x =&gt; x * x * x)</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumFactorials</span> </span>= sum(fact)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span></span>(x: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">  <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="number">1</span></div><div class="line">  <span class="keyword">else</span> x * fact(x - <span class="number">1</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">sumCubes(<span class="number">1</span>, <span class="number">10</span>) + sumFactorials(<span class="number">10</span>, <span class="number">20</span>) <span class="comment">// 267634641</span></div><div class="line"></div><div class="line"><span class="comment">// 可以直接跳过定义辅助函数</span></div><div class="line">sum(x =&gt; x)(<span class="number">1</span>, <span class="number">10</span>) <span class="comment">// 55</span></div></pre></td></tr></table></figure></p>
<p>转化为多参数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 使用语法糖，进一步改写</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>)(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> =</div><div class="line">  <span class="keyword">if</span> (a &gt; b) <span class="number">0</span> <span class="keyword">else</span> f(a) + sum(f)(a + <span class="number">1</span>, b)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/121639283.png" alt="多个参数" title="多个参数"></p>
<p>那么，上面 sum 函数的类型是什么？<br>类型为 <code>(Int =&gt; Int) =&gt; (Int, Int) =&gt; Int</code>，函数类型为右结合，也就是说，<code>Int =&gt; Int =&gt; Int</code> 相当于 <code>Int =&gt; (Int =&gt; Int)</code>。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">mapReduce</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>, combine: (<span class="type">Int</span>, <span class="type">Int</span>) =&gt; <span class="type">Int</span>, zero: <span class="type">Int</span>)(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</div><div class="line">  <span class="keyword">if</span> (a&gt;b) zero</div><div class="line">  <span class="keyword">else</span> combine(f(a), mapReduce(f, combine, zero)(a+<span class="number">1</span>, b))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span></span>(f: <span class="type">Int</span> =&gt; <span class="type">Int</span>)(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = mapReduce(f, (x, y) =&gt; x * y, <span class="number">1</span>)(a, b)</div><div class="line"></div><div class="line">product(x =&gt; x)(<span class="number">1</span>, <span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>当 mapReduce函数 与 product 函数中间出现其他函数定义的时候，可能会报错：<br>multiple markers at this line<br>- forward reference extends over definition of value res\$0<br>- forward reference extends over definition of value res\$1</p>
<h3 id="Example-Finding-Fixed-Points-例子：找不动点"><a href="#Example-Finding-Fixed-Points-例子：找不动点" class="headerlink" title="Example Finding Fixed Points 例子：找不动点"></a>Example Finding Fixed Points 例子：找不动点</h3><p>不动点：x = f(x) 如果一个 x 的值满足前面的等式，那么可以看成是这个函数的不动点。<br>因此，我们可以通过找不动点的方法来实现 sqrt。sqrt(x) 是方程 y =&gt; x / y 的不动点，但是这样计算不能够收敛于一点，于是我们通过与原值取平均的方法来使其收敛，并且可以将其抽取出一个函数：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scala.math._</div><div class="line"></div><div class="line"><span class="keyword">val</span> tolerance = <span class="number">0.0001</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isCloseEnough</span></span>(x: <span class="type">Double</span>, y: <span class="type">Double</span>) =</div><div class="line">  abs((x - y) / x) / x &lt; tolerance</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fixedPoint</span></span>(f: <span class="type">Double</span> =&gt; <span class="type">Double</span>)(firstGuess: <span class="type">Double</span>) = &#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">iterate</span></span>(guess: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</div><div class="line">    println(<span class="string">s"guess = <span class="subst">$guess</span>"</span>)</div><div class="line">    <span class="keyword">val</span> next = f(guess)</div><div class="line">    <span class="keyword">if</span> (isCloseEnough(guess, next)) next</div><div class="line">    <span class="keyword">else</span> iterate(next)</div><div class="line">  &#125;</div><div class="line">  iterate(firstGuess)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//fixedPoint(x =&gt; 1 + x/2)(1)</span></div><div class="line"><span class="comment">//fixedPoint(x =&gt; cos(x))(1)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">averageDamp</span></span>(f: <span class="type">Double</span> =&gt; <span class="type">Double</span>)(x: <span class="type">Double</span>) = (x + f(x)) / <span class="number">2</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sqrt</span></span>(x: <span class="type">Double</span>) = fixedPoint(averageDamp(y =&gt; x / y))(<span class="number">1.0</span>)</div><div class="line"></div><div class="line">sqrt(<span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<h3 id="Scala-Syntax-Summary-语法总结"><a href="#Scala-Syntax-Summary-语法总结" class="headerlink" title="Scala Syntax Summary 语法总结"></a>Scala Syntax Summary 语法总结</h3><p>扩展的巴科斯范式 <strong>EBNF(Extended Backus-Naur form)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- | 表示可选</div><div class="line">- [...] 表示选择（0 或 1）</div><div class="line">- &#123;...&#125; 表示反复（0 或更多）</div></pre></td></tr></table></figure></p>
<p>Types 类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Type			= SimpleType | FunctionType</div><div class="line">FunctionType	= SimpleType &apos;=&gt;&apos; Type</div><div class="line">				| &apos;(&apos; [Types] &apos;)&apos; &apos;=&gt;&apos; Type</div><div class="line">SimpleType		= Ident</div><div class="line">Types			= Type &#123;&apos;,&apos; Type&#125;</div></pre></td></tr></table></figure></p>
<p>A type can be:</p>
<ul>
<li>A <code>numeric</code> type: Int, Double (and Byte, Short, Char, Long, Float)</li>
<li>The <code>Boolean</code> type with the value true and false</li>
<li>The <code>String</code> type</li>
<li>A <code>function</code> type, like Int =&gt; Int, (Int, Int) =&gt; Int</li>
</ul>
<p>Expressions 类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Expr		= InfixExpr | FunctionExpr</div><div class="line">			| if &apos;(&apos; Expr &apos;)&apos; Expr else Expr</div><div class="line">InfixExpr 	= PrefixExpr | InfixExpr Operator InfixExpr</div><div class="line">Operator 	= ident</div><div class="line">PrefixExpr 	= [&apos;+&apos; | &apos;-&apos; | &apos;!&apos; | &apos;~&apos; ] SimpleExpr</div><div class="line">SimpleExpr 	= ident | literal | SimpleExpr &apos;.&apos; ident</div><div class="line">			| Block</div><div class="line">FunctionExpr = Bindings &apos;=&gt;&apos; Expr</div><div class="line">Bindings 	= ident [&apos;:&apos; SimpleType ]</div><div class="line">			| &apos;(&apos; [ Binding &#123;&apos;,&apos; Binding &#125;] &apos;)&apos;</div><div class="line">Binding 	= ident [&apos;:&apos; Type ]</div><div class="line">Block 		= &apos;&#123;&apos; &#123; Def &apos;;&apos;&#125; Expr &apos;&#125;&apos;</div></pre></td></tr></table></figure></p>
<p>An expression can be:</p>
<ul>
<li>An <code>identifier</code> such as x, isGoodEnough</li>
<li>A <code>literal</code>, like 0, 1.0, “abc”</li>
<li>A <code>function application</code>, like sqrt(x)</li>
<li>An <code>operator application</code>, like -x, y + x</li>
<li>A <code>selection</code>, like math.abs</li>
<li>A <code>conditional expression</code>, like if (x &lt; 0) -x else x</li>
<li>A <code>block</code>, like { val x = math.abs(y) ; x * 2 }</li>
<li>An <code>anonymous function</code>, like x =&gt; x + 1</li>
</ul>
<p>Definitions<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Def			= FunDef | ValDef</div><div class="line">FunDef		= def ident &#123;‘(’ [ Parameters ] ‘)’&#125;</div><div class="line">			[‘:’ Type ] ‘=’ Expr</div><div class="line">ValDef 		= val ident [‘:’ Type ] ‘=’ Expr</div><div class="line">Parameter 	= ident ‘:’ [ ‘=&gt;’ ] Type</div><div class="line">Parameters 	= Parameter &#123;‘,’ Parameter &#125;</div></pre></td></tr></table></figure></p>
<p>A definition can be:</p>
<ul>
<li>A function definition, like def square(x: Int) = x * x</li>
<li>A value definition, like val y = square(2)</li>
</ul>
<p>A parameter can be:</p>
<ul>
<li>A call-by-value parameter, like (x: Int)</li>
<li>A call-by-name parameter, like (y: =&gt; Double)</li>
</ul>
<h3 id="Functions-and-Data-函数和数据"><a href="#Functions-and-Data-函数和数据" class="headerlink" title="Functions and Data 函数和数据"></a>Functions and Data 函数和数据</h3><p>类：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样的语句定义了两个实体：</p>
<ul>
<li>一个新的<strong>类型</strong>，名字叫做 Rational</li>
<li>一个<strong>构造器</strong>Rational，用来创建这种类型的元素</li>
</ul>
<p>对象：<br>一个类型在程序中本质上是一系列的值，而属于一个类型的值称作对象，并且使用 <code>new</code> 操作符和类的构造器来创建一个对象。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>定义类中的函数称之为方法。</p>
<h3 id="More-Fun-With-Rationals-更多关于有理数的内容"><a href="#More-Fun-With-Rationals-更多关于有理数的内容" class="headerlink" title="More Fun With Rationals 更多关于有理数的内容"></a>More Fun With Rationals 更多关于有理数的内容</h3><p>通过选择不同的数据实现方式，但是使用者不会察觉到的这种能力，我们称之为<strong>数据抽象 data abstraction</strong>。<br><strong>自我引用 self reference</strong><br>在一个类的内部，this 关键字代表了当前方法正在执行的那个对象上。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">gcd</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>): <span class="type">Int</span> = <span class="keyword">if</span> (b == <span class="number">0</span>) a <span class="keyword">else</span> gcd(b, a % b)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">val</span> g = gcd(x, y)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">numer</span> </span>= x / g</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">denom</span> </span>= y / g</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">less</span></span>(another: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">this</span>.numer * another.denom &lt; <span class="keyword">this</span>.denom * another.numer</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(another: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.less(another)) another <span class="keyword">else</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(another: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">new</span> <span class="type">Rational</span>(</div><div class="line">      numer * another.denom + denom * another.numer,</div><div class="line">      denom * another.denom)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">neg</span> </span>= <span class="keyword">new</span> <span class="type">Rational</span>(-numer, denom)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sub</span></span>(another: <span class="type">Rational</span>) = add(another.neg)</div><div class="line"></div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>=</div><div class="line">    numer + <span class="string">"/"</span> + denom</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以使用 <code>require</code> 来限定构建一个新的对象必须满足的条件，如果不满足这样的条件，提示错误信息，我们称为 <code>前提precondition</code>。<br>除了 require 之外，我们还有 <code>assert</code> 函数，assert 同样接收一个条件和一个可选的提示信息。但是不同的是，assert 抛出的是 AssertionError，而 require 抛出的是 IllegalArgumentException。<br>这表明，它们使用的目的不同：</p>
<ul>
<li>require 被用来强制规定一个函数调用者的先决条件</li>
<li>assert 被用来检验函数自身的代码</li>
</ul>
<p>在 Scala 中，类隐性地定义了一个构造器，称之为类的<strong>主构造器 primary constructor</strong>。主构造器取得类的所有参数，并且执行类体内的全部语句。<br>像 Java 一样，我们可以设置不同的构造器，实现如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  ...</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(x: <span class="type">Int</span>) = <span class="keyword">this</span>(x, <span class="number">1</span>)</div><div class="line">  </div><div class="line">  ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>this 用作函数名的时候表示这是类的另一个构造器，并且后面调用了类的主构造器。</p>
<h3 id="Evaluation-and-Operators-求值与操作符"><a href="#Evaluation-and-Operators-求值与操作符" class="headerlink" title="Evaluation and Operators 求值与操作符"></a>Evaluation and Operators 求值与操作符</h3><p><code>求值evaluation</code><br>类的定义如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">x1, ..., xm</span>) </span>&#123; ... <span class="function"><span class="keyword">def</span> <span class="title">f</span></span>(y1, ..., yn) = b ... &#125;</div><div class="line"></div><div class="line"><span class="comment">// 下面表达式的值如何计算？</span></div><div class="line"><span class="keyword">new</span> <span class="type">C</span>(v1, ..., vm).f(w1, ..., wn)</div></pre></td></tr></table></figure></p>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/121747439.png" alt="答案" title="答案"><br><code>/</code> 代表，用左边的值替换表达式中右边的值。<br>Example:<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>).numer</div><div class="line">→ [<span class="number">1</span>/x, <span class="number">2</span>/y][][<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)/<span class="keyword">this</span>] x</div><div class="line">= <span class="number">1</span> <span class="comment">// 1 for x</span></div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>).less(<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">2</span>, <span class="number">3</span>))</div><div class="line">→ [<span class="number">1</span>/x, <span class="number">2</span>/y][<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">2</span>, <span class="number">3</span>)/that][<span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>)/<span class="keyword">this</span>] <span class="keyword">this</span>.numer * that.denom &lt; that.numer * <span class="keyword">this</span>.denom</div><div class="line">= <span class="keyword">new</span> <span class="type">Ration</span>(<span class="number">1</span>, <span class="number">2</span>).numer * <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">2</span>, <span class="number">3</span>).denom &lt; <span class="keyword">new</span> <span class="type">Ration</span>(<span class="number">2</span>, <span class="number">3</span>).numer * <span class="keyword">new</span> <span class="type">Rational</span>(<span class="number">1</span>, <span class="number">2</span>).denom</div><div class="line">→→ <span class="number">1</span> * <span class="number">3</span> &lt; <span class="number">2</span> * <span class="number">2</span></div><div class="line">→→ <span class="literal">true</span></div></pre></td></tr></table></figure></p>
<p><code>操作符operator</code><br>任何接收一个参数的方法都可以想一个插入的操作符一样使用，例如：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r add s							r.add(s)</div><div class="line">r less s	<span class="comment">/* in place of */</span>	r.less(s)</div><div class="line">r max s							r.max(s)</div></pre></td></tr></table></figure></p>
<p>在Scala中，操作符可以当做标识符，因此，标示符可以是：</p>
<ul>
<li>数字、字母组合：以字母开头，后面跟着一系列的字母或者数字</li>
<li>符号：以一个操作符开头，后面跟着其他的操作符</li>
<li>下划线符号 ‘_’ 被当做一个字母</li>
<li>数字、字母组合的标识符同样可以下划线加操作符结尾</li>
</ul>
<p>以下操作符都是合法的：<br>x1<br>*<br>+?%&amp;<br>vector<em>++<br>counter</em>=<br>由于在Scala中，前置的操作符，例如负数操作符 <code>-</code> 和中间的操作符，例如减号操作符 <code>-</code> 是不同的，因此需要进行特殊的转换，使用前缀 <code>unary_</code> 加上操作符来表示。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rational</span>(<span class="params">x: <span class="type">Int</span>, y: <span class="type">Int</span></span>) </span>&#123;</div><div class="line">  ...</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">&lt;</span> </span>(that: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">this</span>.numer * that.denom &lt; <span class="keyword">this</span>.denom * that.numer</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">max</span></span>(that: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> &lt; that) that <span class="keyword">else</span> <span class="keyword">this</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">+</span> </span>(another: <span class="type">Rational</span>) =</div><div class="line">    <span class="keyword">new</span> <span class="type">Rational</span>(</div><div class="line">      numer * another.denom + denom * another.numer,</div><div class="line">      denom * another.denom)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unary_-</span> </span>: <span class="type">Rational</span> = <span class="keyword">new</span> <span class="type">Rational</span>(-numer, denom)</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">-</span> </span>(another: <span class="type">Rational</span>) = <span class="keyword">this</span> + -another</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>需要注意的是， 如果一个方法以符号结尾，那么它与返回值: 之间必须要有空格隔开，否则会报错，因为冒号也是一个合法的符号，编译器会把冒号也看成是方法名的一部分。<br>操作符的优先级：<br>取决于它的第一个字符，如下表优先级依次变大：<br>(all letters)<br>|<br>^<br>&amp;<br>&lt; &gt;<br>= !<br>:<br>+ -<br>* / %<br>(all other special characters)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a + b ^? c ?^ d less a ==&gt; b | c</div><div class="line">=&gt;</div><div class="line">a + b ^? (c ?^ d) less a ==&gt; b | c</div><div class="line">(a + b) ^? (c ?^ d) less a ==&gt; b | c</div><div class="line">(a + b) ^? (c ?^ d) less (a ==&gt; b) | c</div><div class="line">((a + b) ^? (c ?^ d)) less (a ==&gt; b) | c</div><div class="line">((a + b) ^? (c ?^ d)) less ((a ==&gt; b) | c)</div></pre></td></tr></table></figure></p>
<h3 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h3><p>自己编写 test 测试，内容的格式如下：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">test(<span class="string">"adding ints"</span>) &#123;</div><div class="line">	assert(<span class="number">1</span> + <span class="number">2</span> === <span class="number">4</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试名称叫做 add ints，asser t表示尝试进行 === 左边的操作，看是否与右边的结果相等，不相等则测试不通过，输出测试名称，以及测试没有通过的原因。如果使用 == 则只报错不输出原因。<br>如果暂时不需要对写好的某个测试犯法执行，那么将 test 改成 ignore，就不会执行。<br>我们可能需要给同样的测试对象实现不同的方法，一种办法是重复创建多次，更简便的方法是创建一个与测试分离的特征 trait 中，这样当我们创建 trait 实例的时候我们可以访问内部的所有变量。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">trait</span> <span class="title">TestSets</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> s1 = singletonSet(<span class="number">1</span>)</div><div class="line">    <span class="keyword">val</span> s2 = singletonSet(<span class="number">2</span>)</div><div class="line">    <span class="keyword">val</span> s3 = singletonSet(<span class="number">3</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">new</span> <span class="type">TestSets</span> &#123;</div><div class="line">    assert(contains(s1, <span class="number">2</span>), <span class="string">"Singleton"</span>) <span class="comment">// FunSets.contains($anon.this.s1, 2) was false Singleton</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>未完，接<a href="http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part2/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/">http://hijacking.cn/2016/12/07/Coursera-FP-in-Scala-Note-Part1/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此笔记是在学习 Coursera 上 &lt;a href=&quot;https://www.coursera.org/learn/progfun1/home&quot; title=&quot;课程链接&quot;&gt;&lt;em&gt;Functional Programming Principles in Scala&lt;/em&gt;&lt;/a&gt; 课程时所整理，方便今后查阅。&lt;/p&gt;
&lt;h2 id=&quot;Getting-Started&quot;&gt;&lt;a href=&quot;#Getting-Started&quot; class=&quot;headerlink&quot; title=&quot;Getting Started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;&lt;h3 id=&quot;SBT-相关知识以及作业提交&quot;&gt;&lt;a href=&quot;#SBT-相关知识以及作业提交&quot; class=&quot;headerlink&quot; title=&quot;SBT 相关知识以及作业提交&quot;&gt;&lt;/a&gt;SBT 相关知识以及作业提交&lt;/h3&gt;&lt;p&gt;在 sbt 的术语中，基础目录或者是项目的根目录，指的是包含项目的目录。而 &lt;code&gt;build.sbt&lt;/code&gt; 就是基础目录。&lt;br&gt;src的目录结构：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;src/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  main/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resources/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;files to include in main jar here&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    scala/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;main Scala sources&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    java/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;main Java sources&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  test/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    resources&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;files to include in test jar here&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    scala/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;test Scala sources&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    java/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &amp;lt;test Java sources&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Other directories in src/ will be ignored. Additionally, all hidden&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;directories will be ignored.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;project/&lt;/code&gt; 文件夹下也可能有 &lt;code&gt;.sbt&lt;/code&gt;文件，但是它们与基础目录的 sbt 文件作用不同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="大数据处理" scheme="http://hijacking.cn/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
      <category term="Scala" scheme="http://hijacking.cn/tags/Scala/"/>
    
      <category term="Coursera" scheme="http://hijacking.cn/tags/Coursera/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Blog 同步备份</title>
    <link href="http://hijacking.cn/2016/12/06/Hexo-Backup/"/>
    <id>http://hijacking.cn/2016/12/06/Hexo-Backup/</id>
    <published>2016-12-06T12:21:44.000Z</published>
    <updated>2016-12-18T04:23:20.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备份电脑A："><a href="#备份电脑A：" class="headerlink" title="备份电脑A："></a>备份电脑A：</h2><p>1.在 Github 上新建一个仓库，例如 blog。<br>2.上传电脑A本地Hexo博客的源文件到 Github 的 blog 仓库中：<br>1) 删除根目录和主题目录下的 <code>.git</code> 文件夹<br>2) 修改根目录下的 <code>.gitignore</code> 文件为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.deploy*/</div><div class="line">public/</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>3) 依次执行以下指令，同步源文件至 Github：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ git init</div><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"创建Hexo"</span> <span class="comment"># 更新信息</span></div><div class="line">$ git git remote add origin git@github.com:Username/Reponame</div><div class="line">$ git push -u origin master</div><div class="line">$ git pull -rebase origin master <span class="comment"># 如果出现冲突先执行这条语句</span></div></pre></td></tr></table></figure>
<p>即可将博客源文件上传到 Github。</p>
<h2 id="同步电脑B："><a href="#同步电脑B：" class="headerlink" title="同步电脑B："></a>同步电脑B：</h2><p>1.安装 Git。<br>2.安装 Node.js。<br>3.安装 Hexo：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>4.选择一个同步到本地的文件夹，执行 <code>git clone</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git@github.com:Username/Reponame</div></pre></td></tr></table></figure>
<p>到这里，两台电脑的 Hexo 环境一致，Hexo 博客源文件也一样。</p>
<h2 id="两台电脑同步更新博客："><a href="#两台电脑同步更新博客：" class="headerlink" title="两台电脑同步更新博客："></a>两台电脑同步更新博客：</h2><p>1.先检查<code>git pull</code>，将本地博客源文件更新至最新版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull</div></pre></td></tr></table></figure>
<p>2.新建或修改博客内容，进行本机预览等操作：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new &lt;新的博客&gt;</div><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>3.同步 Hexo 源文件至 Github：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add .</div><div class="line">$ git commit -m <span class="string">"更新描述"</span></div><div class="line">$ git push origin master</div></pre></td></tr></table></figure>
<p>4.最后生成 Hexo 静态博客文件并部署。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文参考<a href="http://sufaith.com/2016/02/27/Hexo%E8%BF%81%E7%A7%BB/" title="原文链接" target="_blank" rel="external">原文</a>，并重新整理，转载请注明出处：<a href="http://hijacking.cn/2016/12/06/Hexo-Backup/">http://hijacking.cn/2016/12/06/Hexo-Backup/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;备份电脑A：&quot;&gt;&lt;a href=&quot;#备份电脑A：&quot; class=&quot;headerlink&quot; title=&quot;备份电脑A：&quot;&gt;&lt;/a&gt;备份电脑A：&lt;/h2&gt;&lt;p&gt;1.在 Github 上新建一个仓库，例如 blog。&lt;br&gt;2.上传电脑A本地Hexo博客的源文件到 Github 的 blog 仓库中：&lt;br&gt;1) 删除根目录和主题目录下的 &lt;code&gt;.git&lt;/code&gt; 文件夹&lt;br&gt;2) 修改根目录下的 &lt;code&gt;.gitignore&lt;/code&gt; 文件为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.deploy*/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;public/&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://hijacking.cn/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Effective Objective-C 2.0 - 读书笔记 (1)</title>
    <link href="http://hijacking.cn/2016/07/01/Effective-OC-Note-Part1/"/>
    <id>http://hijacking.cn/2016/07/01/Effective-OC-Note-Part1/</id>
    <published>2016-07-01T11:15:39.000Z</published>
    <updated>2016-12-18T07:25:58.850Z</updated>
    
    <content type="html"><![CDATA[<p>此笔记是在阅读<a href="http://item.jd.com/11402853.html" title="京东链接" target="_blank" rel="external"><em>《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》</em></a> 时所整理，方便今后查阅。</p>
<h2 id="熟悉OC"><a href="#熟悉OC" class="headerlink" title="熟悉OC"></a>熟悉OC</h2><h3 id="了解OC语言的起源"><a href="#了解OC语言的起源" class="headerlink" title="了解OC语言的起源"></a>了解OC语言的起源</h3><h3 id="在类的头文件中尽量少引入其他头文件"><a href="#在类的头文件中尽量少引入其他头文件" class="headerlink" title="在类的头文件中尽量少引入其他头文件"></a>在类的头文件中尽量少引入其他头文件</h3><p>尽量晚地#import需要的头文件，使用@class进行『向前声明』（forward declaring）。<br>如果两个类在各自头文件中引入对方的头文件，则会导致『循环引用』（chicken-and-egg situation）。虽然#import不会像#include导致死循环，但是两个类里有一个无法被正确编译。</p>
<p>最好将协议单独放在一个头文件中，如果把协议放在某个大的头文件里，那么只要引入此协议，就必定会引入那个头文件中的全部内容。<br>然有些协议，例如委托协议（delegate protocol）就不用单独写一个头文件。</p>
<h3 id="多用字面量语法，少用与之等价的方法"><a href="#多用字面量语法，少用与之等价的方法" class="headerlink" title="多用字面量语法，少用与之等价的方法"></a>多用字面量语法，少用与之等价的方法</h3><p>字面量语法（literal syntax），一种语法糖（syntactic sugar）</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSNumber</span> *someNumber = [<span class="built_in">NSNumber</span> numberWithInt:<span class="number">1</span>];</div></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSNumber</span> *someNumber = @<span class="number">1</span>;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>还可以使用：<br><strong>字面量字符串</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *someString = @“Effective Objective-C <span class="number">2.0</span>”;</div></pre></td></tr></table></figure>
<p><strong>字面量数值</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSNumber</span> *floatNumber = @<span class="number">2.5</span>f;</div></pre></td></tr></table></figure>
<p><strong>字面量数组</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *animals = @[@“cat”, @“dog”, @“mouse”, @“badger”];</div><div class="line"><span class="built_in">NSString</span> *dog = animals[<span class="number">1</span>]; <span class="comment">// 取下标操作，subscripting</span></div></pre></td></tr></table></figure>
<p>使用字面量语法更加安全，因为一旦出现nil，便会抛出异常。<br><strong>字面量字典</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> *personData = @&#123;@“firstName” : @“Matt”, @“lastName” : @“Galloway”, @“age” : @<span class="number">28</span>&#125;;</div><div class="line"><span class="built_in">NSString</span> *lastName = personData[@“lastName”];</div></pre></td></tr></table></figure>
<p><strong>可变数组与字典</strong></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mutableArray[<span class="number">1</span>] = @“dog”;</div><div class="line">mutableDictionary[@“lastName”] = @“Galloway”;</div></pre></td></tr></table></figure>
<p><strong>局限</strong><br>使用字面量语法创造出来的对象都是不可变的，若想变成可变版本，需要复制一份：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableArray</span> *<span class="keyword">mutable</span> = [@[@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, @<span class="number">4</span>, @<span class="number">5</span>] mutableCopy];</div></pre></td></tr></table></figure>
<h3 id="多使用类型常量，少用-define-预处理指令"><a href="#多使用类型常量，少用-define-预处理指令" class="headerlink" title="多使用类型常量，少用#define 预处理指令"></a>多使用类型常量，少用#define 预处理指令</h3><p>将</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define ANIMATION_DERATION 0.3</span></div></pre></td></tr></table></figure>
<p>替换为</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> kAnimationDuration = <span class="number">0.3</span>;</div></pre></td></tr></table></figure>
<p>此方法包含类型信息，清楚地描述了常量的含义。<br>并且注意命名方式，若常量局限于某个编译单元（.m文件）之内，则在前面加字母k；若常量在类之外可见，则通常以类名为前缀。<br>注意，变量一定要同时用static和const来声明。const用来保证变量不能被修改，而static意味着该变量仅在定义此变量的编译单元中可见。假如不加static，那么编译器会创建一个external symbol。</p>
<p>有时候需要对外公开某个常量。比如通知中心派发通知的时候，需要给通知一个名称。<br>此类常量需放在『全局符号表』（global symbol table）中，以便可以在编译单元之外使用。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// In the header file</span></div><div class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant;</div><div class="line"></div><div class="line"><span class="comment">// In the implementation file</span></div><div class="line"><span class="built_in">NSString</span> *<span class="keyword">const</span> EOCStringConstant = <span class="string">@"VALUE"</span>;</div></pre></td></tr></table></figure>
<p>在头文件中声明，在实现文件中定义。并且，命名时应该用与之相关的类名做前缀。<br>如上例需要对可见的话</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// EOCAnimatedView.h</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> EOCAnimatedViewAnimationDuration;</div><div class="line"></div><div class="line"><span class="comment">// EOCAnimatedView.m</span></div><div class="line"><span class="keyword">const</span> <span class="built_in">NSTimeInterval</span> EOCAnimatedViewAnimationDuration = <span class="number">0.3</span>;</div></pre></td></tr></table></figure>
<h3 id="用枚举表示状态、选项、状态码"><a href="#用枚举表示状态、选项、状态码" class="headerlink" title="用枚举表示状态、选项、状态码"></a>用枚举表示状态、选项、状态码</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> EOCConnectionState &#123;</div><div class="line">	EOCConnectionStateDisconnected,</div><div class="line">	EOCConnectionStateConnecting,</div><div class="line">	EOCConnectionStateConnected,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> EOCConnectionState EOCConnectionState;</div></pre></td></tr></table></figure>
<p>可以指定底层数据类型（underlying type）来保存枚举类型，可以向前声明枚举变量。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> EOCConnectionStateConnectionState : <span class="built_in">NSInteger</span> &#123; <span class="comment">/* ... */</span> &#125;</div></pre></td></tr></table></figure>
<p>Foundation框架中定义了一些辅助的宏，可以用这些宏来定义枚举值。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUUnteger</span>, EOCConnectionState) &#123;</div><div class="line">	EOCConnectionStateDisconnected,</div><div class="line">	EOCConnectionStateConnecting,</div><div class="line">	EOCConnectionStateConnected,</div><div class="line">&#125;;</div><div class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, EOCPermittedDirection) &#123;</div><div class="line">	EOCPermittedDirectionUP    = <span class="number">1</span>  &lt;&lt;  <span class="number">0</span>,</div><div class="line">	EOCPermittedDirectionDown  = <span class="number">1</span>  &lt;&lt;  <span class="number">1</span>,</div><div class="line">	EOCPermittedDirectionLeft  = <span class="number">1</span>  &lt;&lt;  <span class="number">2</span>,</div><div class="line">	EOCPermittedDirectionRight = <span class="number">1</span>  &lt;&lt;  <span class="number">3</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>需要以按位或操作来组合枚举时使用NS_OPTIONS，不需要互相组合时，使用NS_ENUM定义。</p>
<h2 id="对象、消息、运行期"><a href="#对象、消息、运行期" class="headerlink" title="对象、消息、运行期"></a>对象、消息、运行期</h2><h3 id="理解『属性』这一概念"><a href="#理解『属性』这一概念" class="headerlink" title="理解『属性』这一概念"></a>理解『属性』这一概念</h3><p>OC对象通常会把所需的数据保存为各种实例变量，实例变量一般通过『存取方法』（access method）来访问。<br>如果使用属性，编译器会自动编写访问这些属性所需的方法（getter、setter），叫做『自动合成』（autosynthesis）。除此之外，还自动向类中添加适当类型的实例变量，并且在属性名前加下划线，作为实例变量的名字。<br>如果使用@dynamic关键字，会告诉编译器，不要自动创建属性所用的实例变量，也不要为其创建存取方法。<br><strong>属性特质</strong></p>
<ol>
<li>原子性<br>如果属性具备nonatomic特质，则不使用同步锁。</li>
<li>读/写权限</li>
</ol>
<ul>
<li>readwrite：拥有getter和setter</li>
<li>readonly：仅拥有getter</li>
</ul>
<ol>
<li>内存管理语义</li>
</ol>
<ul>
<li>assign：设置方法只会执行针对『纯量类型』（scalar type，例如CGFloat或NSInteger等）的简单赋值操作。</li>
<li>strong：定义一种『拥有关系』（owning relationship）。设置方法会先保留新值，并释放旧值，然后再将新值设置上去。</li>
<li>weak：定义一种『非拥有关系』（nonowning relationship）。设置方法既不保留新值，也不释放旧值。在属性所指的对象销毁时，属性值也会清空（nil out）。</li>
<li>unsafe_unretained：语义与assign相同，但是适用于『对象类型』，表达一种『非拥有关系』，当目标对象销毁时，属性值不会自动清空（不安全，unsafe）。</li>
<li>copy：所属关系与strong类似。但设置方法并不保留新值，而是将其『拷贝』。</li>
</ul>
<ol>
<li>方法名<br>可以通过getter\setter=&lt; name &gt;来设置获取方法或者设置方法的方法名。</li>
</ol>
<h3 id="在对象内部尽量直接访问实例变量"><a href="#在对象内部尽量直接访问实例变量" class="headerlink" title="在对象内部尽量直接访问实例变量"></a>在对象内部尽量直接访问实例变量</h3><p>在对象之外访问实例变量时，应该通过属性来做。在对象内部时，建议采用直接访问的形式读取，通过属性来设置。<br>特殊情况：</p>
<ol>
<li>在初始化方法中，应该直接访问实例变量。</li>
<li>在懒加载中，应该使用 『获取方法』来访问属性。</li>
</ol>
<h3 id="理解『对象等同性』这一概念"><a href="#理解『对象等同性』这一概念" class="headerlink" title="理解『对象等同性』这一概念"></a>理解『对象等同性』这一概念</h3><p>某些对象提供了特殊的『等同性判定方法』（equality-checking method）。如isEqualToString，isEqual等。<br>自己创建等同性判定方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)isEqualToPerson:（EOCPerson *）otherPerson &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> == object) <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (![_firstName isEqualToString: otherPerson.firstName])</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">if</span> (![_lastName isEqualToString: otherPerson.lastName])</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">if</span> (_age != otherPerson.age)</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span> <span class="keyword">class</span>] == [object <span class="keyword">class</span>]) &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> isEqualToPerson:(EOCPerson *)object];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> isEqual:object];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相同的对象必须具有相同的哈希码，但是两个哈希码相同的对象却未被相同（isEqual 与 hash 方法）。</p>
<h3 id="以『类族模式』隐藏实现细节"><a href="#以『类族模式』隐藏实现细节" class="headerlink" title="以『类族模式』隐藏实现细节"></a>以『类族模式』隐藏实现细节</h3><p>『类族』（class cluster）是一种很有用的模式（pattern），可以隐藏『抽象基类』（abstract base class）背后的实现细节，对外提供一套简单的公共接口。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)isKindOfClass: classObj  <span class="comment">// 判断是否是这个类或者这个类的子类的实例</span></div><div class="line">- (<span class="built_in">BOOL</span>)isMemberOfClass: classObj  <span class="comment">// 判断是否是这个类的实例</span></div></pre></td></tr></table></figure>
<h3 id="在既有类中使用关联对象存放自定义数据"><a href="#在既有类中使用关联对象存放自定义数据" class="headerlink" title="在既有类中使用关联对象存放自定义数据"></a>在既有类中使用关联对象存放自定义数据</h3><p>从对象所属的类中继承一个子类，然后改用子类对象。然而，并非所有情况都可以那么做，有时候类的实例可能由某种机制所创建，而开发者无法令这种机制创建出自己所写的子类实例。这时候可以采用『关联对象』（Associated Object）。<br>例如，想在一个类里同时处理多个警告信息视图，如果能在创建警告视图的时候直接把处理每个按钮的逻辑都写好，那么代码就简洁而清晰多了。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> *EOCMyAlertViewKey = <span class="string">@"EOCMyAlertViewKey"</span>;</div><div class="line">- (<span class="keyword">void</span>)askUserQuestion &#123;</div><div class="line">  <span class="built_in">UIAlertView</span> *alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"Question"</span>   message:<span class="string">@"what do you want to do"</span> delegate:<span class="keyword">self</span> cancelButtonTitle:<span class="string">@"取消"</span> otherButtonTitles:<span class="string">@"继续"</span>, <span class="literal">nil</span>];</div><div class="line"> <span class="keyword">void</span> (^block)(<span class="built_in">NSInteger</span>) = ^(<span class="built_in">NSInteger</span> buttonIndex) &#123;</div><div class="line">  <span class="keyword">if</span> (buttonIndex == <span class="number">0</span>) &#123;</div><div class="line">     [<span class="keyword">self</span> doCancel];</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">     [<span class="keyword">self</span> doContinue];</div><div class="line">  &#125;</div><div class="line"> &#125;;</div><div class="line">  objc_setAssociatedObject(alter, EOCMyAlertViewKey, block, OBJC_ASSOCIATION_COPY);</div><div class="line">[alter show];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)alertView:(<span class="built_in">UIAlertView</span> *)alertView clickedButtonAtIndex:(<span class="built_in">NSInteger</span>)buttonIndex &#123;</div><div class="line">   <span class="keyword">void</span> (^block)(<span class="built_in">NSInteger</span>) = objc_getAssociatedObject(alertView, EOCMyAlertViewKey);</div><div class="line">  block(buttonIndex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是，采用该方法的时候块可能要捕捉某些变量，会造成『保留环』（retain cycle）。<br>这种做法只有在其他办法行不通的时候才考虑使用。取代方法是从中继承子类，把块保存为子类中的属性。</p>
<h3 id="理解objc-msgSend的作用"><a href="#理解objc-msgSend的作用" class="headerlink" title="理解objc_msgSend的作用"></a>理解objc_msgSend的作用</h3><p>对象上调用方法在OC中叫做『传递消息』（pass a message）。消息有 名称 和 选择子（selector）。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OC中给对象发送消息</span></div><div class="line"><span class="keyword">id</span> returnValue = [someObject messageName: parameter];</div><div class="line"><span class="comment">// 转化为一条标准的C语言函数调用</span></div><div class="line"><span class="keyword">id</span> returnValue = objc_msgSend(someObject, <span class="keyword">@selector</span>(messageName:), parameter);</div></pre></td></tr></table></figure>
<p>消息由接受者、选择子及参数构成。给某对象『发送消息』（invoke a message）也就相当于在该对象上『调用方法』（call a method）。<br>发送给某对象的全部消息都要由『动态消息派发系统』（dynamic message dispatch system）来处理，该系统会查出对应的方法，并执行其代码。</p>
<h3 id="理解消息转发机制"><a href="#理解消息转发机制" class="headerlink" title="理解消息转发机制"></a>理解消息转发机制</h3><p>当对象接收到无法解读的消息后，就会启动『消息转发』（message forwarding）机制，由此过程告诉对象应该如何处理未知消息。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 控制台如下信息说明 曾向某个对象发送了一条其无法解读的消息，从而启动了消息转发机制，并将此消息发给了NSObject的默认实现</span></div><div class="line">unrecognized selector sent to instance <span class="number">0x87</span>...</div></pre></td></tr></table></figure>
<p>开发者在编写自己的类时，可于转发过程中设置挂钩，用以执行预定的逻辑，而不使应用程序崩溃。</p>
<ul>
<li>消息转发分为两大阶段，第一阶段先征询接收者，所属的类，看其是否能动态添加方法，以处理当前这个『未知的选择子』（unknown selector），叫做『动态方法解析』（dynamic method resolution）。</li>
<li>第二阶段设计『完整的消息转发机制』（full forwarding mechanism）。首先，接收者看看有没有其他对象能处理这条消息，若有，则运行期系统会把消息转给那个对象，消息转发过程结束。若没有『备援的接收者』（replacement receiver），则启动完整的消息转发机制，runtime会把与消息有关的全部细节封装到NSInvocation对象中，再给接收者最后一次机会，令其设法解决当前还未处理的这条消息。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 动态方法解析</span></div><div class="line"><span class="comment">// 对象收到无法解读的消息后，首先将调用其所属类的下列类方法</span></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)selector;</div><div class="line"></div><div class="line"><span class="comment">// 备援接收者</span></div><div class="line"><span class="comment">// runtime问接收者，能不能把这条消息转发给其他接收者来处理</span></div><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)selector;</div><div class="line"></div><div class="line"><span class="comment">// 完整的消息转发</span></div><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)invocation;</div></pre></td></tr></table></figure>
<h3 id="用『方法调配技术』测试『黑盒方法』"><a href="#用『方法调配技术』测试『黑盒方法』" class="headerlink" title="用『方法调配技术』测试『黑盒方法』"></a>用『方法调配技术』测试『黑盒方法』</h3><p>方法调配（method swizzling）：与给定选择子名称对应的方法可以在运行期改变。既不需要源代码，也不需要通过继承子类来覆写方法就能改变这个类本身的功能。新功能将在本类的所有实例中生效。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 交换方法实现</span></div><div class="line"><span class="keyword">void</span> method_exchangeImplementations(Method m1, Method m2)</div><div class="line"><span class="comment">// 获取方法实现</span></div><div class="line">Method class_getInstanceMethod(Class aClass, SEL aSelector)</div></pre></td></tr></table></figure>
<p>通过此方案，可以为那些『完全不知道其具体实现的』（complete opaque）黑盒方法增加日志记录功能。</p>
<h3 id="理解『类对象』的用意"><a href="#理解『类对象』的用意" class="headerlink" title="理解『类对象』的用意"></a>理解『类对象』的用意</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// id类型定义</div><div class="line">typedef struct objc_object &#123;</div><div class="line">	Class isa;</div><div class="line">&#125; *id;</div><div class="line"></div><div class="line">// Class类型定义</div><div class="line">typedef struct objc_class *Class;</div><div class="line">struct objc_Class &#123;</div><div class="line">	Class *isa;</div><div class="line">	Class super_class;</div><div class="line">	const char *name;</div><div class="line">	long version;</div><div class="line">	long info;</div><div class="line">	long instance_size;</div><div class="line">	struct objc_ivar_list *ivars;</div><div class="line">	struct objc_method_list **methodLists;</div><div class="line">	struct objc_cache *cache;</div><div class="line">	struct objc_protocol_list *protocols;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在类继承体系中查询类型信息：<br><code>isMemberOfClass</code>判断对象是否为某个特定类的实例，<code>isKindOfClass</code>判断对象是否为某类或其派生类的实例。<br>每个实例都有一个指向Class对象的指针，用以表明其类型。</p>
<h2 id="接口与API设计"><a href="#接口与API设计" class="headerlink" title="接口与API设计"></a>接口与API设计</h2><h3 id="用前缀避免命名空间冲突"><a href="#用前缀避免命名空间冲突" class="headerlink" title="用前缀避免命名空间冲突"></a>用前缀避免命名空间冲突</h3><p>OC没有其他语言内置的『命名空间』（namespace）机制。<br>选择与公司或应用程序或二者皆有关联之名称作为类名的前缀，并在所有代码中均使用这一前缀。<br>若自己所开发的程序库中使用到了第三方库，则应为其中的名称加上前缀。</p>
<h3 id="提供『全能初始化方法』"><a href="#提供『全能初始化方法』" class="headerlink" title="提供『全能初始化方法』"></a>提供『全能初始化方法』</h3><p>把这种可为对象提供必要信息以便其能完成工作的初始化方法叫做『全能/指定初始化方法』（designated initializer）。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Rectangle.m</span></div><div class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height &#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">		_width = width;</div><div class="line">		_height = height;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果有人调用[[Rectangle alloc]init]来创建，所有的实例变量都会设为0（或是与0等价的值）</span></div><div class="line"><span class="comment">// 不过我们一般希望自己能设置默认的宽度和高度，或者抛出异常</span></div><div class="line"><span class="comment">// 使用下面任意一种方法来覆写init方法</span></div><div class="line"></div><div class="line"><span class="comment">// Using default values</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">self</span> initWithWidth:<span class="number">5.0</span>f andHeight:<span class="number">10.0</span>f];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Throwing an exception</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">	<span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInternalInconsistentcyException</span> reason:<span class="string">@"Must use initWithWidth:andHeight: instead."</span> useInfo:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>全能初始化方法的调用链一定要维系。并且，如果子类的全能初始化方法与超类方法的名称不同，那么总应覆写超类的全能初始化方法（调用本类的全能初始化方法）。<br>如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。<br>有时候，可能需要编写多个全能初始化方法，因为对象的实例可能有两种完全不同的创建方式。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Rectangle.m</span></div><div class="line"><span class="comment">// Designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height &#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">		_width = width;</div><div class="line">		_height = height;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Superclass's designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">self</span> initWithWidth:<span class="number">5.0</span>f andHeight:<span class="number">10.0</span>f];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Initializer from NSCoding</span></div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder &#123;</div><div class="line">	<span class="comment">// call through to super's designated initializer</span></div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> init])) &#123;</div><div class="line">		_width = [decoder decodeFloatForKey:<span class="string">@"width"</span>];</div><div class="line">		_height = [decoder decodeFloatForKey:<span class="string">@"height"</span>];</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Square.m</span></div><div class="line"><span class="comment">// Designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)initWithDimension:(<span class="keyword">float</span>)dimension &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">super</span> initWidth:dimension andHeight:dimension];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Superclass's designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)initWithWidth:(<span class="keyword">float</span>)width andHeight:(<span class="keyword">float</span>)height &#123;</div><div class="line">	<span class="keyword">float</span> dimension = MAX(width, height);</div><div class="line">	<span class="keyword">return</span> [<span class="keyword">self</span> initWithDimension:dimension];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// NSCoding designated initializer</span></div><div class="line">- (<span class="keyword">id</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)decoder &#123;</div><div class="line">	<span class="keyword">if</span> ((<span class="keyword">self</span> = [<span class="keyword">super</span> initWithCoder:decoder])) &#123;</div><div class="line">		<span class="comment">// Square's specific initializer</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每个子类的全能初始化方法都应该调用其超类的对应方法，并逐层向上。</p>
<h3 id="实现descripiton方法"><a href="#实现descripiton方法" class="headerlink" title="实现descripiton方法"></a>实现descripiton方法</h3><p>自定义类时可以覆写description方法并将描述此对象的字符串返回。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Person.m</span></div><div class="line">- (<span class="built_in">NSString</span> *)description &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p, \"%@ %@\"&gt;"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>, _firstName, _lastName];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有个简单的方法，可以借助NSDictionary类的description方法，可以在description中输出很多互不相同的信息。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSString</span> *)description &#123;</div><div class="line">	<span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p, %@&gt;"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>], <span class="keyword">self</span>, @&#123;<span class="string">@"title"</span>:_title, <span class="string">@"latitude"</span>:@(_latitude), <span class="string">@"longitude"</span>:@(_longitude)&#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>debugDescription是开发者在调试器（debugger）中以控制台命令打印对象时才调用的。在NSObject类的默认实现中，此方法直接调用description。<br>实现description方法返回一个有意义的字符串，用以描述该实例。但若想在调试时打印出更详尽的对象描述信息，则应该实现debugDescription方法。</p>
<h3 id="尽量使用不可变对象"><a href="#尽量使用不可变对象" class="headerlink" title="尽量使用不可变对象"></a>尽量使用不可变对象</h3><p>设计类的时候，应该充分运用属性来封装数据。而在使用属性时，可将其声明为『只读』（read-only）。<br>但是设置为<code>read-only</code>的属性在对象外部仍然可以通过『键值编码』（Key-Value Coding, KVC）技术<code>setValue:forKey:</code>设置这些属性值。不过这么做等于违规地绕过了本类所提供的API，使用这种『杂技代码』（hack）的话，得自己来应对可能出现的问题。<br>尽量创建不可变的对象。若某属性仅可用于对象内部修改，则在『class-continuation分类』中将其由readonly属性扩展为readwrite属性。不要把可变的collection作为属性公开，而应提供相关方法，以此修改对象中的可变collection。</p>
<h3 id="使用清晰而协调的命名方式"><a href="#使用清晰而协调的命名方式" class="headerlink" title="使用清晰而协调的命名方式"></a>使用清晰而协调的命名方式</h3><p><strong>方法命名：</strong></p>
<ul>
<li>如果方法的返回值是新创建的，那么方法名的首个词应该是返回值的类型，除非前面还有修饰语</li>
<li>应该把表示参数类型的名词放在参数前面</li>
<li>如果方法要在当前对象上执行操作，那么就应该包括动词；若执行操作时还需要参数，则应该在动词后面加上一个或多个名词</li>
<li>将get这个前缀留给那些借由『输出参数』来保存返回值的方法，比如<code>getCharacters:range</code>，调用此方法时，要在首个参数中传入数组，该方法所获取的字符正是要放到这个数组里面。</li>
</ul>
<h3 id="为私有方法名添加前缀"><a href="#为私有方法名添加前缀" class="headerlink" title="为私有方法名添加前缀"></a>为私有方法名添加前缀</h3><p>可以使用<code>p_</code>或者类名前缀作为前缀。</p>
<h3 id="理解Objective-C错误模型"><a href="#理解Objective-C错误模型" class="headerlink" title="理解Objective-C错误模型"></a>理解Objective-C错误模型</h3><p>OC中的异常只用于处理致命错误（fatal error），在非致命错误（nonfatal error）时，OC所用的编程范式为：令方法返回nil/0，或者是使用NSError，以表明其中有错误发生。<br>NSError对象里封装了三条信息：</p>
<ul>
<li>Error domain（错误范围，类型为字符串）：发生错误的范围，也就是产生错误的根源，通常用一个特有的全局变量来定义。</li>
<li>Error code（错误码，类型为整数）：独特的错误代码，指明在某个范围内具体发生了何种错误。</li>
<li>User info（用户信息，类型为字典）：有关此错误的额外信息，其中或许包含一段『本地化的描述』，或许还有含有导致该错误发生的另外一个错误。<br>NSError经由方法的『输出参数』返回给调用者。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)doSomething:(<span class="built_in">NSError</span> **)error</div></pre></td></tr></table></figure>
<p>这样，此方法不仅能有普通的返回值，而且还能经由『输出参数』把NSError对象回传给调用者。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</div><div class="line"><span class="built_in">BOOL</span> ret = [object doSomething:&amp;error];</div><div class="line"><span class="keyword">if</span> (error) &#123;</div><div class="line">	<span class="comment">// There was an error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>像这样的方法一般都会返回Boolean值，用来表示成功了还是失败了。如果不关注具体的错误信息，那么直接判断这个Boolean值就好。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> ret = [object doSomething:<span class="literal">nil</span>];</div><div class="line"><span class="keyword">if</span> (ret) &#123;</div><div class="line">	<span class="comment">// There was an error</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有发生了可使整个应用程序崩溃的严重错误时，才应使用异常。<br>在错误不那么严重的情况下，可以指派『委托方法』（delegate method）来处理错误，也可以把错误信息放在NSError对象里，经由『输出参数』返回给调用者。</p>
<h3 id="理解NSCopying协议"><a href="#理解NSCopying协议" class="headerlink" title="理解NSCopying协议"></a>理解NSCopying协议</h3><p>OC中，使用copy方法来进行拷贝。如果想令自己的类支持拷贝操作，那么就要实现NSCopying协议，该协议只有一个方法：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="built_in">NSZone</span> *)zone</div></pre></td></tr></table></figure>
<p>以前开发程序时，需要把内存分成不同的区（zone），而对象会创建在某个区里。而现在每个程序只有一个区：『默认区』（default zone）。因此不必担心zone参数。<br>NSMutableCopying协议定义了：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="built_in">NSZone</span> *)zone</div></pre></td></tr></table></figure>
<p>无论当前实例是否可变，若需获取其可变版本的拷贝，均应调用mutableCopy方法。同理，若需要不可变的拷贝，则总应通过copy方法来获取。<br>深拷贝（deep copy）：在拷贝对象自身时，将其底层数据也一并复制过去。<br>浅拷贝（shallow copy）：只拷贝容器对象本身，而不复制其中数据。一般情况下会使用浅拷贝。<br>如果所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)deepCopy &#123;</div><div class="line">	Person *<span class="keyword">copy</span> = [[[<span class="keyword">self</span> <span class="keyword">class</span>] alloc] initWithFirstName:_firstName andLastName:_lastName];</div><div class="line">	<span class="keyword">copy</span>-&gt;_friends = [[<span class="built_in">NSMutableSet</span> alloc] initWithSet:_friends copyItems:<span class="literal">YES</span>];</div><div class="line">	<span class="keyword">return</span> <span class="keyword">copy</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>未完，不定期更新，接<a href="http://hijacking.cn/2016/07/01/Effective-OC-Note-Part2/">下篇</a>。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/07/01/Effective-OC-Note-Part1/">http://hijacking.cn/2016/07/01/Effective-OC-Note-Part1/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此笔记是在阅读&lt;a href=&quot;http://item.jd.com/11402853.html&quot; title=&quot;京东链接&quot;&gt;&lt;em&gt;《Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法》&lt;/em&gt;&lt;/a&gt; 时所整理，方便今后查阅。&lt;/p&gt;
&lt;h2 id=&quot;熟悉OC&quot;&gt;&lt;a href=&quot;#熟悉OC&quot; class=&quot;headerlink&quot; title=&quot;熟悉OC&quot;&gt;&lt;/a&gt;熟悉OC&lt;/h2&gt;&lt;h3 id=&quot;了解OC语言的起源&quot;&gt;&lt;a href=&quot;#了解OC语言的起源&quot; class=&quot;headerlink&quot; title=&quot;了解OC语言的起源&quot;&gt;&lt;/a&gt;了解OC语言的起源&lt;/h3&gt;&lt;h3 id=&quot;在类的头文件中尽量少引入其他头文件&quot;&gt;&lt;a href=&quot;#在类的头文件中尽量少引入其他头文件&quot; class=&quot;headerlink&quot; title=&quot;在类的头文件中尽量少引入其他头文件&quot;&gt;&lt;/a&gt;在类的头文件中尽量少引入其他头文件&lt;/h3&gt;&lt;p&gt;尽量晚地#import需要的头文件，使用@class进行『向前声明』（forward declaring）。&lt;br&gt;如果两个类在各自头文件中引入对方的头文件，则会导致『循环引用』（chicken-and-egg situation）。虽然#import不会像#include导致死循环，但是两个类里有一个无法被正确编译。&lt;/p&gt;
&lt;p&gt;最好将协议单独放在一个头文件中，如果把协议放在某个大的头文件里，那么只要引入此协议，就必定会引入那个头文件中的全部内容。&lt;br&gt;然有些协议，例如委托协议（delegate protocol）就不用单独写一个头文件。&lt;/p&gt;
&lt;h3 id=&quot;多用字面量语法，少用与之等价的方法&quot;&gt;&lt;a href=&quot;#多用字面量语法，少用与之等价的方法&quot; class=&quot;headerlink&quot; title=&quot;多用字面量语法，少用与之等价的方法&quot;&gt;&lt;/a&gt;多用字面量语法，少用与之等价的方法&lt;/h3&gt;&lt;p&gt;字面量语法（literal syntax），一种语法糖（syntactic sugar）&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *someNumber = [&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; numberWithInt:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等价于：&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSNumber&lt;/span&gt; *someNumber = @&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Objective-C" scheme="http://hijacking.cn/tags/Objective-C/"/>
    
      <category term="iOS" scheme="http://hijacking.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 去除优酷视频广告</title>
    <link href="http://hijacking.cn/2016/06/27/MacOS-Block-Youku-Ad/"/>
    <id>http://hijacking.cn/2016/06/27/MacOS-Block-Youku-Ad/</id>
    <published>2016-06-27T02:14:13.000Z</published>
    <updated>2016-12-18T04:23:35.237Z</updated>
    
    <content type="html"><![CDATA[<p>教程最早发表于威锋网，<a href="http://bbs.feng.com/read-htm-tid-8304000.html" target="_blank" rel="external">原帖地址</a>。未经允许，不得转载。</p>
<h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><p>1.打开 Finder，同时按住 Shift + Command + G ，输入 /private/etc/ ，然后前往，找到 hosts 文件。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/101621073.png" alt="前往文件夹" title="前往文件夹"></p>
<p>2.将 hosts 文件拷贝一份到桌面上，然后使用文本编辑器添加如下字段：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 atm.youku.com</div><div class="line">127.0.0.1 fvid.atm.youku.com</div><div class="line">127.0.0.1 html.atm.youku.com</div><div class="line">127.0.0.1 valb.atm.youku.com</div><div class="line">127.0.0.1 valf.atm.youku.com</div><div class="line">127.0.0.1 valo.atm.youku.com</div><div class="line">127.0.0.1 valp.atm.youku.com</div><div class="line">127.0.0.1 lstat.youku.com</div><div class="line">127.0.0.1 speed.lstat.youku.com</div><div class="line">127.0.0.1 urchin.lstat.youku.com</div><div class="line">127.0.0.1 stat.youku.com</div><div class="line">127.0.0.1 static.lstat.youku.com</div><div class="line">127.0.0.1 valc.atm.youku.com</div><div class="line">127.0.0.1 vid.atm.youku.com</div><div class="line">127.0.0.1 walp.atm.youku.com</div></pre></td></tr></table></figure>
<p><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/102014249.png" alt="修改hosts文件" title="修改hosts文件"></p>
<p>3.保存并退出，将修改好的 hosts 文件替换原来的 hosts 文件，有密码会提示输入密码。</p>
<h2 id="删除优酷缓存文件夹"><a href="#删除优酷缓存文件夹" class="headerlink" title="删除优酷缓存文件夹"></a>删除优酷缓存文件夹</h2><p>打开 Finder，同时按住 <code>Shift + Command + G</code> ，输入 <code>~/Library/Preferences/Macromedia/Flash Player/#SharedObjects/</code> ，看到一个字母数字组成的文件夹，例如 <code>479H5MNT</code>（名字随机生成），将文件夹内的 <code>static.youku.com</code> 文件夹删除。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/102146464.png" alt="删除缓存文件" title="删除缓存文件"></p>
<h2 id="网页设置"><a href="#网页设置" class="headerlink" title="网页设置"></a>网页设置</h2><p>随便打开一个优酷视频网页，此时应该没有广告了，点击右下角的设置按钮，优先画质选择超清或高清，确定。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/102215628.png" alt="网页设置" title="网页设置"></p>
<h2 id="设置文件权限"><a href="#设置文件权限" class="headerlink" title="设置文件权限"></a>设置文件权限</h2><p>再次进入 <code>~/Library/Preferences/Macromedia/Flash Player/#SharedObjects/</code> 位置，一直进入里面的文件夹，找到 <code>YOUKU_FSO_PROXY.sol</code> 文件。右键点击选择“显示简介”，在最后共享与权限中将所有账户权限改成只读（不能修改点击右下角的锁解锁），最后点击通用中的已锁定。<br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/102253967.png" alt="设置权限" title="设置权限"></p>
<p>对于极少部分人，如果按照上面步骤出现优酷黑屏，提示广告被屏蔽的话，试着将第二步中那个数字和字母随即生成的文件夹，如 <code>479H5MNT</code> ，整个删除，再按照上面的方法试一遍。</p>
<hr>
<p><div><br><img src="http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161214/101015213.png" alt="CC4.0" align="left"><br></div><br><em>本文采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="external">CC4.0</a>协议授权，转载请注明出处：<a href="http://hijacking.cn/2016/06/27/MacOS-Block-Youku-Ad/">http://hijacking.cn/2016/06/27/MacOS-Block-Youku-Ad/</a>，其他请联系<a href="mailto:me@jiaweilu.com?subject=【hijacking.cn】" target="_blank" rel="external">Jiawei LU</a></em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;教程最早发表于威锋网，&lt;a href=&quot;http://bbs.feng.com/read-htm-tid-8304000.html&quot;&gt;原帖地址&lt;/a&gt;。未经允许，不得转载。&lt;/p&gt;
&lt;h2 id=&quot;修改hosts文件&quot;&gt;&lt;a href=&quot;#修改hosts文件&quot; class=&quot;headerlink&quot; title=&quot;修改hosts文件&quot;&gt;&lt;/a&gt;修改hosts文件&lt;/h2&gt;&lt;p&gt;1.打开 Finder，同时按住 Shift + Command + G ，输入 /private/etc/ ，然后前往，找到 hosts 文件。&lt;br&gt;&lt;img src=&quot;http://7xvvfk.com1.z0.glb.clouddn.com/blog/20161207/101621073.png&quot; alt=&quot;前往文件夹&quot; title=&quot;前往文件夹&quot;&gt;&lt;/p&gt;
&lt;p&gt;2.将 hosts 文件拷贝一份到桌面上，然后使用文本编辑器添加如下字段：&lt;/p&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="http://hijacking.cn/tags/macOS/"/>
    
  </entry>
  
</feed>
